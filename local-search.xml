<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于解决 hexo 博客中图片无法显示的问题</title>
    <link href="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>读研后大部分时间都待在办公室了，原来部署博客的笔记本电脑很少携带。为了方便更新博客，想着实现一下博客多端同步功能，即使在办公室也能轻松摸鱼写博客😊。虽然同步编辑实现了，却出现了博客中图片无法显示的问题；网上寻找解决办法，有效的博客并不多，甚至很多博客是一样的，存粹的copy。好在花费了一些时间，解决了这个问题，于是便想着记录一下解决过程，希望能给别的同志一些参考和启发。</p><span id="more"></span><h2 id="1、初尝试"><a href="#1、初尝试" class="headerlink" title="1、初尝试"></a>1、初尝试</h2><p>网上绝大数的解决方法都是设置<code>post__asset_folder属性为true</code> + <code>安装hexo-asset-image插件</code>，经尝试后并不好使。后来看到了<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">这篇博客</a>，受其启发去查看图片的路径，方定位到问题，才得以解决。</p><h2 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h2><h3 id="2-1-创建图片资源文件夹"><a href="#2-1-创建图片资源文件夹" class="headerlink" title="2.1 创建图片资源文件夹"></a>2.1 创建图片资源文件夹</h3><p>网上有关的解决方式几乎很大一部分会提到这一点：将博客根目录<code>_config.yml</code> 文件中的<code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。事实上这正是hexo<a href="https://hexo.io/zh-cn/docs/asset-folders">官方文档</a>给出的解决<strong>方案之一</strong>中的<strong>一个步骤</strong>。</p><p>该操作的作用就是在使用<code>hexo new &quot;xxx&quot;</code>命令新建博文时，在相同路径下同步创建一个<code>xxx</code>文件夹，而<code>xxx</code>文件夹的作用就是用来存放博客中引用的图片资源；</p><h3 id="2-2-安装插件"><a href="#2-2-安装插件" class="headerlink" title="2.2 安装插件"></a>2.2 安装插件</h3><p>很多博客提到<code>hexo-asset-image</code>这个插件，相信在网上找了一波解决方案的同学一定对这个名字不陌生。</p><p>插件安装方法参考官网：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>该插件主要功能就是<strong>路径转换</strong>，根据markdown中图片的相对路径，给出html中图片的绝对路径。具体原理，金牛大王同学的<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">博客</a>中提过，我不再阐述。</p><h3 id="2-3-配置typora图像引用设置"><a href="#2-3-配置typora图像引用设置" class="headerlink" title="2.3 配置typora图像引用设置"></a>2.3 配置typora图像引用设置</h3><p>这里也是参考了网上的设置。这样设置，当我们向文档中添加图片时，软件会自动帮我们将图片复制到文档同名文件夹中，即前文提到的每篇博客对应的图片资源文件夹；可使我们更专注于写作。</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220190441688.png"></p><h3 id="2-4-更正markdown图片路径"><a href="#2-4-更正markdown图片路径" class="headerlink" title="2.4 更正markdown图片路径"></a>2.4 更正markdown图片路径</h3><p>图片不能正常显示，根本原因就是路径不正确，html无法识别。这里我打开<code>hexo g</code>后生成的博客<code>index.html</code>文件（文件位于博客根目录public文件夹中）</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220191537253.png"></p><p>可以看到图片不能正常显示</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220191709908.png"></p><p>使用浏览器检查元素工具查看图片的html源码</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220191758373.png"></p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220191859827.png"></p><p>发现路径中出现两段重复的文字，且图片路径的最前方多了<code>/.io</code></p><ul><li><p><strong>如何去掉多余的前缀？</strong></p><p>重复路径这一问题，主要是由于插件使用方法不正确导致，我们来看看<a href="https://github.com/xcodebuild/hexo-asset-image">官网</a>的使用方法：</p></li></ul><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220200318080.png"></p><p>因此，在markdown文档中，图片的引用路径中不应该添加前缀，正确的引用如下：</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220200518074.png"></p><ul><li><p>**多余的<code>/.io</code>**怎么处理呢？</p><p>经过官网查询，发现这个问题是<code>hexo-asset-image/index.js</code>中的一行代码导致的，原作者已经修复<u>（<a href="https://github.com/xcodebuild/hexo-asset-image/issues/47">域名是xxx.io的情况下，图片路径会从原本&#x2F;xxx.jpg变成 &#x2F;.io&#x2F;xxx.jpg · Issue #47 · xcodebuild&#x2F;hexo-asset-image (github.com)</a>）</u>，不知为何我下载的依旧是旧版本</p></li></ul><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220201130720.png"></p><p>手动修改代码后，图片可正常显示。</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220201553022.png"></p><p>至此，问题已全部解决</p><h2 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h2><p>现如今，网上的博客质量良莠不齐。各种问题也是因人而异，同样的解决方法适用于别人，可能不适用于自己。总是，遇见问题，还是要多尝试，多查资料，多思考</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在hexo中嵌入pdf</title>
    <link href="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/"/>
    <url>/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/</url>
    
    <content type="html"><![CDATA[<p>本来是想把一周年纪念日的照片放在个人网站上，考虑到一张张上传太麻烦了，正好此前做了一本书，想着干脆直接上传 pdf 并嵌入到网站上。</p><p>说干就干，查了一些将 pdf 嵌入博客页面的方法，有<code>hexo-pdf</code>这个插件，但是似乎不支持多端适配。有朋友提到可以用<code>pdf.js</code>，简单方便，而且在桌面端和移动端都有不错的效果，那么开始实验！</p><span id="more"></span><p>接下来，进入正式流程：</p><ul><li>第一步，下载<a href="https://mozilla.github.io/pdf.js/getting_started/#download">pdf.js</a>，将文件夹解压放到指定的位置。我的博客应用的是<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题，将下载文件夹命名为 pdfjs，拷贝到<code>themes/fluid/source/js</code> 中</li></ul><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220101630961.png"></p><ul><li>第二步，修改<code>pdfjs/web/viewer.js</code>，将里面的特定内容注销，可以使用关键词搜索找到这里⬇️</li></ul><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220102717239.png"></p><ul><li>第三步，修改博客配置文件<code>_config.yml</code>（注意不是主题配置文件），将<code>pdfjs</code>文件夹加入到跳过渲染的选项里；</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">skip_render:</span> [<span class="hljs-string">myjs/**</span>]<br></code></pre></td></tr></table></figure><ul><li>第四步，在<code>pdfjs</code>文件夹里，新建一个 <code>pdf</code> 文件夹，用于存储需要嵌入的 pdf 文件。需要注意的是，存入的 pdf 文件名不能含有非法字符，比如<code>&amp;</code>；</li></ul><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220103144520.png"></p><ul><li>第五步，在博文的markdown文档中使用 <code>&lt;iframe&gt;</code> 控件配合pdf.js 库完成 pdf  显示:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;iframe src=<span class="hljs-string">&#x27;/js/pdfjs/web/viewer.html?file=/js/pdfjs/pdf/我们的第一个春夏秋冬.pdf&#x27;</span> style=<span class="hljs-string">&#x27;width:100%;height:900px&#x27;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>注意此处填写的是相对路径⬆️，嵌入文档的高度和宽度可以调整，对于论文pdf或者ppt转pdf而言，将高度设置为<code>900px</code>似乎是个不错的选择。另外，由于markdown编辑器（比如typora）并不是完整的浏览器，所以在查看<code>.md</code>文档时，本地并不会成功显示 pdf 控件，而是会看到类似下面的内容：</p><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220103903451.png"></p><p>部署完在网页端打开，浏览器是可以正常渲染的！效果如下：</p><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220104706148-1703040433644-1.png"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客多端同步</title>
    <link href="/2023/12/19/hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5/"/>
    <url>/2023/12/19/hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><ol><li><p>在新电脑上克隆username.github.io仓库的hexo分支(就是存放源码的分支)到本地，此时本地git仓库处于hexo分支,可以执行<code>git branch -v</code>查看。</p></li><li><p>在clone下来的仓库文件夹中安装和配置hexo环境，依次调用命令：npm install hexo、npm install、npm install hexo-deployer-git；（不需要hexo init）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo <span class="hljs-comment"># 安装hexo</span><br>npm install <span class="hljs-comment"># 安装依赖及插件</span><br>npm install hexo-deployer-git<br></code></pre></td></tr></table></figure></li><li><p>新的终端电脑上生成新文章：</p><ul><li><p><strong>打开命令行或终端</strong>：进入到你的 Hexo 博客根目录。</p></li><li><p><strong>运行命令创建新文章</strong>：Hexo 提供了一个命令来创建新文章。在命令行中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>这会在 Hexo 的 <code>source/_posts</code> 目录下创建一个新的 Markdown 文件，文件名通常会基于标题自动生成。</p></li><li><p><strong>编辑文章</strong>：使用喜欢的文本编辑器打开新生成的 Markdown 文件，然后编写你的文章内容。可以使用 Markdown 格式书写内容，并在文件头部配置文章的元数据（如标题、日期、标签等）。</p></li><li><p><strong>保存文件</strong>：编辑完成后保存文件。</p></li><li><p><strong>生成静态页面、预览并部署</strong>：在完成文章的编写后，你需要运行以下命令生成 Hexo 博客的静态页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br>hexo server<br>hexo deploy<br></code></pre></td></tr></table></figure></li></ul></li></ol><h1 id="安装过程中遇到的问题"><a href="#安装过程中遇到的问题" class="headerlink" title="安装过程中遇到的问题"></a>安装过程中遇到的问题</h1><p><strong>Q1：在进行 <code>hexo g</code>时，报错<code>pandoc exited with code null</code></strong></p><p><strong>S1：<a href="https://blog.csdn.net/weixin_45073562/article/details/120289648">「博客搭建」Hexo Next主题配置Mathjax遇到的问题：pandoc exited with code null-CSDN博客</a></strong></p><ol><li><p><strong>使用Mathjax作为渲染器</strong><br>使用 Mathjax 进行数学公式渲染，需要使用 hexo-renderer-pandoc 或者 hexo-renderer-kramed （官方不推荐）作为 Hexo 的 Markdown 渲染器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm un hexo-renderer-marked  <span class="hljs-comment"># 先将原有的渲染器卸载(可选)</span><br>npm i hexo-renderer-pandoc<span class="hljs-comment"># 安装pandoc</span><br></code></pre></td></tr></table></figure></li><li><p><strong>修改配置文件</strong><br>在主题配置文件_config.yml 中找到math关键词，将mathjax的false改为true。注意，mathjax和katex只能有一个置为true。</p><blockquote><p>注意：还有一个per_page选项，默认为false，表示只对文章开头（front-matter）含有mathjax: true语句的文章进行渲染。为true表示会所有文章进行渲染，不管有没有加上mathjax: true语句。建议置为true，否则一篇一篇文章加上这条语句太麻烦了 <strong>(未找到)</strong></p></blockquote></li><li><p><strong>本地安装pandoc</strong><br>使用pandoc还需要在本地安装，在官网上下载pandoc，直接安装即可。<u>安装完后，记得电脑重启一下，我之前就是没安装pandoc以及没重启导致出错，然后hexo -g一直提示pandoc exited with code null的，重启之后，就能正确生成html文件了。</u></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我们的第一个春夏秋冬</title>
    <link href="/2023/08/17/%E6%88%91%E4%BB%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/"/>
    <url>/2023/08/17/%E6%88%91%E4%BB%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/</url>
    
    <content type="html"><![CDATA[<p><strong>两个人相遇的机率为0.00000003，而两个人相爱的机率仅为0.000000000009</strong></p><p><strong>世界从无巧合，有的只是缘分，就如同我们生命中遇见彼此</strong></p><p><strong>最后，祝我们恋爱一周年快乐</strong></p><p><strong>爱在漫漫余生里 让我们牵着彼此的手，走过这漫长岁月</strong></p><p><strong>谨以此献给我们在一起的第一个春夏秋冬</strong></p><span id="more"></span><iframe src="/js/pdfjs/web/viewer.html?file=/js/pdfjs/pdf/我们的第一个春夏秋冬.pdf" style="width:100%;height:900px"></iframe>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 安装 pytorch-gpu</title>
    <link href="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/"/>
    <url>/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装驱动"><a href="#1-安装驱动" class="headerlink" title="1. 安装驱动"></a>1. 安装驱动</h2><p>终端输入以下命令查看推荐驱动版本</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ubuntu-drivers devices<br></code></pre></td></tr></table></figure><p>输出如下：</p><p><img src="https://img-blog.csdnimg.cn/9688ea450cf84399963656173bcd720d.png" alt="在这里插入图片描述"><br>这里显示推荐版本为 515 版本<br>再在终端输入 <code>sudo ubuntu-drivers autoinstall</code> 即可自动安装，或者输入 <code>sudo apt install nvidia-driver-515</code> 安装，然后 <code>sudo reboot</code> 重启系统即可<br>运行 <code>nvidia-smi</code> 命令，查看驱动是否安装成功</p><p><img src="https://img-blog.csdnimg.cn/d20e252d431347cc874e0c06313a79dd.png" alt="在这里插入图片描述"><br>返回的信息显示，安装的显卡驱动版本为 515， 最高可支持 11.7 的 cuda；到这里就说明我们的驱动已经安装成功了！！！</p><h2 id="2-安装-cuda"><a href="#2-安装-cuda" class="headerlink" title="2. 安装 cuda"></a>2. 安装 cuda</h2><p>具体安装何版本的 cuda 取决于 pytorch 的版本。进入<a href="https://pytorch.org/get-started/locally/">pytorch官方安装页面</a>，选择对应的版本<br><img src="https://img-blog.csdnimg.cn/06441e839f344ee4bc5d3d28873449a6.png" alt="在这里插入图片描述"></p><p>这里显示 pytorch 1.12 版本对应的 cuda 是 11.6。现在我们就可以去 <a href="https://developer.nvidia.com/cuda-toolkit-archive">cuda<br>下载页面</a>下载对应程序包</p><p><img src="https://img-blog.csdnimg.cn/b4915e69df7c4da3a9517f7bd767abcf.png" alt="在这里插入图片描述"></p><p>点击进入，选择自己系统对应的版本，在终端中运行其提供的命令即可<br><img src="https://img-blog.csdnimg.cn/8f81a325e00f482f9cd3de75b9d02337.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7edc450ef0eb44c8bc9782b883ae412f.png" alt="在这里插入图片描述"></p><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h2><p>进入根目录，修改 bashrc 文件并添加环境变量。这一步的目的是为了让程序能够找到 cuda 的位置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> ~<br><span class="hljs-variable">$</span> vi .bashrc<br></code></pre></td></tr></table></figure><p>向 .bashrc 文件末尾添加如下内容</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">export <span class="hljs-variable constant_">LD_LIBRARY_PATH</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/cuda/lib</span>64<span class="hljs-symbol">:/usr/local/cuda/extras/CPUTI/lib64</span><br>export <span class="hljs-variable constant_">CUDA_HOME</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/cuda/bin</span><br>export <span class="hljs-variable constant_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:</span><span class="hljs-variable">$LD_LIBRARY_PATH</span><span class="hljs-symbol">:</span><span class="hljs-variable">$CUDA</span>_HOME<br></code></pre></td></tr></table></figure><p>终端运行 <code>nvcc -V</code> 命令查看是否成功</p><p><img src="https://img-blog.csdnimg.cn/d5d760636aaf4094b68f414fcd16dec9.png" alt="在这里插入图片描述"></p><h2 id="4-安装-pytorch"><a href="#4-安装-pytorch" class="headerlink" title="4. 安装 pytorch"></a>4. 安装 pytorch</h2><p>直接终端运行官方提供的下载命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> install pytorch torchvision torchaudio cudatoolkit=<span class="hljs-number">11</span>.<span class="hljs-number">6</span> -c pytorch -c conda-forge<br></code></pre></td></tr></table></figure><p>下载安装失败<br>尝试<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a><br>先生成 <code>conda config --set show_channel_urls yes</code> 生成 <code>.condarc</code> 文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/main<br>  - https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/r<br>  - https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/msys2<br>custom_channels:<br>  conda-forge: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  msys2: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  bioconda: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  menpo: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  pytorch: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  pytorch-lts: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  simpleitk: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br></code></pre></td></tr></table></figure><p>再次失败</p><p><img src="https://img-blog.csdnimg.cn/dcf61ab8a9b74acf8223429506590eb4.png" alt="在这里插入图片描述"></p><p>开始面向 csdn ，寻找解决办法，参考了该篇博客：<a href="https://blog.csdn.net/wdnmdppx/article/details/125692448">总结：使用anaconda清华镜像源安装pytorch1.12.0stable版失败的问题综合，以及对应的解决方案</a>，尝试未果，放弃！！！<br>改为安装 cuda11.3 的 pytorch</p><p><img src="https://img-blog.csdnimg.cn/7715b5adb4894ddca67099fb38785f73.png" alt="在这里插入图片描述"></p><p>终端运行安装命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> install pytorch torchvision torchaudio cudatoolkit=<span class="hljs-number">11</span>.<span class="hljs-number">3</span> -c pytorch<br></code></pre></td></tr></table></figure><p>安装未报错</p><p><img src="https://img-blog.csdnimg.cn/28bcab7a65ca4b98a9559de588abfbe4.png" alt="在这里插入图片描述"></p><p>顺利安装完成</p><p><img src="https://img-blog.csdnimg.cn/af645c7238084c46bf62d30d8e2306a6.png" alt="在这里插入图片描述"></p><p>测试一下</p><p><img src="https://img-blog.csdnimg.cn/03a9695679394a52b79181cbf82ec6c5.png" alt="在这里插入图片描述"><br>gpu 可以正常使用，nice ！！！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytorch</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 远程连接服务器</title>
    <link href="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>宇宙第一IDE，当属 VSCode。作为一名高级炼丹师，怎么能不会远程连接服务器进行开发呢。接下来就讲述如何使用 VSCode 远程连接服务器进行炼丹操作。</p><span id="more"></span><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="step-1：安装-Anaconda"><a href="#step-1：安装-Anaconda" class="headerlink" title="step 1：安装 Anaconda"></a>step 1：安装 Anaconda</h3><p>前往<a href="https://www.anaconda.com/products/individual">Anaconda</a>官网，下载对应版本Anaconda安装包。</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/anaconda%E5%AE%89%E8%A3%85.jpg" alt="anaconda安装"></p><p>安装包下载完成后，进行安装，记得自己Anaconda的安装路径。</p><h3 id="step2：安装-VSCode"><a href="#step2：安装-VSCode" class="headerlink" title="step2：安装 VSCode"></a>step2：安装 VSCode</h3><p>前往<a href="https://code.visualstudio.com/">Visual studio code</a>页面进行下载安装。</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/vscode%E5%AE%89%E8%A3%85.png" alt="vscode安装"></p><h3 id="step3：在VSCode中安装插件"><a href="#step3：在VSCode中安装插件" class="headerlink" title="step3：在VSCode中安装插件"></a>step3：在VSCode中安装插件</h3><p>【在 VSCode 插件商店中搜索 Python、Jupyter、Remote-SSH，选择插件并点击 install 安装程序】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/Python%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.jpg" alt="Python插件安装"></p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/jupyter%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.jpg" alt="jupyter插件安装"></p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/ssh%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.jpg" alt="ssh插件安装"></p><h2 id="二、远程连接服务器"><a href="#二、远程连接服务器" class="headerlink" title="二、远程连接服务器"></a>二、远程连接服务器</h2><h3 id="step1：Remote-SSH-连接配置"><a href="#step1：Remote-SSH-连接配置" class="headerlink" title="step1：Remote-SSH 连接配置"></a>step1：Remote-SSH 连接配置</h3><p>【打开SSH TARGETS连接服务器】输入ssh 用户名@+服务器IP</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.jpg" alt="远程连接"></p><p>【选 C:\用户名\.ssh\config 进行配置】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE.jpg" alt="连接配置"></p><p>【修改 config 配置文件】Host后面为你的服务器备注（随意命名），HostName 为连接的服务器 ip 地址，User 为服务器用户名</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/config.jpg" alt="config"></p><h3 id="step2：SSH-插件设置"><a href="#step2：SSH-插件设置" class="headerlink" title="step2：SSH  插件设置"></a>step2：SSH  插件设置</h3><p>【勾选 Remote-SSH 设置中的 show login terminal】以便我们可以在 Terminal 中观察到我们的Connect Information</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%AE%BE%E7%BD%AE.jpg" alt="设置"></p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/ssh%E8%AE%BE%E7%BD%AE.jpg" alt="ssh设置"></p><h3 id="step3：连接服务器"><a href="#step3：连接服务器" class="headerlink" title="step3：连接服务器"></a>step3：连接服务器</h3><p>【连接刚刚建好的 SSH Target】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9E%E6%8E%A5.jpg" alt="连接"></p><p>【选择服务器对应的系统平台】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9E%E6%8E%A5%E5%B9%B3%E5%8F%B0.jpg" alt="连接平台"></p><p>【输入 服务器密码 进行登陆】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81.jpg" alt="输入密码"></p><p>左下角 蓝色 为连接成功，通过 Terminal 进行 conda 操作</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BB%88%E7%AB%AF.jpg" alt="终端"></p><h2 id="三、配制-jupyter-环境"><a href="#三、配制-jupyter-环境" class="headerlink" title="三、配制 jupyter 环境"></a>三、配制 jupyter 环境</h2><h3 id="step1：在-VSCode-中选择-Python-环境"><a href="#step1：在-VSCode-中选择-Python-环境" class="headerlink" title="step1：在 VSCode 中选择 Python 环境"></a>step1：在 VSCode 中选择 Python 环境</h3><p>【选择自己配置好的 conda 环境】这里选择事先安装好的虚拟环境</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%80%89%E6%8B%A9%E7%BC%96%E8%AF%91%E5%99%A8.jpg" alt="选择编译器"></p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%80%89%E6%8B%A9conda.jpg" alt="选择conda"></p><h3 id="step2：文件操作"><a href="#step2：文件操作" class="headerlink" title="step2：文件操作"></a>step2：文件操作</h3><p>【文件 - 打开文件夹】即可对服务器下文件进行操作</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%96%87%E4%BB%B6%E5%A4%B9%E9%80%89%E5%8F%96.jpg" alt="文件夹选取"></p><h3 id="step3：代码运行测试，成功！"><a href="#step3：代码运行测试，成功！" class="headerlink" title="step3：代码运行测试，成功！"></a>step3：代码运行测试，成功！</h3><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%88%90%E5%8A%9F.jpg" alt="成功"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 scikit-learn 解决兵王问题</title>
    <link href="/2022/04/06/%E7%94%A8scikit-learn%E8%A7%A3%E5%86%B3%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/06/%E7%94%A8scikit-learn%E8%A7%A3%E5%86%B3%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近在看机器学习的经典教材《Hands On Machine Learning with Scikit-Learn、Keras and Tensorflow》，其中大量篇幅涉及到 scikit-learn 库。就上手学了学，为了避免自己成为行动上的矮子，想着把它用起来。恰好前几天刚刚用 LibSVM 复现了兵王问题，不如这次就再用 scikit-learn 再复现一次。好吧，其实就是我懒。唉，尽学卡普空炒冷饭了！</p><span id="more"></span><p>首先可以确定兵王问题是一个分类问题。显然，我们要采用监督式学习，那就依旧采用 SVM 算法吧。既然是炒冷饭，那就炒到底！！！确定了基本框架之后，就可以开始写代码了。思路与上一次基本相同，除使用库不同外，另外一个区别就是在测试集的生成方面采用了分层抽样的思想。</p><h1 id="一、加载数据"><a href="#一、加载数据" class="headerlink" title="一、加载数据"></a>一、加载数据</h1><p>老样子，先加载数据看看里子是啥样，知己知彼才能事半功倍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data = pd.read_csv(<span class="hljs-string">&#x27;krkopt.data&#x27;</span>, names=[<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;y1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;y2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;y3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>])<br>data.head() <span class="hljs-comment"># 查看数据集的前五条</span><br></code></pre></td></tr></table></figure><p><strong>Out [1]:</strong> </p><table border="1" class="dataframe">  <thead>    <tr style="text-align: center;">      <th></th>      <th>x1</th>      <th>y1</th>      <th>x2</th>      <th>y2</th>      <th>x3</th>      <th>y3</th>      <th>result</th>    </tr>  </thead>  <tbody>    <tr style="text-align: center;">      <th>0</th>      <td>a</td>      <td>1</td>      <td>b</td>      <td>3</td>      <td>c</td>      <td>2</td>      <td>draw</td>    </tr>    <tr style="text-align: center;">      <th>1</th>      <td>a</td>      <td>1</td>      <td>c</td>      <td>1</td>      <td>c</td>      <td>2</td>      <td>draw</td>    </tr>    <tr style="text-align: center;">      <th>2</th>      <td>a</td>      <td>1</td>      <td>c</td>      <td>1</td>      <td>d</td>      <td>1</td>      <td>draw</td>    </tr>    <tr style="text-align: center;">      <th>3</th>      <td>a</td>      <td>1</td>      <td>c</td>      <td>1</td>      <td>d</td>      <td>2</td>      <td>draw</td>    </tr>    <tr style="text-align: center;">      <th>4</th>      <td>a</td>      <td>1</td>      <td>c</td>      <td>2</td>      <td>c</td>      <td>1</td>      <td>draw</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.info() <span class="hljs-comment"># 查看数据集的基本概况</span><br></code></pre></td></tr></table></figure><p><strong>Out [2]:</strong> </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;pandas.core.frame.DataFrame&#x27;</span>&gt;<br>Range<span class="hljs-keyword">Index</span>: <span class="hljs-number">28056</span> entries, <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> <span class="hljs-number">28055</span><br>Data <span class="hljs-keyword">columns</span> (total <span class="hljs-number">7</span> <span class="hljs-keyword">columns</span>):<br> #   <span class="hljs-keyword">Column</span>  Non-<span class="hljs-keyword">Null</span> Count  Dtype <br><span class="hljs-comment">---  ------  --------------  ----- </span><br> <span class="hljs-number">0</span>   x1      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  <span class="hljs-keyword">object</span><br> <span class="hljs-number">1</span>   y1      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  int64 <br> <span class="hljs-number">2</span>   x2      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  <span class="hljs-keyword">object</span><br> <span class="hljs-number">3</span>   y2      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  int64 <br> <span class="hljs-number">4</span>   x3      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  <span class="hljs-keyword">object</span><br> <span class="hljs-number">5</span>   y3      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  int64 <br> <span class="hljs-number">6</span>   result  <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  <span class="hljs-keyword">object</span><br>dtypes: int64(<span class="hljs-number">3</span>), <span class="hljs-keyword">object</span>(<span class="hljs-number">4</span>)<br>memory <span class="hljs-keyword">usage</span>: <span class="hljs-number">1.5</span>+ MB<br></code></pre></td></tr></table></figure><p>这里我们可以看到这个数据集中共有28056个实例，其中’x1’，’x2’，’x3’，’result’属性是文本格式，其他属性都是数值类型。后面肯定要对这部分文本类型的属性进行处理，下面我们再来看看这些属性中的具体内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">col_text_index = [<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>] <span class="hljs-comment"># 将文本类型的属性提取出来</span><br><span class="hljs-keyword">for</span> col_ <span class="hljs-keyword">in</span> col_text_index:<br>    <span class="hljs-built_in">print</span>(data[col_].value_counts(),<span class="hljs-string">&#x27;\n---------------&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>Out [3]:</strong> </p><pre><code class="hljs">d    12136c     8726b     5316a     1878Name: x1, dtype: int64 ---------------h    3616g    3599f    3582e    3576a    3468b    3438c    3409d    3368Name: x2, dtype: int64 ---------------h    4848g    4600f    4352e    3450a    2920d    2796b    2700c    2390Name: x3, dtype: int64 ---------------fourteen    4553thirteen    4194twelve      3597eleven      2854draw        2796fifteen     2166ten         1985nine        1712eight       1433seven        683six          592five         471sixteen      390two          246four         198three         81one           78zero          27Name: result, dtype: int64 ---------------</code></pre><p>实际上该数据集各个属性的值都是离散的，每个值都代表该属性中的一种情况，数值的大小在这里其实是没有太大意义的</p><h1 id="二、数据清洗"><a href="#二、数据清洗" class="headerlink" title="二、数据清洗"></a>二、数据清洗</h1><p>依旧按照惯例，对数据集中的文本属性进行数据清洗处理，这里使用 $sklearn.preprocessing.OrdinalEncoder $ 将分类属性中的文本处理为整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OrdinalEncoder<br>enc = OrdinalEncoder()<br>X = data.drop(<span class="hljs-string">&#x27;result&#x27;</span>, axis=<span class="hljs-number">1</span>)<br>X_tr = enc.fit_transform(X)<br>data_tr = pd.DataFrame(X_tr, columns=X.columns, index=X.index) + <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>]:<br>    <span class="hljs-built_in">print</span>(data_tr[attr].value_counts(),<span class="hljs-string">&#x27;\n---------------&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>Out [4]:</strong> </p><pre><code class="hljs">4.0    121363.0     87262.0     53161.0     1878Name: x1, dtype: int64 ---------------8.0    36167.0    35996.0    35825.0    35761.0    34682.0    34383.0    34094.0    3368Name: x2, dtype: int64 ---------------8.0    48487.0    46006.0    43525.0    34501.0    29204.0    27962.0    27003.0    2390Name: x3, dtype: int64 ---------------</code></pre><p>这里，顺便将标签也处理一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">label = data[<span class="hljs-string">&#x27;result&#x27;</span>].copy()<br>label[label!=<span class="hljs-string">&#x27;draw&#x27;</span>] = -<span class="hljs-number">1</span><br>label.replace(<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br>label.columns = <span class="hljs-string">&#x27;result&#x27;</span><br></code></pre></td></tr></table></figure><p>这样数据清洗就完毕了，来看看数据的最终效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data_tr.head()<br></code></pre></td></tr></table></figure><p><strong>Out [5]:</strong> </p><table border="1" class="dataframe">  <thead>    <tr style="text-align: center;">      <th></th>      <th>x1</th>      <th>y1</th>      <th>x2</th>      <th>y2</th>      <th>x3</th>      <th>y3</th>    </tr>  </thead>  <tbody>    <tr style="text-align: center;">      <th>0</th>      <td>1.0</td>      <td>1.0</td>      <td>2.0</td>      <td>3.0</td>      <td>3.0</td>      <td>2.0</td>    </tr>    <tr style="text-align: center;">      <th>1</th>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>      <td>1.0</td>      <td>3.0</td>      <td>2.0</td>    </tr>    <tr style="text-align: center;">      <th>2</th>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>      <td>1.0</td>      <td>4.0</td>      <td>1.0</td>    </tr>    <tr style="text-align: center;">      <th>3</th>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>      <td>1.0</td>      <td>4.0</td>      <td>2.0</td>    </tr>    <tr style="text-align: center;">      <th>4</th>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>      <td>2.0</td>      <td>3.0</td>      <td>1.0</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">label.head()<br></code></pre></td></tr></table></figure><p><strong>Out [6]:</strong> </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">2</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">3</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">4</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">Name</span>: result, dtype: int64<br></code></pre></td></tr></table></figure><h1 id="三、创建测试集"><a href="#三、创建测试集" class="headerlink" title="三、创建测试集"></a>三、创建测试集</h1><p>在进一步处理数据之前，我们需要先生成测试集。接下来，我们将只会用到训练集，测试集只有在最后的模型测试时才会用到。通常来说，测试集取全部数据集的20%即可。这里调用 $sklearn.model_selection.StratifiedShuffleSplit$ 以分层抽样的形式进行数据集划分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedShuffleSplit<br>y_tr = label.to_numpy()<br>ss = StratifiedShuffleSplit(n_splits=<span class="hljs-number">1</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><span class="hljs-keyword">for</span> train_index, test_index <span class="hljs-keyword">in</span> ss.split(X_tr, y_tr):<br>    X_trainpre, X_testpre = X_tr[train_index], X_tr[test_index]<br>    y_train, y_test = y_tr[train_index], y_tr[test_index]<br>pd.DataFrame(y_train).value_counts()<br></code></pre></td></tr></table></figure><p><strong>Out [7]:</strong> </p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>1    20207<br> 1     2237<br><span class="hljs-attribute">dtype</span>: int64<br></code></pre></td></tr></table></figure><h1 id="四、特征缩放"><a href="#四、特征缩放" class="headerlink" title="四、特征缩放"></a>四、特征缩放</h1><p>   特征缩放是数据预处理中重要的环节之一，如果输入的数值属性有非常大的比例差异，往往会导致机器学习算法的性能表现不佳。同比例缩放所有属性的两种常用方法是最小-最大缩放和标准化。其中，标准化方法受到异常值的影响更小，这里尝试使用标准化方法。scikit-learn库中对应的类是 $sklearn.preprocessing.StandardScaler$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br>scaler = StandardScaler()<br>X_train = scaler.fit_transform(X_trainpre)<br>X_test = scaler.transform(X_testpre)<br>pd.DataFrame(X_test, columns=data_tr.columns).head()<br></code></pre></td></tr></table></figure><p><strong>Out [8]:</strong> </p><table border="1" class="dataframe">  <thead>    <tr style="text-align: center;">      <th></th>      <th>x1</th>      <th>y1</th>      <th>x2</th>      <th>y2</th>      <th>x3</th>      <th>y3</th>    </tr>  </thead>  <tbody>    <tr style="text-align: center;">      <th>0</th>      <td>0.947896</td>      <td>1.235042</td>      <td>-0.239276</td>      <td>-0.226981</td>      <td>0.415659</td>      <td>-1.532498</td>    </tr>    <tr style="text-align: center;">      <th>1</th>      <td>-0.119730</td>      <td>-0.923108</td>      <td>0.195286</td>      <td>1.088712</td>      <td>-1.748052</td>      <td>-0.202882</td>    </tr>    <tr style="text-align: center;">      <th>2</th>      <td>-0.119730</td>      <td>0.155967</td>      <td>-0.239276</td>      <td>1.088712</td>      <td>-1.748052</td>      <td>-0.646088</td>    </tr>    <tr style="text-align: center;">      <th>3</th>      <td>-2.254982</td>      <td>-0.923108</td>      <td>-1.108400</td>      <td>1.088712</td>      <td>-0.017083</td>      <td>-1.089293</td>    </tr>    <tr style="text-align: center;">      <th>4</th>      <td>-1.187356</td>      <td>-0.923108</td>      <td>0.195286</td>      <td>0.211583</td>      <td>-1.315310</td>      <td>1.126734</td>    </tr>  </tbody></table><h1 id="五、模型选择"><a href="#五、模型选择" class="headerlink" title="五、模型选择"></a>五、模型选择</h1><p>   我们选择 RBF 内核的支持向量机，有两个超参数 $C$，$\gamma$ 进行确定。LibSVM 的帮助文档中建议 $C\in [2^{-5}, 2^{15}]$，$\gamma\in[2^{-15},2^{3}]$。这里我们遵循文档规定，在此范围内进行粗略搜索；同时这里采用五折交叉验证方法对超参数的优劣进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearnex <span class="hljs-keyword">import</span> patch_sklearn<br>patch_sklearn()<br><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br>C_range = np.logspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, base=<span class="hljs-number">2</span>)<br>gamma_range = np.logspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, base=<span class="hljs-number">2</span>)<br>param_grid = <span class="hljs-built_in">dict</span>(gamma=gamma_range, C=C_range)<br>cv = StratifiedShuffleSplit(n_splits=<span class="hljs-number">5</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br>grid = GridSearchCV(SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>), param_grid=param_grid, cv=cv, verbose=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>grid.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">&quot;The best parameters are %s with a score of %0.4f&quot;</span><br>    % (grid.best_params_, grid.best_score_)<br>)<br></code></pre></td></tr></table></figure><p><strong>Out [9]:</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Fitting 5 folds <span class="hljs-keyword">for</span> each of 110 candidates, totalling 550 fits<br>[CV 1/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.4s<br>[CV 2/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 3/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 4/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 5/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=0.0001220703125;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=0.0001220703125;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 3/5] END <span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=0.0001220703125;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=0.0001220703125;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.03125;, <span class="hljs-attribute">score</span>=0.996 total time=   6.9s<br>[CV 5/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.03125;, <span class="hljs-attribute">score</span>=0.997 total time=   7.6s<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.994 total time=   1.4s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.996 total time=   1.2s<br>[CV 3/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.995 total time=   1.2s<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.996 total time=   1.3s<br>[CV 5/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.997 total time=   1.3s<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.5;, <span class="hljs-attribute">score</span>=0.999 total time=   0.3s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.5;, <span class="hljs-attribute">score</span>=0.997 total time=   0.3s<br>The best parameters are &#123;<span class="hljs-string">&#x27;C&#x27;</span>: 512.0, <span class="hljs-string">&#x27;gamma&#x27;</span>: 0.5&#125; with a score of 0.9976<br></code></pre></td></tr></table></figure><p>参数搜索完毕，最好的模型精度可以达到 <strong>99.76%</strong> ，似乎还不错！这就完了？当然没有，也许会存在更优的解，也不一定。花点时间做更进一步搜索也值得，我们可以在前面粗略搜索的最优参数附近作进一步的精细搜索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取粗略搜索得到的最优参数</span><br>C_current_best = grid.best_params_[<span class="hljs-string">&#x27;C&#x27;</span>]<br>gamma_current_best = grid.best_params_[<span class="hljs-string">&#x27;gamma&#x27;</span>]<br>index_C = np.where(C_range == C_current_best)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>index_Gamma = np.where(gamma_range == gamma_current_best)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 计算精细搜索的参数范围</span><br>n = <span class="hljs-number">10</span><br>CScale = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>)<br>minCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_C-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(CScale), index_C+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>CRange_finer = np.logspace(minCScale, maxCScale, n+<span class="hljs-number">1</span>, base=<span class="hljs-number">2</span>)<br><br>GammaScale = np.linspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>minGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_Gamma-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(GammaScale), index_Gamma+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>GammaRange_finer = np.logspace(minGammaScale, maxGammaScale, n+<span class="hljs-number">1</span>, base=<span class="hljs-number">2</span>)<br><br>param_grid = <span class="hljs-built_in">dict</span>(gamma=GammaRange_finer, C=CRange_finer)<br>cv = StratifiedShuffleSplit(n_splits=<span class="hljs-number">5</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br>grid = GridSearchCV(SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>), param_grid=param_grid, cv=cv, verbose=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>grid.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">&quot;The best parameters are %s with a score of %0.4f&quot;</span><br>    % (grid.best_params_, grid.best_score_)<br>)<br></code></pre></td></tr></table></figure><p><strong>Out [10]:</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Fitting 5 folds <span class="hljs-keyword">for</span> each of 121 candidates, totalling 605 fits<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.998 total time=   0.4s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.997 total time=   0.4s<br>[CV 3/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.997 total time=   0.4s<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.996 total time=   0.3s<br>[CV 5/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.996 total time=   0.4s<br><span class="hljs-built_in">..</span>.<br>[CV 1/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.998 total time=   0.3s<br>[CV 2/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.998 total time=   0.4s<br>[CV 3/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.997 total time=   0.3s<br>[CV 4/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.997 total time=   0.4s<br>[CV 5/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.999 total time=   0.4s<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.998 total time=   0.3s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.997 total time=   0.3s<br>[CV 3/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.997 total time=   0.3s<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.997 total time=   0.4s<br>[CV 5/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.999 total time=   0.3s<br>The best parameters are &#123;<span class="hljs-string">&#x27;C&#x27;</span>: 256.0, <span class="hljs-string">&#x27;gamma&#x27;</span>: 0.7578582832551991&#125; with a score of 0.9977<br></code></pre></td></tr></table></figure><p>到这里，我们的参数搜索已经完成。剩下的就是创建 SVM 模型了，这步就很简单了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><br>model =SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>, gamma=grid.best_params_[<span class="hljs-string">&#x27;gamma&#x27;</span>], C=grid.best_params_[<span class="hljs-string">&#x27;C&#x27;</span>])<br>model.fit(X_train, y_train)<br>pre = model.predict(X_test)<br>accuracy_score(y_test, pre)<br></code></pre></td></tr></table></figure><p><strong>Out [11]:</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">测试集准确率：0.998039914468995<br></code></pre></td></tr></table></figure><h1 id="六、代码展示"><a href="#六、代码展示" class="headerlink" title="六、代码展示"></a>六、代码展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">project: 用 scikit-learn 解决兵王问题</span><br><span class="hljs-string">author：Northfourta</span><br><span class="hljs-string">date：2022/04/06</span><br><span class="hljs-string">dependent libraries：</span><br><span class="hljs-string">- numpy</span><br><span class="hljs-string">- pandas</span><br><span class="hljs-string">- scikit-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OrdinalEncoder<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedShuffleSplit<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">from</span> sklearnex <span class="hljs-keyword">import</span> patch_sklearn<br>patch_sklearn() <span class="hljs-comment"># scikit-learn 加速包</span><br><br><span class="hljs-comment"># 加载数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;krkopt.data&#x27;</span>, names=[<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;y1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;y2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;y3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>])<br><span class="hljs-comment"># 数据清洗</span><br>enc = OrdinalEncoder()<br>X = data.drop(<span class="hljs-string">&#x27;result&#x27;</span>, axis=<span class="hljs-number">1</span>)<br>X_tr = enc.fit_transform(X)<br><br>label = data[<span class="hljs-string">&#x27;result&#x27;</span>].copy()<br>label[label!=<span class="hljs-string">&#x27;draw&#x27;</span>] = -<span class="hljs-number">1</span><br>label.replace(<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 创建测试集</span><br>y_tr = label.to_numpy()<br>ss = StratifiedShuffleSplit(n_splits=<span class="hljs-number">1</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><span class="hljs-keyword">for</span> train_index, test_index <span class="hljs-keyword">in</span> ss.split(X_tr, y_tr):<br>    X_trainpre, X_testpre = X_tr[train_index], X_tr[test_index]<br>    y_train, y_test = y_tr[train_index], y_tr[test_index]<br>    <br><span class="hljs-comment"># 特征缩放</span><br>scaler = StandardScaler()<br>X_train = scaler.fit_transform(X_trainpre)<br>X_test = scaler.transform(X_testpre)<br><br><span class="hljs-comment"># 模型选择</span><br>C_range = np.logspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, base=<span class="hljs-number">2</span>)<br>gamma_range = np.logspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, base=<span class="hljs-number">2</span>)<br>param_grid = <span class="hljs-built_in">dict</span>(gamma=gamma_range, C=C_range)<br>cv = StratifiedShuffleSplit(n_splits=<span class="hljs-number">5</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br>grid = GridSearchCV(SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>), param_grid=param_grid, cv=cv, verbose=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>grid.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">&quot;The best parameters are %s with a score of %0.4f&quot;</span><br>    % (grid.best_params_, grid.best_score_)<br>)<br><br><span class="hljs-comment"># 获取粗略搜索得到的最优参数</span><br>C_current_best = grid.best_params_[<span class="hljs-string">&#x27;C&#x27;</span>]<br>gamma_current_best = grid.best_params_[<span class="hljs-string">&#x27;gamma&#x27;</span>]<br>index_C = np.where(C_range == C_current_best)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>index_Gamma = np.where(gamma_range == gamma_current_best)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 计算精细搜索的参数范围</span><br>n = <span class="hljs-number">10</span><br>CScale = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>)<br>minCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_C-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(CScale), index_C+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>CRange_finer = np.logspace(minCScale, maxCScale, n+<span class="hljs-number">1</span>, base=<span class="hljs-number">2</span>)<br><br>GammaScale = np.linspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>minGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_Gamma-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(GammaScale), index_Gamma+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>GammaRange_finer = np.logspace(minGammaScale, maxGammaScale, n+<span class="hljs-number">1</span>, base=<span class="hljs-number">2</span>)<br><br>param_grid = <span class="hljs-built_in">dict</span>(gamma=GammaRange_finer, C=CRange_finer)<br>cv = StratifiedShuffleSplit(n_splits=<span class="hljs-number">5</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br>grid = GridSearchCV(SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>), param_grid=param_grid, cv=cv, verbose=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>grid.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">&quot;The best parameters are %s with a score of %0.4f&quot;</span><br>    % (grid.best_params_, grid.best_score_)<br>)<br><br><span class="hljs-comment"># 模型创建</span><br>model =SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>, gamma=grid.best_params_[<span class="hljs-string">&#x27;gamma&#x27;</span>], C=grid.best_params_[<span class="hljs-string">&#x27;C&#x27;</span>])<br>model.fit(X_train, y_train)<br>pre = model.predict(X_test)<br>accuracy_score(y_test, pre)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SVM</tag>
      
      <tag>机器学习</tag>
      
      <tag>Python</tag>
      
      <tag>scikit-learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于LibSVM的兵王问题实现</title>
    <link href="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>纸上得来终觉浅，绝知此事要躬行。为了将 LibSVM 库的学习赋予实践，博主在这里基于 Python 的 LibSVM 对浙江大学《机器学习》课程中的兵王问题进行了复现，并以此博客来记录自己的学习过程。 </p><span id="more"></span><h1 id="一、问题背景"><a href="#一、问题背景" class="headerlink" title="一、问题背景"></a>一、问题背景</h1><p>国际象棋的兵王问题：棋盘上黑方只剩一个王，白方剩一个王 一个兵，棋局只有两个结果：“白方将死黑方获胜”或者“和棋”，这个问题属于二分类的问题。这里要利用支持向量机解决这个问题，实现在不告诉计算机国际象棋规则的前提下，让计算机可以根据棋子位置判断棋局的结果。</p><h1 id="二、数据集"><a href="#二、数据集" class="headerlink" title="二、数据集"></a>二、数据集</h1><p>本次用到的数据集为 <strong>UCI Machine Learning Repository:</strong> <a href="http://archive.ics.uci.edu/ml/datasets/Chess+(King-Rook+vs.+King)">Chess (King-Rook vs. King) Data Set</a></p><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A6%82%E5%86%B5.jpg"></p><p>数据集一共包含28056个数据，其中“和棋”样本2796个，“白方胜”样本25260个。数据集的解释如下</p><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98.jpg"></p><h1 id="三、LibSVM工具包"><a href="#三、LibSVM工具包" class="headerlink" title="三、LibSVM工具包"></a>三、LibSVM工具包</h1><p>LibSVM是由台湾大学林智仁教授等开发设计的SVM工具包，支持C， C++， Java，Python ， R 和 Matlab 等</p><h2 id="1-为Python安装LibSVM"><a href="#1-为Python安装LibSVM" class="headerlink" title="1. 为Python安装LibSVM"></a>1. 为Python安装LibSVM</h2><p>利用pip运行如下安装命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install -U libsvm-official<br></code></pre></td></tr></table></figure><h2 id="2-LibSVM的使用"><a href="#2-LibSVM的使用" class="headerlink" title="2. LibSVM的使用"></a>2. LibSVM的使用</h2><p>LibSVM的使用非常简单，只需调用其为我们提供的接口即可，这里我们只需了解其常用的几个接口：</p><ul><li>svm_problem</li><li>svm_parameter</li><li>svm_train</li><li>svm_predict</li><li>svm_save_model</li><li>svm_load_model</li></ul><p>具体用法可以参考博主 finley 写的这篇博客：<a href="https://www.cnblogs.com/Finley/p/5329417.html">LibSVM for Python 使用</a>，个人觉得很详细。</p><h1 id="四、实现流程"><a href="#四、实现流程" class="headerlink" title="四、实现流程"></a>四、实现流程</h1><h2 id="1-预处理数据"><a href="#1-预处理数据" class="headerlink" title="1. 预处理数据"></a>1. 预处理数据</h2><p>首先，尝试加载数据，并观察其内容与分布等基本信息，便于我们后续处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libsvm.svmutil <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 加载数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;krkopt.data&#x27;</span>, header=<span class="hljs-literal">None</span>)<br>data.columns=[<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;y1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;y2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;y3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>] <span class="hljs-comment"># 为其columns标签</span><br>data.describe() <span class="hljs-comment"># 观察数据的基本信息</span><br></code></pre></td></tr></table></figure><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E6%95%B0%E6%8D%AE%E8%A7%82%E5%AF%9F1.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.head() <span class="hljs-comment"># 观察前5个数据</span><br></code></pre></td></tr></table></figure><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E6%95%B0%E6%8D%AE%E8%A7%82%E5%AF%9F2.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 观察数据每列的内容</span><br>In[<span class="hljs-number">1</span>]:<br>columns = <span class="hljs-built_in">list</span>(data.columns)<br><span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> columns:<br>    <span class="hljs-built_in">print</span>(column, <span class="hljs-string">&#x27;: &#x27;</span>, data[column].unique())<br>-----------------------------------------------------    <br>Out[<span class="hljs-number">1</span>]:<br>x1 :  [<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-string">&#x27;d&#x27;</span>]<br>y1 :  [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br>x2 :  [<span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-string">&#x27;f&#x27;</span> <span class="hljs-string">&#x27;g&#x27;</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span>]<br>y2 :  [<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<br>x3 :  [<span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-string">&#x27;f&#x27;</span> <span class="hljs-string">&#x27;g&#x27;</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;b&#x27;</span>]<br>y3 :  [<span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<br>result :  [<span class="hljs-string">&#x27;draw&#x27;</span> <span class="hljs-string">&#x27;zero&#x27;</span> <span class="hljs-string">&#x27;one&#x27;</span> <span class="hljs-string">&#x27;two&#x27;</span> <span class="hljs-string">&#x27;three&#x27;</span> <span class="hljs-string">&#x27;four&#x27;</span> <span class="hljs-string">&#x27;five&#x27;</span> <span class="hljs-string">&#x27;six&#x27;</span> <span class="hljs-string">&#x27;seven&#x27;</span> <span class="hljs-string">&#x27;eight&#x27;</span><br> <span class="hljs-string">&#x27;nine&#x27;</span> <span class="hljs-string">&#x27;ten&#x27;</span> <span class="hljs-string">&#x27;eleven&#x27;</span> <span class="hljs-string">&#x27;twelve&#x27;</span> <span class="hljs-string">&#x27;thirteen&#x27;</span> <span class="hljs-string">&#x27;fourteen&#x27;</span> <span class="hljs-string">&#x27;fifteen&#x27;</span> <span class="hljs-string">&#x27;sixteen&#x27;</span>]<br></code></pre></td></tr></table></figure><p>可以发现数据中存在的字符类型，这显然是不行的，我们需要对其进行数值化处理。a，b，c等代表的是棋子的横坐标位置，不妨用1代表a，2代表b，以此类推；同样对于结果而言，利用+1替代draw（正样本），其他则用-1代替（负样本），代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将样本进行数值化</span><br>data.replace(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">5</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">6</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">7</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-number">8</span>, inplace=<span class="hljs-literal">True</span>)<br>data.loc[data[<span class="hljs-string">&#x27;result&#x27;</span>]!=<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-string">&#x27;result&#x27;</span>] = -<span class="hljs-number">1</span><br>data.loc[data[<span class="hljs-string">&#x27;result&#x27;</span>]==<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-string">&#x27;result&#x27;</span>] = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E6%95%B0%E5%80%BC%E5%8C%96.jpg"></p><p>为了消除指标之间的量纲影响，而对训练造成影响，需要进行数据<strong>标准化处理</strong>：<br>$$<br>Xtraining &#x3D; \frac{Xtraining - meanX}{stdX}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 标准化</span><br>meanX = np.mean(XTraining, axis=<span class="hljs-number">0</span>)<br>stdX = np.std(XTraining, axis=<span class="hljs-number">0</span>)<br>XTraining = (XTraining - meanX) / stdX<br>XTesting = (XTesting - meanX) / stdX<br></code></pre></td></tr></table></figure><p>到这里，数据的预处理已经完成，下面我们就可以正式开始构建我们自己的 SVM 模型了。</p><h2 id="2-超参数选择"><a href="#2-超参数选择" class="headerlink" title="2. 超参数选择"></a>2. 超参数选择</h2><p>我们选择 RBF 内核的支持向量机，有两个超参数 $C$，$\gamma$ 进行确定。LibSVM 的帮助文档中建议 $C\in [2^{-5}, 2^{15}]$，$\gamma\in[2^{-15},2^{3}]$。这里我们遵循文档规定，在此范围内进行粗略搜索；同时这里采用五折交叉验证方法对超参数的优劣进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">In[<span class="hljs-number">2</span>]:<br><span class="hljs-comment"># 限制超参数的搜索范围</span><br>CScale = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>)<br>GammaScale = np.linspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>C = np.full_like(CScale, <span class="hljs-number">2</span>) ** CScale<br>Gamma = np.full_like(GammaScale, <span class="hljs-number">2</span>) ** GammaScale<br>MAX_ACC = <span class="hljs-number">0</span><br>prob  = svm_problem(YTraining, XTraining)<br><span class="hljs-comment"># 进行粗略的超参数的搜索</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Gamma)): <br>        <span class="hljs-comment"># [&#x27;-t 2 -c &#x27;+ str(C[i]) + &#x27; -g &#x27; + str(Gamma[j]) + &#x27; -v 5&#x27;]含义：</span><br>        <span class="hljs-comment"># -t 2：      SVM采用RBF内核</span><br>        <span class="hljs-comment"># -c + str(C[i])：      C 的数值为 C[i]</span><br>        <span class="hljs-comment"># -g + str(Gamma[j])：  gamma 数值为 Gamma[j]</span><br>        <span class="hljs-comment"># -v 5：      五折交叉验证</span><br>        param = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C[i]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma[j]) + <span class="hljs-string">&#x27; -v 5&#x27;</span>)<br>        ACC = svm_train(prob, param)<br>        <span class="hljs-keyword">if</span> ACC &gt; MAX_ACC:<br>            MAX_ACC = ACC<br>            index_C = i<br>            index_Gamma = j<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最大识别率为：%f\n，C=%f\n,Gamma=%f\n&#x27;</span>%(MAX_ACC, C[index_C], Gamma[index_Gamma]))<br>-----------------------------------------<br>Out[<span class="hljs-number">2</span>]:<br>Cross Validation Accuracy = <span class="hljs-number">89.98</span>%<br>Cross Validation Accuracy = <span class="hljs-number">89.98</span>%<br><br>.......<br>Cross Validation Accuracy = <span class="hljs-number">90.32</span>%<br>Cross Validation Accuracy = <span class="hljs-number">90.24</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.28</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.3</span>%<br>Cross Validation Accuracy = <span class="hljs-number">98.96</span>%<br>最大识别率为：<span class="hljs-number">99.420000</span><br>C=<span class="hljs-number">2048.000000</span><br>Gamma=<span class="hljs-number">0.031250</span><br></code></pre></td></tr></table></figure><p>经过粗略的搜索，发现 $C&#x3D;2048$，$\gamma&#x3D;0.3125$ 时，验证集的准确率较高；这就完了？当然没有。也许会有更好结果，说不准呢。我们可以考虑在目前得到的最优值附近进行进一步搜索，期望可以得到意外收获。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">In[<span class="hljs-number">3</span>]:<br><span class="hljs-comment"># 利用粗略搜索得到的结果限制精细搜索的范围</span><br>n = <span class="hljs-number">10</span><br>minCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_C-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(CScale), index_C+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>CScale_finer = np.linspace(minCScale, maxCScale, n+<span class="hljs-number">1</span>)<br><br>minGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_Gamma-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(GammaScale), index_Gamma+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>GammaScale_finer = np.linspace(minGammaScale, maxGammaScale, n+<span class="hljs-number">1</span>)<br><br>C_finer = np.full_like(CScale_finer, <span class="hljs-number">2</span>) ** CScale_finer<br>Gamma_finer = np.full_like(GammaScale_finer, <span class="hljs-number">2</span>) ** GammaScale_finer<br><span class="hljs-comment"># 进行精细搜索</span><br>MaxACC = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C_finer)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Gamma_finer)): <br>        param = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C_finer[i]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma_finer[j]) + <span class="hljs-string">&#x27; -v 5&#x27;</span>)<br>        ACC = svm_train(prob, param)<br>        <span class="hljs-keyword">if</span> ACC &gt; MaxACC:    <br>            MaxACC = ACC<br>            index_Cfiner = i<br>            index_Gammafiner = j<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最大识别率为：%f\nC=%f\nGamma=%f\n&#x27;</span>%(MaxACC, C_finer[index_Cfiner], Gamma_finer[index_Gammafiner]))<br>---------------------------------------------<br>Out[<span class="hljs-number">3</span>]:<br>Cross Validation Accuracy = <span class="hljs-number">99.34</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.36</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.32</span>%<br>.....<br>Cross Validation Accuracy = <span class="hljs-number">99.24</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.24</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.06</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.24</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.3</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.2</span>%<br>最大识别率为：<span class="hljs-number">99.540000</span><br>C=<span class="hljs-number">1176.267116</span><br>Gamma=<span class="hljs-number">0.041235</span><br></code></pre></td></tr></table></figure><p>到这里，我们的超参数的搜索结束了，确定 $C&#x3D;1176.267$，$\gamma&#x3D;0.041235$；利用此参数再次训练得到最终的 SVM 模型，并将其存为【model_file】文件，再调用该模型进行测试集的分类，结果显示准确率达到 99.41%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">In[<span class="hljs-number">4</span>]:<br>paramTraining = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C_finer[index_Cfiner]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma_finer[index_Gammafiner]))<br>model = svm_train(prob, paramTraining)<br>svm_save_model(<span class="hljs-string">&#x27;model_file&#x27;</span>, model)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test: &#x27;</span>)<br>p_label, p_acc, pval = svm_predict(YTesting, XTesting, model)<br>----------------------------------------<br>Out[<span class="hljs-number">4</span>]:<br>test: <br>Accuracy = <span class="hljs-number">99.4101</span>% (<span class="hljs-number">22920</span>/<span class="hljs-number">23056</span>) (classification)<br></code></pre></td></tr></table></figure><h1 id="五、完整代码展示"><a href="#五、完整代码展示" class="headerlink" title="五、完整代码展示"></a>五、完整代码展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libsvm.svmutil <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 加载数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;krkopt.data&#x27;</span>, header=<span class="hljs-literal">None</span>)<br>data.columns=[<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;y1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;y2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;y3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>] <span class="hljs-comment"># 为其columns标签</span><br><br><span class="hljs-comment"># 将样本进行数值化</span><br>data.replace(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">5</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">6</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">7</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-number">8</span>, inplace=<span class="hljs-literal">True</span>)<br>data.loc[data[<span class="hljs-string">&#x27;result&#x27;</span>]!=<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-string">&#x27;result&#x27;</span>] = -<span class="hljs-number">1</span><br>data.loc[data[<span class="hljs-string">&#x27;result&#x27;</span>]==<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-string">&#x27;result&#x27;</span>] = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 将数据处理</span><br>sample = data.to_numpy()<br>np.random.shuffle(sample)<br>XTraining = sample[:<span class="hljs-number">5000</span>, :-<span class="hljs-number">1</span>].astype(np.float32)<br>YTraining =  sample[:<span class="hljs-number">5000</span>, -<span class="hljs-number">1</span>]<br>XTesting = sample[<span class="hljs-number">5000</span>: , :-<span class="hljs-number">1</span>].astype(np.float32)<br>YTesting =  sample[<span class="hljs-number">5000</span>: , -<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 标准化</span><br>meanX = np.mean(XTraining, axis=<span class="hljs-number">0</span>)<br>stdX = np.std(XTraining, axis=<span class="hljs-number">0</span>)<br>XTraining = (XTraining - meanX) / stdX<br>XTesting = (XTesting - meanX) / stdX<br><br><span class="hljs-comment"># 限制超参数的搜索范围</span><br>CScale = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>)<br>GammaScale = np.linspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>C = np.full_like(CScale, <span class="hljs-number">2</span>) ** CScale<br>Gamma = np.full_like(GammaScale, <span class="hljs-number">2</span>) ** GammaScale<br>MAX_ACC = <span class="hljs-number">0</span><br>prob  = svm_problem(YTraining, XTraining)<br><span class="hljs-comment"># 进行粗略的超参数的搜索</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Gamma)): <br>        <span class="hljs-comment"># [&#x27;-t 2 -c &#x27;+ str(C[i]) + &#x27; -g &#x27; + str(Gamma[j]) + &#x27; -v 5&#x27;]含义：</span><br>        <span class="hljs-comment"># -t 2：      SVM采用RBF内核</span><br>        <span class="hljs-comment"># -c + str(C[i])：      C 的数值为 C[i]</span><br>        <span class="hljs-comment"># -g + str(Gamma[j])：  gamma 数值为 Gamma[j]</span><br>        <span class="hljs-comment"># -v 5：      五折交叉验证</span><br>        param = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C[i]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma[j]) + <span class="hljs-string">&#x27; -v 5&#x27;</span>)<br>        ACC = svm_train(prob, param)<br>        <span class="hljs-keyword">if</span> ACC &gt; MAX_ACC:<br>            MAX_ACC = ACC<br>            index_C = i<br>            index_Gamma = j<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------------------------\n粗略搜索完成！&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;粗略搜索下的结果：\n最大识别率为 %f\n，C=%f\n,Gamma=%f\n&#x27;</span>%(MAX_ACC, C[index_C], Gamma[index_Gamma]))<br><br><span class="hljs-comment"># 利用粗略搜索得到的结果限制精细搜索的范围</span><br>n = <span class="hljs-number">10</span><br>minCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_C-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(CScale), index_C+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>CScale_finer = np.linspace(minCScale, maxCScale, n+<span class="hljs-number">1</span>)<br><br>minGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_Gamma-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(GammaScale), index_Gamma+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>GammaScale_finer = np.linspace(minGammaScale, maxGammaScale, n+<span class="hljs-number">1</span>)<br><br>C_finer = np.full_like(CScale_finer, <span class="hljs-number">2</span>) ** CScale_finer<br>Gamma_finer = np.full_like(GammaScale_finer, <span class="hljs-number">2</span>) ** GammaScale_finer<br><span class="hljs-comment"># 进行精细搜索</span><br>MaxACC = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C_finer)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Gamma_finer)): <br>        param = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C_finer[i]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma_finer[j]) + <span class="hljs-string">&#x27; -v 5&#x27;</span>)<br>        ACC = svm_train(prob, param)<br>        <span class="hljs-keyword">if</span> ACC &gt; MaxACC:    <br>            MaxACC = ACC<br>            index_Cfiner = i<br>            index_Gammafiner = j<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------------------------\n精细搜索完成！&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;精细搜索下的结果：\n最大识别率为 %f\nC=%f\nGamma=%f\n&#x27;</span>%(MaxACC, C_finer[index_Cfiner], Gamma_finer[index_Gammafiner]))<br><br><span class="hljs-comment"># 构建 SVM 模型</span><br>paramTraining = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C_finer[index_Cfiner]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma_finer[index_Gammafiner]))<br>model = svm_train(prob, paramTraining)<br>svm_save_model(<span class="hljs-string">&#x27;model_file&#x27;</span>, model)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test: &#x27;</span>)<br>p_label, p_acc, pval = svm_predict(YTesting, XTesting, model)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SVM</tag>
      
      <tag>机器学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用vps实现科学上网</title>
    <link href="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p>想我大清苦墙久矣！小生不才，无绝其本根之法，仅以此博客尽绵薄之力，盼科学上网全民普及早日实现。古人曰：“授人以鱼不如授人以渔”；我们伟大的教员也曾说：“自己动手丰衣足食”。为秉先人之诫，于此授解决之道；教大家如何从零搭建一台属于自己的梯子，让你科学上网不必求人。（此篇博客并不涉及基本原理的讲解，只负责基本实现，对原理有兴趣的同学可自行探究。）</p><span id="more"></span><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-v2rayN客户端下载（windows）"><a href="#1-v2rayN客户端下载（windows）" class="headerlink" title="1. v2rayN客户端下载（windows）"></a>1. v2rayN客户端下载（windows）</h3><p>下载方式一：GitHub</p><p>【v2rayN.exe Release】：<a href="https://github.com/v2ray/v2ray-core/releases">v2rayN Download url</a></p><p>解压【【点击 v2rayN.exe 启动】】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray.exe.png"></p><h3 id="2-购买vps服务器"><a href="#2-购买vps服务器" class="headerlink" title="2. 购买vps服务器"></a>2. 购买vps服务器</h3><p>推荐购买国外的vps服务器，这里博主使用GitHub学生礼包购买的digital ocean的vps服务器，$5&#x2F;month</p><p>【1. 系统镜像选择Ubuntu即可】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_1.jpg"></p><p>【2. vps选择最低配即可，每月5刀】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_2.jpg"></p><p>【3. 服务器地址选择根据个人情况，这里博主选择的是洛杉矶】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_3.jpg"></p><p>【4. 配置选择完成后，便可以创建服务器】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_4.jpg"></p><h2 id="二、连接服务器"><a href="#二、连接服务器" class="headerlink" title="二、连接服务器"></a>二、连接服务器</h2><p>连接服务器有多种途径，可以通过xshell进行远程连接，博主这里选择通过digital ocean提供的接口进行网页连接</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_5.jpg"></p><p>【连接成功！！！】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_sucess.jpg"></p><h2 id="三、搭建梯子"><a href="#三、搭建梯子" class="headerlink" title="三、搭建梯子"></a>三、搭建梯子</h2><p>由于刚购置Linux没有进行配置，所以需要大家先安装crul进行配置，复制命令粘贴按确认即可</p><p>【ubuntu&#x2F;debian 系统安装 Curl 方法:】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">apt-get update -y &amp;&amp; apt-get install curl -y<br></code></pre></td></tr></table></figure><p>【centos 系统安装 Curl 方法:】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">yum update -y &amp;&amp; yum install curl -y<br></code></pre></td></tr></table></figure><p>下载完成后运行如下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">bash &lt;(curl -s -L https:<span class="hljs-comment">//git.io/v2rayinstall.sh)</span><br></code></pre></td></tr></table></figure><p>按照步骤安装即可（如果不清楚都选择<strong>默认</strong>），得到如下界面则说明安装成功</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/install.jpg"></p><p>输入【v2ray url】可以得到一串vmess链接，将其复制到客户端即可</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vmess.png"></p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/connect.jpg"></p><h2 id="四、v2ray提速"><a href="#四、v2ray提速" class="headerlink" title="四、v2ray提速"></a>四、v2ray提速</h2><p>安装bbr</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/bbr.png"></p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/bbr1.png"></p><h2 id="五、搭建成功效果"><a href="#五、搭建成功效果" class="headerlink" title="五、搭建成功效果"></a>五、搭建成功效果</h2><p>ok，成功登陆Google and YouTube ！！！</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/google.jpg"></p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/youtube.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科学上网</tag>
      
      <tag>梯子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Python的UCAS课程网站课件下载程序</title>
    <link href="/2022/01/22/%E5%9F%BA%E4%BA%8EPython%E7%9A%84UCAS%E8%AF%BE%E7%A8%8B%E7%BD%91%E7%AB%99%E8%AF%BE%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/"/>
    <url>/2022/01/22/%E5%9F%BA%E4%BA%8EPython%E7%9A%84UCAS%E8%AF%BE%E7%A8%8B%E7%BD%91%E7%AB%99%E8%AF%BE%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>由于<a href="http://sep.ucas.ac.cn/">UCAS</a>的课程网站无法进行批量下载课件（太反人类了），本人写了一个爬虫小程序，只需手动输入用户名、密码、验证码，即可实现课件的自动下载，解放双手。</p><span id="more"></span><h2 id="1-依赖库"><a href="#1-依赖库" class="headerlink" title="1. 依赖库"></a>1. 依赖库</h2><ul><li>requests</li><li>BeautifulSoup4</li><li>Image</li><li>os</li></ul><h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h2><p>使用requests库请求得到网页内容，BeautifulSoup 解析网页内容。验证码原本打算采用tesseract库进行OCR识别，但无奈识别效果不佳（有空再研究研究），最终选择人工输入验证码。</p><p><img src="/2022/01/22/%E5%9F%BA%E4%BA%8EPython%E7%9A%84UCAS%E8%AF%BE%E7%A8%8B%E7%BD%91%E7%AB%99%E8%AF%BE%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/sep.png"></p><h2 id="3-演示效果"><a href="#3-演示效果" class="headerlink" title="3. 演示效果"></a>3. 演示效果</h2><p><img src="/2022/01/22/%E5%9F%BA%E4%BA%8EPython%E7%9A%84UCAS%E8%AF%BE%E7%A8%8B%E7%BD%91%E7%AB%99%E8%AF%BE%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/show.gif"></p><h2 id="4-代码展示"><a href="#4-代码展示" class="headerlink" title="4. 代码展示"></a>4. 代码展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">project： 基于Python的UCAS课程网站课件下载程序</span><br><span class="hljs-string">author: Northfourta</span><br><span class="hljs-string">dependent libraries:</span><br><span class="hljs-string">    1. requests;</span><br><span class="hljs-string">    2. BeautifulSoup4;</span><br><span class="hljs-string">    3. Image;</span><br><span class="hljs-string">    4. os</span><br><span class="hljs-string">date: 2022/01/22</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ucas_Crawler</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    基于Python的UCAS课程网站课件下载程序</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, certCode_url, post_url, logined_url</span>):<br>        self.certCode_url = certCode_url<br>        self.post_url = post_url<br>        self.logined_url = logined_url<br>        self.session = requests.Session() <span class="hljs-comment"># 创建一个session会话</span><br>        self.headers = &#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span><br>        &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_certCode</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        得到验证码</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># 获得验证码图片</span><br>        codePic = self.session.get(self.certCode_url, headers=self.headers)<br>        <span class="hljs-comment"># 将验证码图片存到本地</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;codePic.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(codePic.content)<br>            f.close()<br>        <span class="hljs-comment"># 读取图片</span><br>        img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;codePic.jpg&#x27;</span>)<br>        img.show()<br>        certCode = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入验证码：&#x27;</span>)<br>        <span class="hljs-keyword">return</span> certCode<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login_in</span>(<span class="hljs-params">self, certCode</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        登陆网站</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用户名：&#x27;</span>)<br>        pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码：&#x27;</span>)<br>        post_data = &#123;   <span class="hljs-comment"># 提交表单</span><br>            <span class="hljs-string">&#x27;userName&#x27;</span>: name,<br>            <span class="hljs-string">&#x27;pwd&#x27;</span>: pwd,<br>            <span class="hljs-string">&#x27;certCode&#x27;</span>: certCode,<br>            <span class="hljs-string">&#x27;sb&#x27;</span>: <span class="hljs-string">&#x27;sb&#x27;</span><br>        &#125;<br>        self.session.post(url=self.post_url, data=post_data, headers=self.headers) <span class="hljs-comment"># 提交表单，模拟登陆</span><br>        login_page = self.session.get(url=self.logined_url, headers=self.headers)  <span class="hljs-comment"># 获取登陆后页面信息</span><br>        soup_login = BeautifulSoup(login_page.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        <span class="hljs-keyword">if</span> login_page.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sep登陆成功！&#x27;</span>)<br>            <span class="hljs-comment"># 解析获取课程网站所在页面网址</span><br>            portal_url = <span class="hljs-string">&#x27;http://sep.ucas.ac.cn&#x27;</span> + soup_login.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程网站&#x27;</span>&#125;)[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;href&#x27;</span>]<br>        <span class="hljs-keyword">return</span> portal_url<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Course_Info</span>(<span class="hljs-params">self, portal_url</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        获取选课信息</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        response = self.session.get(portal_url, headers=self.headers)<br>        url = BeautifulSoup(response.content, <span class="hljs-string">&#x27;html.parser&#x27;</span>).find_all(name = <span class="hljs-string">&#x27;h4&#x27;</span>)[<span class="hljs-number">0</span>].a[<span class="hljs-string">&#x27;href&#x27;</span>]<br>        soup = BeautifulSoup(self.session.get(url=url, headers=self.headers).content, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        url_course = soup.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;我的课程 - 查看或加入站点&#x27;</span>&#125;)[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;href&#x27;</span>]<br>        re = BeautifulSoup(self.session.get(url_course, headers=self.headers).content, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        list_course = re.find_all(name=<span class="hljs-string">&#x27;tr&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你当前已选课程如下：\n -----------------------------------------------&#x27;</span>)<br>        i = <span class="hljs-number">0</span><br>        url_course = []  <span class="hljs-comment"># 对应课程的链接网址</span><br>        name_course = []<br>        <span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> list_course:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(course.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_top&#x27;</span>&#125;)) &gt; <span class="hljs-number">0</span>:<br>                i += <span class="hljs-number">1</span><br>                content = course.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_top&#x27;</span>&#125;)[<span class="hljs-number">0</span>]<br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;. &#x27;</span> + content[<span class="hljs-string">&#x27;title&#x27;</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>])<br>                name_course.append(content[<span class="hljs-string">&#x27;title&#x27;</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>])<br>                url_course.append(content[<span class="hljs-string">&#x27;href&#x27;</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------------------------------------------&#x27;</span>)<br>        <span class="hljs-keyword">return</span> url_course, name_course<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">self, url_courses, name_courses</span>):<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入想要更新课件资源的课程编号（如选择多门课程，请使用空格间隔）：&#x27;</span>)<br>        dirs = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入想要将资源下载到的位置（形式：”D:\\Release\\bin“）：&#x27;</span>)<br>        sect_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, string.split(<span class="hljs-string">&#x27; &#x27;</span>)))<br>        <span class="hljs-keyword">for</span> sect <span class="hljs-keyword">in</span> sect_list:<br>            <span class="hljs-built_in">dir</span> = dirs + <span class="hljs-string">&#x27;\\&#x27;</span> + name_courses[sect-<span class="hljs-number">1</span>]<br>            <span class="hljs-comment"># 判断目录是否存在,不存在则创建目录</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-built_in">dir</span>):<br>                os.makedirs(<span class="hljs-built_in">dir</span>)<br>            current_course = BeautifulSoup(self.session.get(url_courses[sect-<span class="hljs-number">1</span>], headers=self.headers).content, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>            url_course = current_course.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;资源 - 上传、下载课件，发布文档，网址等信息&#x27;</span>&#125;)[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;href&#x27;</span>]<br>            resource = BeautifulSoup(self.session.get(url_course, headers=self.headers).text, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>            <span class="hljs-comment"># 下载所有的ppt</span><br>            <span class="hljs-keyword">for</span> ppt <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;PowerPoint &#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_self&#x27;</span>&#125;):<br>                link = ppt[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + ppt.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> ppt <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Power Point&#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_self&#x27;</span>&#125;):<br>                link = ppt[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + ppt.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 下载所有pdf</span><br>            <span class="hljs-keyword">for</span> pdf <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;PDF&#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_blank&#x27;</span>&#125;):<br>                link = pdf[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + pdf.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 下载所有word</span><br>            <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Word &#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_self&#x27;</span>&#125;):<br>                link = word[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + word.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 下载其他资源</span><br>            <span class="hljs-keyword">for</span> rar <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;未知类型&#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_self&#x27;</span>&#125;):<br>                link = rar[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + rar.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">self</span>):<br>        certCode = self.get_certCode()<br>        portal_url = self.login_in(certCode)<br>        url_course, name_course = self.Course_Info(portal_url)<br>        self.download_file(url_course, name_course)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    certCode_url = <span class="hljs-string">&#x27;http://sep.ucas.ac.cn/changePic&#x27;</span> <span class="hljs-comment"># 验证码图片的地址</span><br>    post_url = <span class="hljs-string">&#x27;http://sep.ucas.ac.cn/slogin&#x27;</span>        <span class="hljs-comment"># 用户名与密码的请求地址</span><br>    logined_url = <span class="hljs-string">&#x27;https://sep.ucas.ac.cn/appStore&#x27;</span>  <span class="hljs-comment"># 登录后显示页面的地址</span><br>    crawler = Ucas_Crawler(certCode_url, post_url, logined_url)<br>    crawler.main()<br></code></pre></td></tr></table></figure><blockquote><p>源码地址：**Github: **<a href="https://github.com/Northfourta/UCASCourserHelper">UCASCourserHelper</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
