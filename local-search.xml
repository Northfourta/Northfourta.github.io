<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>STM32定时器实战（1）：内部时钟轻松实现秒表计时</title>
    <link href="/2025/03/02/STM32%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E6%88%98%EF%BC%9A%E5%86%85%E9%83%A8%E6%97%B6%E9%92%9F%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E7%A7%92%E8%A1%A8%E8%AE%A1%E6%97%B6/"/>
    <url>/2025/03/02/STM32%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E6%88%98%EF%BC%9A%E5%86%85%E9%83%A8%E6%97%B6%E9%92%9F%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E7%A7%92%E8%A1%A8%E8%AE%A1%E6%97%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>你是否曾好奇电脑的时钟计时是如何实现的？又或者觉得网络上的天气时钟很炫酷？</p><p>本文将基于<strong>实际项目经验</strong>，手把手教你：</p><ol><li><strong>掌握</strong>STM32定时器<strong>原理及配置</strong></li><li><strong>实现</strong>简单的秒表计时demo，获取现成可用的<strong>工程代码</strong></li></ol><h1 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h1><h2 id="2-1-定时器的定义"><a href="#2-1-定时器的定义" class="headerlink" title="2.1 定时器的定义"></a>2.1 定时器的定义</h2><p>单片机的<strong>定时器（Timer）是其内部的一个重要功能模块，主要用于计时、计数、生成精确的时间间隔或控制周期性操作</strong>。其本质上是一个<strong>计数器</strong>，通过对时钟脉冲进行计数来实现计时功能。时钟源可以是单片机的主时钟（内部晶振）或外部引脚输入的信号。</p><h2 id="2-2-定时器的时基单元"><a href="#2-2-定时器的时基单元" class="headerlink" title="2.2 定时器的时基单元"></a>2.2 定时器的时基单元</h2><p>时基单元是定时器的核心结构，由三部分组成，即计数器，预分频器，自动重装载寄存器</p><p>计数器：用于对时钟源信号进行计数，可以是<strong>递增计数</strong>或<strong>递减计数</strong>。</p><p>预分频器：用于将高频时钟信号分频，降低计数频率，从而延长定时时间范围。例如，主频为16MHz的单片机，通过预分频器分频为16分频后，计数频率变为1MHz（每1μs计数一次）。</p><p>自动重装载寄存器：设定的计数目标值，当计数器达到设定值（溢出）时，会自动重置为初始值（重装载值），并触发中断或事件。例如：16位定时器的最大计数值为2^16&#x3D;65535，若设置重装载值为50000，则每50000次计数触发一次中断。</p><aside>❓ 定时器如何通过计数来实现计时呢？<p>假设定时器的时钟源频率是72MHz，预分频器为72，自动重装载寄存器设定值是10000。分频之后的时钟频率是：</p><p>$$<br>\frac{72MHz}{72}&#x3D;1MHz<br>$$</p><p>周期T，即每计1个数所需时间是</p><p>$$<br>T&#x3D;\frac{1}{f}&#x3D;\frac{1}{10^6}s<br>$$</p><p>即1秒就能计1000000个数。</p><p>因此，计数器从0计数到目标值10000所需时间是</p><p>$$<br>\frac{10000}{1000000}&#x3D;0.01s<br>$$</p><p>即每0.01s产生一次中断。这样就可以实现0.01s为单位的计时。</p><blockquote><p><em>对于72MHz的时钟源，可以实现最大59.65s的计时。</em></p></blockquote><p>$$<br>\frac{2^{16}}{72000000&#x2F;65535}&#x3D;59.65s<br>$$</p></aside><h2 id="2-3-定时器级联功能"><a href="#2-3-定时器级联功能" class="headerlink" title="2.3 定时器级联功能"></a>2.3 定时器级联功能</h2><p>有的小伙伴可能会问，你这计时时长也太短了。即便是72,MHz的时钟源，也最多只能实现59秒的计时。如果想实现更长时间的计时，这就需要使用到定时器的级联功能，即将一个定时器的输出作为另一个计时器的输入。假设我们第一个计时器的计时时长为59秒，设定第二个计时器的自动重装载寄存器为2^16&#x3D;65535，那么我们级联后的最大时长就为59*2^16&#x3D;1074h。这就是指数爆炸的威力。</p><h2 id="2-4-定时器的主要功能"><a href="#2-4-定时器的主要功能" class="headerlink" title="2.4 定时器的主要功能"></a><strong>2.4 定时器的主要功能</strong></h2><aside>✅ 定时器不仅具备基本的定时中断功能，而且还包含内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等多种功能<ol><li><strong>定时模式</strong>：<ul><li>用于生成精确的时间间隔。例如：<ul><li>定时1秒后触发某个操作（如LED闪烁）。</li><li>周期性执行任务（如每10ms采集一次传感器数据）。</li></ul></li></ul></li><li><strong>计数模式</strong>：<ul><li>对外部信号（如传感器脉冲、按键按下次数）进行计数。</li></ul></li><li><strong>PWM输出</strong>：<ul><li>通过调节占空比控制电机速度、LED亮度等。</li><li>例如：使用定时器生成频率1kHz、占空比50%的方波。</li></ul></li><li><strong>输入捕获</strong>：<ul><li>测量外部信号的脉冲宽度或频率。</li><li>例如：测量超声波传感器的回波时间。</li></ul></li><li><strong>输出比较</strong>：<ul><li>在特定计数值时触发输出引脚的电平变化，用于精确控制时序。</li></ul></li></ol><h2 id="2-5-定时器的类型"><a href="#2-5-定时器的类型" class="headerlink" title="2.5 定时器的类型"></a>2.5 定时器的类型</h2><p>定时器根据复杂度和应用场景分为了高级定时器、通用定时器、基本定时器三种类型</p><p><img src="/2025/03/02/STM32%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E6%88%98%EF%BC%9A%E5%86%85%E9%83%A8%E6%97%B6%E9%92%9F%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E7%A7%92%E8%A1%A8%E8%AE%A1%E6%97%B6/image.png" alt="image.png"></p><h1 id="三、定时器配置"><a href="#三、定时器配置" class="headerlink" title="三、定时器配置"></a>三、定时器配置</h1><h2 id="3-1-定时器结构"><a href="#3-1-定时器结构" class="headerlink" title="3.1 定时器结构"></a>3.1 定时器结构</h2><ul><li>基本定时器</li></ul><p>基本定时器结构最简单，仅由时基单元、触发控制器构成。来自内部时钟源（内部晶振）产生的方波信号经由TIMxCLK传入触发控制器，随后经由时基单元计数，当计数值达到重载寄存器设定值，触发中断&#x2F;事件。当中断配置到TRGO，将直接触发DAC实现硬件中断，不必经过CPU处理，这样就可以节省CPU资源，尤其是在数模转换这种频繁使用的场景，可以减少中断造成的CPU执行卡顿。</p><p>![image.png](STM32定时器实战：内部时钟轻松实现秒表计时&#x2F;image 1.png)</p><ul><li>通用定时器</li></ul><p>通用定时器拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能。</p><p>通用定时器的内外时钟源除了可使用内部RCC的晶振时钟源，还可选择外接晶振，或者外部能够产生方波信号的设备作为时钟源；输入捕获可实现测量外部信号的脉冲宽度或频率的功能；输出比较常用于产生PWM，进行电机的控制；编码器接口则可直接使用硬件中断对电机速度进行测量。</p><p>![image.png](STM32定时器实战：内部时钟轻松实现秒表计时&#x2F;image 2.png)</p><ul><li>高级定时器</li></ul><p>高级定时器则拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能</p><p>![image.png](STM32定时器实战：内部时钟轻松实现秒表计时&#x2F;image 3.png)</p><aside>✅ 定时器流程分为时钟源选择、时基单元计数、中断输出配置第三个阶段<p>![image.png](&#x2F;Users&#x2F;ganquan&#x2F;Library&#x2F;CloudStorage&#x2F;OneDrive-mails.ucas.ac.cn&#x2F;STM32Project&#x2F;STM32定时器实战&#x2F;3b720226-6639-4fd7-99d8-728b922351a2_Export-f8802dac-7998-4057-b5ee-ccaf6bbe878f&#x2F;STM32 定时器实战：内部时钟轻松实现秒表计时 19dcabdc5e28806cb314e58a4b5337d9&#x2F;image 4.png)</p><h2 id="3-2-定时器配置"><a href="#3-2-定时器配置" class="headerlink" title="3.2 定时器配置"></a>3.2 定时器配置</h2><p><strong>TIM配置步骤</strong>：</p><ol><li>开启定时器时钟并配置时钟模式</li></ol><p>![image.png](STM32定时器实战：内部时钟轻松实现秒表计时&#x2F;image 5.png)</p><ol><li>时基单元初始化及参数配置</li></ol><p>![image.png](STM32定时器实战：内部时钟轻松实现秒表计时&#x2F;image 6.png)</p><ol><li>定时器中断开启</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 使能或者失能指定的 TIM 中断</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">TIM_ITConfig</span><span class="hljs-params">(TIM_TypeDef* TIMx, u16 TIM_IT, FunctionalStateNewState)</span><br></code></pre></td></tr></table></figure><ol><li>NVIC配置</li></ol><p>![image.png](STM32定时器实战：内部时钟轻松实现秒表计时&#x2F;image 7.png)</p><ol><li>定时器中断使能开启</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*设置优先级分组：先占优先级和从优先级*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">NVIC_PriorityGroupConfig</span><span class="hljs-params">(u32 NVIC_PriorityGroup)</span><br> <br><span class="hljs-comment">/*根据 NVIC_InitStruct 中指定的参数初始化外设 NVIC 寄存器*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">NVIC_Init</span><span class="hljs-params">(NVIC_InitTypeDef* NVIC_InitStruct)</span><br><br><span class="hljs-comment">/*根据 NVIC_InitStruct 中指定的参数初始化外设 NVIC 寄存器*/</span><br></code></pre></td></tr></table></figure><h1 id="四、小试牛刀"><a href="#四、小试牛刀" class="headerlink" title="四、小试牛刀"></a>四、小试牛刀</h1><h2 id="4-1-定时器内部时钟实现秒表计时"><a href="#4-1-定时器内部时钟实现秒表计时" class="headerlink" title="4.1 定时器内部时钟实现秒表计时"></a>4.1 定时器内部时钟实现秒表计时</h2><p><strong>定时器定时中断程序</strong>：下载程序后，OLED上显示数字“number”，每秒自动加一。该程序利用定时器内部时钟设定一秒定时，每隔一秒申请中断，在中断函数中执行“number++”操作，最后在OLED上显示结果。</p><aside>🛠 实验环境<ul><li>硬件：<code>STM32F10C8T6开发板 + ST-LINK模块 + OLED显示屏</code></li><li>软件：<code>Keil5</code></li><li>依赖库：<code>STM32标准库</code></li></ul><p>![6-1 定时器定时中断.jpg](&#x2F;Users&#x2F;ganquan&#x2F;Library&#x2F;CloudStorage&#x2F;OneDrive-mails.ucas.ac.cn&#x2F;STM32Project&#x2F;STM32定时器实战&#x2F;3b720226-6639-4fd7-99d8-728b922351a2_Export-f8802dac-7998-4057-b5ee-ccaf6bbe878f&#x2F;STM32 定时器实战：内部时钟轻松实现秒表计时 19dcabdc5e28806cb314e58a4b5337d9&#x2F;6-1_定时器定时中断.jpg)</p><p>代码实现（<a href="https://github.com/Northfourta/STM32ForBeginner/tree/main/6-1%20%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6">工程代码GitHub链接点击我</a>）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">filename: main.c</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span>                  <span class="hljs-comment">// Device header</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Delay.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;OLED.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Timer.h&quot;</span></span><br><br><span class="hljs-type">uint16_t</span> count;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br>OLED_Init();<br>Timer_Init();<br>OLED_ShowString(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;Count:&quot;</span>);<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br><br><span class="hljs-comment">//OLED_ShowString(1, 3, &quot;HelloWorld!&quot;);</span><br><span class="hljs-comment">//OLED_ShowNum(2, 1, 12345, 5);</span><br><span class="hljs-comment">//OLED_ShowSignedNum(2, 7, -66, 2);</span><br><span class="hljs-comment">//OLED_ShowHexNum(3, 1, 0xAA55, 4);</span><br><span class="hljs-comment">//OLED_ShowBinNum(4, 1, 0xAA55, 16);</span><br><br>OLED_ShowNum(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, count, <span class="hljs-number">5</span>);<br>OLED_ShowNum(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, TIM_GetCounter(TIM2), <span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* TIM2定时中断函数*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">TIM2_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (TIM_GetITStatus(TIM2, TIM_IT_Update)==SET)<br>&#123;<br>count ++;<br>TIM_ClearITPendingBit(TIM2, TIM_IT_Update);<br>&#125;<br>&#125;<br><br>------------------------------------------------------------------<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">filename: Timer.h</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __TIMER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __TIMER_H</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Timer_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>------------------------------------------------------------------<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">filename: Timer.c</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span>                  <span class="hljs-comment">// Device header</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Timer_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 开启timer2的时钟</span><br>RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);<br>TIM_InternalClockConfig(TIM2); <span class="hljs-comment">// TIM内部时钟模式</span><br><br><span class="hljs-comment">/* 时基单元初始化*/</span><br>TIM_TimeBaseInitTypeDef TimerInitStructure;<br>TimerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; <span class="hljs-comment">// 不分频</span><br>TimerInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="hljs-comment">// 向上计数</span><br>TimerInitStructure.TIM_Period = <span class="hljs-number">7200</span> - <span class="hljs-number">1</span>;<br>TimerInitStructure.TIM_Prescaler = <span class="hljs-number">10000</span> - <span class="hljs-number">1</span>;<br>TimerInitStructure.TIM_RepetitionCounter = <span class="hljs-number">0</span>;<br>TIM_TimeBaseInit(TIM2, &amp;TimerInitStructure);<br><br><span class="hljs-comment">/* 定时器中断控制*/</span><br>TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); <br><br><span class="hljs-comment">/* NVIC配置*/</span><br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<br>NVIC_InitTypeDef NVIC_InitSturcture;<br>NVIC_InitSturcture.NVIC_IRQChannel = TIM2_IRQn;<br>NVIC_InitSturcture.NVIC_IRQChannelCmd = ENABLE;<br>NVIC_InitSturcture.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">1</span>;<br>NVIC_InitSturcture.NVIC_IRQChannelSubPriority = <span class="hljs-number">2</span>;<br>NVIC_Init(&amp;NVIC_InitSturcture);<br><br><span class="hljs-comment">/*TIM使能*/</span><br>TIM_Cmd(TIM2, ENABLE);<span class="hljs-comment">//使能TIM2，定时器开始运行</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-定时器外部时钟实现光耦计数"><a href="#4-2-定时器外部时钟实现光耦计数" class="headerlink" title="4.2 定时器外部时钟实现光耦计数"></a>4.2 定时器外部时钟实现光耦计数</h2><p><strong>定时器中断外部时钟程序</strong>：下载程序后，OLED上显示数字“number”及其值。传感器每被遮挡一次，number+1。该程序利用光耦作为外部时钟，光耦每遮挡1次，申请中断，在中断函数中执行“number++”操作，最后在OLED上显示结果。（<a href="https://github.com/Northfourta/STM32ForBeginner/tree/main/6-2%20%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD%E5%A4%96%E9%83%A8%E6%97%B6%E9%92%9F">工程代码-GitHub链接点击我</a>）</p><aside>🛠 实验环境<ul><li>硬件：<code>STM32F10C8T6开发板 + ST-LINK模块 + OLED显示屏 + 红外传感器</code></li><li>软件：<code>Keil5</code></li><li>依赖库：<code>STM32标准库</code></li></ul><p>![6-2 定时器外部时钟.jpg](&#x2F;Users&#x2F;ganquan&#x2F;Library&#x2F;CloudStorage&#x2F;OneDrive-mails.ucas.ac.cn&#x2F;STM32Project&#x2F;STM32定时器实战&#x2F;3b720226-6639-4fd7-99d8-728b922351a2_Export-f8802dac-7998-4057-b5ee-ccaf6bbe878f&#x2F;STM32 定时器实战：内部时钟轻松实现秒表计时 19dcabdc5e28806cb314e58a4b5337d9&#x2F;6-2_定时器外部时钟.jpg)</p><aside>❓ 外部时钟源通过GPIO14接口输入，程序无法实现<p>  依据参考手册，TIM2只可使用PA0、PA15端口<br>  ![image.png](STM32定时器实战：内部时钟轻松实现秒表计时&#x2F;image 8.png)</p><aside>❓ 出现TIM_Counter值乱跳现象<p>原因：传感器输入存在信号抖动，并非完美的方波信号</p><p>解决：配置外部时钟的滤波器，降低采样频率，可以一定程度滤掉数据抖动</p><p>![image.png](STM32定时器实战：内部时钟轻松实现秒表计时&#x2F;image 9.png)</p><aside>❓ TIM_PSC的影响? 当TIM_PSC由0更改为9时，时钟信号每变化10次，才会触发TIM_Counter变化一次<p>解释：STM32定时器的预分频器实际分频系数为 <strong>PSC + 1</strong>。定时器溢出中断发生在计数器值达到自动重装载值（ARR）时，所需的总脉冲数为：<strong>总脉冲数 &#x3D; (ARR + 1) × (PSC + 1)</strong></p></aside></aside></aside></aside></aside></aside></aside>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32中断实战：用外部中断对光耦遮挡次数进行计数</title>
    <link href="/2025/02/23/STM32%E4%B8%AD%E6%96%AD%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AF%B9%E5%85%89%E8%80%A6%E9%81%AE%E6%8C%A1%E6%AC%A1%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%AE%A1%E6%95%B0/"/>
    <url>/2025/02/23/STM32%E4%B8%AD%E6%96%AD%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AF%B9%E5%85%89%E8%80%A6%E9%81%AE%E6%8C%A1%E6%AC%A1%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一引言">一、引言</h1><p>你是否遇到过以下问题？</p><ul><li>辛苦编写的STM32电机速度监测代码，数据接收总是丢包？</li><li>明明设定了相同的电机转速，两轮机器人却无法直线行驶？</li></ul><p>本文将基于<strong>实际项目经验</strong>，手把手教你：</p><ol type="1"><li><strong>精准定位</strong>电机速度监测和串口通信丢包的根本原因</li><li>掌握STM32中断外设配置，实现电机速度的精确测量</li><li>获取现成可用的<strong>代码模板与调试工具清单</strong></li></ol><aside><p>💡为什么需要关注中断？</p><ul><li>中断机制是计算机系统的核心功能之一，在硬件与操作系统的协同工作中起着关键作用。</li><li>中断机制采用事件驱动的异步处理方式，实现了<strong>资源高效利用、实时响应、系统稳定性</strong>等重要目标。如果没有中断机制，计算机就只能按顺序执行任务，效率低下，无法满足复杂应用的需求。</li></ul><hr><h1 id="二中断机制"><strong>二、中断机制</strong></h1><h2 id="什么是中断">2.1 什么是中断？</h2><p>中断是指在主程序运行过程中，当出现特定的触发条件（即中断源）时，CPU暂停当前执行的程序，转而执行中断程序。处理完中断程序后，CPU返回原来被暂停的位置继续运行。</p><figure><img src="/2025/02/23/STM32%E4%B8%AD%E6%96%AD%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AF%B9%E5%85%89%E8%80%A6%E9%81%AE%E6%8C%A1%E6%AC%A1%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%AE%A1%E6%95%B0/4d57c20c-9775-42f7-9238-32b01c628116.png" alt="image.png"><figcaption aria-hidden="true">image.png</figcaption></figure><p><em>例如，外部中断可由引脚电平变化触发，定时器中断由定时时间到达触发，串口通信中断则在接收数据时触发。这些中断事件通常较为紧急，如不及时处理，可能导致数据丢失或系统错误。使用中断系统能显著提高程序效率，避免主程序不断查询事件。</em></p><h2 id="中断优先级">2.2 中断优先级</h2><p>当多个中断源同时请求中断时，CPU会根据轻重缓急进行裁决，优先处理更紧急的中断源，这就是中断优先级的作用。开发者可根据程序设计需求设置中断优先级。STM32提供多种优先级分类方式，通过合理设置，可确保紧急事件优先处理，避免被其他中断延误。</p><aside><p>📖 NVIC（嵌套向量中断控制器）统一管理 STM32的中断，并为每个中断通道分配优先级。每个通道具有 16个可编程优先等级，还可通过分组设置抢占优先级和响应优先级，为开发者提供灵活的优先级配置方式。</p><ol type="1"><li><strong>分组原理</strong>：STM32的NVIC通过分组机制实现细致的中断优先级管理。优先级寄存器使用4位二进制数（0-15），表示16个优先级等级，数值越小优先级越高。这4位可分为高n位的抢占优先级和低(4-n)位的响应优先级。</li><li><strong>分组方式与优先级规则</strong>：系统提供5种分组方式（0-4）。分组0设置0位抢占优先级（固定为0）和4位响应优先级（0-15）；分组1设置1位抢占优先级（0-1）和3位响应优先级（0-7），依此类推。高抢占优先级的中断可以嵌套执行，高响应优先级的中断在等待时优先处理。当两种优先级相同时，按中断号排序，较小的优先响应。开发者应根据应用需求选择合适的分组方式，并确保优先级设置在有效范围内。</li></ol><h2 id="中断嵌套">2.3 中断嵌套</h2><p>中断嵌套指一个中断程序运行时，如有更高优先级的中断请求，CPU会暂停当前中断程序，转而处理新的中断。完成后，再依次返回并继续执行原中断程序。</p><figure><img src="/2025/02/23/STM32%E4%B8%AD%E6%96%AD%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AF%B9%E5%85%89%E8%80%A6%E9%81%AE%E6%8C%A1%E6%AC%A1%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%AE%A1%E6%95%B0/14b45d9c-85c8-4b24-8d52-705302e16e81.png" alt="image.png"><figcaption aria-hidden="true">image.png</figcaption></figure><aside>⚠️中断嵌套旨在及时处理紧急中断，其发生条件取决于中断优先级——仅当新中断优先级更高时才会发生嵌套。</aside><h2 id="stm32中断分类"><strong>2.4 STM32中断分类</strong></h2><p>STM32的中断资源包括<strong>内核中断</strong>和<strong>外设中断</strong>。</p><p>内核中断包括复位中断、NMI不可屏蔽中断等，主要涉及系统底层操作。虽然较难理解，但在一般应用中使用较少。</p><p>外设中断则包含各类外设产生的中断，如窗口看门狗用于监测程序运行状态，在程序卡死未及时喂狗时申请中断；PVD电源电压监测在供电不足时产生中断，提醒保存重要数据。本节重点学习的外部中断也属于外设中断的一种。</p><h1 id="三外部中断exti">三、外部中断（EXTI）</h1><h3 id="外部中断基本介绍"><strong>3.1 外部中断基本介绍</strong></h3><ul><li><strong>外部中断基础功能</strong></li></ul><p>EXTI（ External Interrupt，外部中断 ）主要用于监测指定 GPIO口的电平变化。当指定的 GPIO 口产生电平变化时，EXTI 会立即向 NVIC发出中断申请，经 NVIC 裁决后，中断 CPU，使主程序执行 EXTI对应的中断程序，从而实现对外部事件的及时响应。</p><ul><li><strong>多样的触发方式</strong></li></ul><p>EXTI支持多种触发方式，包括上升沿触发（即电平从低电平变为高电平的瞬间触发中断）、下降沿触发（高电平变为低电平的瞬间触发）、双边沿触发（上升沿和下降沿都能触发中断）以及软件触发（通过程序代码执行即可触发中断，即使引脚电平未发生变化）。</p><ul><li><strong>GPIO 口支持与限制</strong></li></ul><p>EXTI 支持所有的 GPIO口作为外部中断引脚，但需要注意的是，相同编号的引脚（如 PA0 和 PB0、PA1和 PB1等）不能同时用于触发中断。若有多个中断引脚需求，应选择不同编号的引脚，如PA6 和 PA7、PA9 和 PB15、PB0 和 PB1 等组合。</p><ul><li><strong>中断通道分配</strong></li></ul><p>外部中断共占用 20 个中断线路，其中 16 个与 GPIO 口对应（即 GPIO0 -GPIO15），另外还包括 PVD 输出、RTC 闹钟、USB唤醒、以太网唤醒所占用的通道。这 16 个 GPIO口对应的通道是外部中断的主要功能部分，而后面四个通道主要是借助外部中断的从低功耗模式唤醒功能，实现相应的特殊功能，如电源电压恢复时PVD 借助外部中断退出停止模式，RTC 闹钟定时到达后唤醒系统等。</p><ul><li><strong>触发响应方式</strong></li></ul><p>外部中断的触发响应方式分为中断响应和事件响应。中断响应是常见的方式，即申请中断后，CPU执行中断函数。而事件响应是 STM32为外部中断增加的特殊功能，当外部中断检测到引脚电平变化时，可选择触发事件。此时，外部中断信号不会通向CPU，而是通向其他外设，触发如 ADC 转换、DMA等外设操作，实现外设之间的协同工作，提高系统的整体效率。</p><h3 id="外部中断结构解析"><strong>3.2 外部中断结构解析</strong></h3><ol type="1"><li><strong>整体架构</strong>：外部中断的整体结构较为复杂，从左到右依次为GPIO 口外设、AFIO 中断引脚选择电路模块、EXTI边缘检测及控制电路，最后分为触发中断和触发事件两路输出。GPIO口外设有多个，每个外设包含 16 个硬件引脚，这些引脚的信号首先进入 AFIO选择电路。</li><li><strong>AFIO 选择电路</strong>：AFIO主要用于引脚复用功能的选择和定义，在外部中断中，它起到中断引脚选择的关键作用。由于GPIO 口硬件引脚数量众多，而 EXTI 模块只有 16 个 GPIO 通道，AFIO通过数据选择器，从多个 GPIO 口的 16 个硬件引脚中选择一个连接到 EXTI通道，这就解释了为何相同编号的引脚不能同时触发中断。</li><li><strong>EXTI 内部电路</strong>：经过 AFIO 选择后的 16个通道信号与其他 4 个特殊功能信号（PVD 输出、RTC 闹钟、USB唤醒、以太网唤醒）共同组成 EXTI 的 20 个输入信号，进入 EXTI边缘检测及控制电路。该电路可选择上升沿、下降沿或双边沿触发，触发信号经过或门后兵分两路。一路用于触发中断，会先设置挂起寄存器，通过与中断屏蔽寄存器共同进入与门，决定是否向NVIC中断控制器发送中断信号；另一路用于触发事件，经过事件屏蔽寄存器控制后，通过脉冲发生器触发其他外设操作。</li></ol><figure><img src="/2025/02/23/STM32%E4%B8%AD%E6%96%AD%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AF%B9%E5%85%89%E8%80%A6%E9%81%AE%E6%8C%A1%E6%AC%A1%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%AE%A1%E6%95%B0/image.png" alt="image.png"><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="外部中断的配置">3.3 外部中断的配置</h2><p><strong>EXTI配置步骤</strong>：</p><ol type="1"><li>配置时钟</li><li>配置GPIO为输入模式（推荐使用<strong>上拉/下拉/浮空</strong>输入）</li><li>配置AFIO并选择中断引脚（需与GPIO端口对应）</li><li>配置EXTI参数，包括触发方式（上升沿、下降沿或双边沿）和中断总线</li><li>配置NVIC优先级并使能中断</li><li>向中断函数中添加中断执行程序；</li></ol><figure><img src="/2025/02/23/STM32%E4%B8%AD%E6%96%AD%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AF%B9%E5%85%89%E8%80%A6%E9%81%AE%E6%8C%A1%E6%AC%A1%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%AE%A1%E6%95%B0/image%201.png" alt="image.png"><figcaption aria-hidden="true">image.png</figcaption></figure><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 中断配置</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CounterSensor_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 开启中断相应的时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="hljs-comment">// GPIO时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); <span class="hljs-comment">// AFIO时钟</span><br><span class="hljs-comment">// 配置GPIO</span><br>GPIO_InitTypeDef GPIOInitSturcture; <span class="hljs-comment">// 定义GPIO结构体</span><br>GPIOInitSturcture.GPIO_Mode = GPIO_Mode_IPU; <span class="hljs-comment">//上拉输入</span><br>GPIOInitSturcture.GPIO_Pin = GPIO_Pin_14; <span class="hljs-comment">// 使用的GPIO端口</span><br>GPIOInitSturcture.GPIO_Speed = GPIO_Speed_50MHz; <span class="hljs-comment">// GPIO通讯频率</span><br>GPIO_Init(GPIOB, &amp;GPIOInitSturcture); <span class="hljs-comment">// GPIO初始化</span><br><span class="hljs-comment">// 配置AFIO，中断引脚选择</span><br>GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource14);<br><span class="hljs-comment">// 配置EXTI</span><br>EXTI_InitTypeDef EXTIInitSturcture;<br>EXTIInitSturcture.EXTI_Line = EXTI_Line14;<br>EXTIInitSturcture.EXTI_LineCmd = ENABLE;<br>EXTIInitSturcture.EXTI_Mode = EXTI_Mode_Interrupt;<br>EXTIInitSturcture.EXTI_Trigger = EXTI_Trigger_Rising;<br>EXTI_Init(&amp;EXTIInitSturcture);<br><br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<br>NVIC_InitTypeDef NVICInitSturcture;<br>NVICInitSturcture.NVIC_IRQChannel = EXTI15_10_IRQn;<br>NVICInitSturcture.NVIC_IRQChannelCmd = ENABLE;<br>NVICInitSturcture.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">1</span>;<br>NVICInitSturcture.NVIC_IRQChannelSubPriority = <span class="hljs-number">1</span>;<br>NVIC_Init(&amp;NVICInitSturcture);<br><br>&#125;<br><span class="hljs-comment">// 中断函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">EXTI15_10_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (EXTI_GetITStatus(EXTI_Line14) == SET)<br>&#123;<br><br>EXTI_ClearITPendingBit(EXTI_Line14); <span class="hljs-comment">//清除中断标志位</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><aside><p>⏰中断函数的编写</p><ol type="1"><li><strong>清除中断标志</strong>：强调必须在ISR中清除标志位（如<code>__HAL_GPIO_EXTI_CLEAR_IT()</code>）。</li><li><strong>避免阻塞操作</strong>：禁止在ISR中使用<code>HAL_Delay()</code>或长时间循环。</li><li><strong>中断通信技巧</strong>：使用全局变量或信号量（如 FreeRTOS的<code>xSemaphoreGiveFromISR()</code>）传递数据。</li><li>避免和主函数操作同一硬件。</li></ol><h2 id="外部中断适用场景"><strong>3.4 外部中断适用场景</strong></h2><aside><p>📢 外部中断最适合处理外部驱动的快速突发信号。</p><p><strong>以旋转编码器为例：</strong>当不旋转时，STM32无需处理；一旦旋转就会产生大量高速脉冲波形。如果STM32不能及时读取，就会错过关键信息。使用外部中断可以在脉冲到来时立即处理，而在无脉冲时让STM32执行其他任务。</p><p>另一个典型例子是红外遥控接收头，它接收到遥控数据后会输出瞬时波形，同样需要外部中断来快速捕获。不过，对于按键输入，虽然也属于外部驱动的突发事件，但不建议使用外部中断读取，因为外部中断难以处理按键抖动和松手检测。对于要求不高的按键处理，可以在主程序中循环读取；如果需要实现后台读取且不阻塞主程序，可以考虑使用定时器中断方式。</p><h1 id="四小试牛刀">四、小试牛刀</h1><aside><p>🛠 实验环境</p><ul><li>硬件：<code>STM32F10C8T6开发板 + ST-LINK模块 + 对射式红外传感器 + OLED显示屏</code></li><li>软件：<code>Keil5</code></li><li>依赖库：<code>STM32标准库</code></li></ul><figure><img src="/2025/02/23/STM32%E4%B8%AD%E6%96%AD%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AF%B9%E5%85%89%E8%80%A6%E9%81%AE%E6%8C%A1%E6%AC%A1%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%AE%A1%E6%95%B0/46b564ab-b390-4659-8cdb-5bff6d9bfe2c.png" alt="5-1 对射式红外传感器计次.jpg"><figcaption aria-hidden="true">5-1 对射式红外传感器计次.jpg</figcaption></figure><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 中断配置</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span>                  <span class="hljs-comment">// Device header</span></span><br><br><span class="hljs-type">uint16_t</span> CounterSensor_count;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">CounterSensor_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);<br><br>GPIO_InitTypeDef GPIOInitSturcture;<br>GPIOInitSturcture.GPIO_Mode = GPIO_Mode_IPU;<br>GPIOInitSturcture.GPIO_Pin = GPIO_Pin_14;<br>GPIOInitSturcture.GPIO_Speed = GPIO_Speed_50MHz;<br>GPIO_Init(GPIOB, &amp;GPIOInitSturcture);<br><br>GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource14);<br><br>EXTI_InitTypeDef EXTIInitSturcture;<br>EXTIInitSturcture.EXTI_Line = EXTI_Line14;<br>EXTIInitSturcture.EXTI_LineCmd = ENABLE;<br>EXTIInitSturcture.EXTI_Mode = EXTI_Mode_Interrupt;<br>EXTIInitSturcture.EXTI_Trigger = EXTI_Trigger_Rising;<br>EXTI_Init(&amp;EXTIInitSturcture);<br><br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<br>NVIC_InitTypeDef NVICInitSturcture;<br>NVICInitSturcture.NVIC_IRQChannel = EXTI15_10_IRQn;<br>NVICInitSturcture.NVIC_IRQChannelCmd = ENABLE;<br>NVICInitSturcture.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">1</span>;<br>NVICInitSturcture.NVIC_IRQChannelSubPriority = <span class="hljs-number">1</span>;<br>NVIC_Init(&amp;NVICInitSturcture);<br><br>&#125;<br><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">CounterSensor_Count_GET</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">return</span> CounterSensor_count;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">EXTI15_10_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <span class="hljs-comment">//中断函数</span><br>&#123;<br><span class="hljs-keyword">if</span> (EXTI_GetITStatus(EXTI_Line14) == SET)<br>&#123;<br><span class="hljs-comment">/*出现数据乱跳的现象，可再次判断引脚电平，以避免抖动*/</span><br><span class="hljs-keyword">if</span> (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_14) == <span class="hljs-number">0</span>)<br>&#123;<br>CounterSensor_count ++;<br>&#125;<br>EXTI_ClearITPendingBit(EXTI_Line14);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span>                  <span class="hljs-comment">// Device header</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Delay.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;OLED.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;CounterSensor.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br>OLED_Init();<br>CounterSensor_Init();<br>OLED_ShowString(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;Count:&quot;</span>);<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>OLED_ShowNum(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, CounterSensor_Count_GET(), <span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><aside><p>📢 实验现象</p><p>下载程序后，每当红外传感器被遮挡一次，OLED显示屏上的"number"数值就会自动加1。程序通过红外传感器的状态变化触发外部中断，在中断函数中执行"number++"计数操作，并将结果实时显示在OLED上。</p></aside></aside></aside></aside></aside></aside>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32手册</title>
    <link href="/2024/12/22/STM32%E6%89%8B%E5%86%8C/"/>
    <url>/2024/12/22/STM32%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<p>第一次接触单片机还是在大二那个暑假，初次使用的是Arduino平台，在它上面完成了电子小白-电灯大师-循迹小车的过程，算是初步入门了。但也仅此而已了，虽然后期尝试学习STM32，但都没有很好的坚持下来，平衡小车项目也就此搁置。</p><p>如今的我已经初入职场，成为打工牛马，过去五个月一直浑浑噩噩，迷茫。也正是此时，碰上公司裁员。回想自己过去五个月的经历，似乎没有什么收获成长。这份工作能够干多久，下一步又该怎么办？我不知道。不管怎样，只要在制造业继续从业，就免不了要和单片机接触。于是，我决定利用业余时间重拾STM32。相比于STM32在工业界的地位，Arduino更像是给小白提供的一种玩具。本篇博文将会记录我关于STM32的所有学习相关笔记及感想！</p><span id="more"></span><p>　</p><h1 id="初识stm32">1. 初识STM32</h1><p>STM32是ST公司基于ARMCortex-M内核开发的32位微控制器，常应用在嵌入式领域，如智能车、无人机、机器人、无线通信、物联网、工业控制、娱乐电子产品等。STM32系列包括多个子系列，每个子系列针对特定的应用场景和需求进行了优化。</p><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20241222221423636.png" alt="image-20241222221423636"><figcaption aria-hidden="true">image-20241222221423636</figcaption></figure><h2 id="stm32f103c8t6">1.1 STM32F103C8T6</h2><p>STM32F103C8T6属于STM32F1主流系列，是基于Cortex-M3内核的一款STM32经典处理器，也是大学生用于各类机器人及科技竞赛最常见的MCU。其采用LQFP48封装，主频72MHz，RAM大小20K，ROM大小64K，供电电压为2.0～3.6V。</p><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20241222222943018.png" alt="image-20241222222943018"><figcaption aria-hidden="true">image-20241222222943018</figcaption></figure><p>STM32功能强大、性能优异、片上资源丰富、具有<strong>丰富的外设</strong>：包括ADC、DAC、定时器、串口、I2C、SPI、USB、以太网、CAN等，支持多种通信和控制接口。</p><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20241222223157232.png" alt="image-20241222223157232"><figcaption aria-hidden="true">image-20241222223157232</figcaption></figure><p>STM产品型号字符均有意义，拿STM32F103C8T6，其每个字符代表如下意义</p><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20241222223329124.png" alt="image-20241222223329124"><figcaption aria-hidden="true">image-20241222223329124</figcaption></figure><h2 id="系统结构">1.2 系统结构</h2><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20241222223557914.png" alt="image-20241222223557914"><figcaption aria-hidden="true">image-20241222223557914</figcaption></figure><h2 id="基本外设">1.3 基本外设</h2><h3 id="gpio">1.3.1 GPIO</h3><p>GPIO（General Purpose InputOutput），中文称为通用输入输出口，CPU可配置利用GPIO实现高低电平信号的输出和读取。STM32的GPIO可配置成八种输入输出模式。输出模式下可控制端口输出高低电平，用以驱动LED、控制蜂鸣器、模拟通信协议输出时序等，输入模式下可读取端口的高低电平或电压，用于读取按键输入、外接模块电平信号输入、ADC电压采集、模拟通信协议接收数据等。</p><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20250114230022998.png" alt="image-20250114230022998"><figcaption aria-hidden="true">image-20250114230022998</figcaption></figure><p>GPIO是由三个寄存器以及“TTL肖特基触发器、二极管、P-MOS管和N-MOS管”组成[1]。输入输出部分是分开的，当GPIO引脚配置为输出模式时，输入电路则不工作</p><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20250114223820666.png" alt="image-20250114223820666"><figcaption aria-hidden="true">image-20250114223820666</figcaption></figure><p>每个GPIO口都有一组引脚连接，并且这组引脚，如PA-PG(引脚编号)连接到GPIOA中，其中有一个引脚的作用是输出，说的直接一点GPIO口是一个可编程的引脚，我们通过对GPIO口里的寄存器进行配置，让CPU对特定的引脚输出高电平。其基本工作流程为：CPU通过APB2总线控制寄存器，驱动器依据寄存器中不同位的内容（0/1）输出高低电平，实现对GPIO的控制。因此，STM32中代码控制GPIO步骤应包含以下几步：</p><ol type="1"><li>开启GPIO对应的总线时钟（这里是APB2）；</li><li>初始化GPIO；</li><li>控制GPIO；</li></ol><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 开启中断相应的时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="hljs-comment">// GPIO时钟</span><br><span class="hljs-comment">// 配置GPIO</span><br>GPIO_InitTypeDef GPIOInitSturcture; <span class="hljs-comment">// 定义GPIO结构体</span><br>GPIOInitSturcture.GPIO_Mode = GPIO_Mode_Out_PP; <span class="hljs-comment">//推挽输出</span><br>GPIOInitSturcture.GPIO_Pin = GPIO_Pin_14; <span class="hljs-comment">// 使用的GPIO端口</span><br>GPIOInitSturcture.GPIO_Speed = GPIO_Speed_50MHz; <span class="hljs-comment">// GPIO通讯频率</span><br>GPIO_Init(GPIOB, &amp;GPIOInitSturcture); <span class="hljs-comment">// GPIO初始化</span><br><span class="hljs-comment">//控制GPIO</span><br>GPIO_SetBits(GPIOB, GPIO_Pin_12);<span class="hljs-comment">// PB12 输出高电平</span><br>GPIO_ResetBits(GPIOE, GPIO_Pin_12);<span class="hljs-comment">// PB12 输出低电平</span><br></code></pre></td></tr></table></figure><h3 id="中断">1.3.2 中断</h3><h4 id="什么是中断">什么是中断</h4><p>在主程序运行过程中，出现了特定的中断触发条件（中断源），使得CPU暂停当前正在运行的程序，转而去处理中断程序，处理完成后又返回原来被暂停的位置继续运行</p><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20250115214016667.png" alt="image-20250115214016667"><figcaption aria-hidden="true">image-20250115214016667</figcaption></figure><p>中断具有优先级，当有多个中断源同时申请中断时，CPU会根据中断源的轻重缓急进行裁决，优先响应更加紧急的中断源</p><p>中断嵌套：当一个中断程序正在运行时，又有新的更高优先级的中断源申请中断，CPU再次暂停当前中断程序，转而去处理新的中断程序，处理完成后依次进行返回</p><h4 id="为什么需要中断优势是什么">为什么需要中断，优势是什么？</h4><p><strong>中断机制存在的原因</strong></p><ul><li>提高系统效率（节省CPU资源）在计算机系统中，如果没有中断机制，CPU就需要不断地轮询设备状态。例如，CPU要知道打印机是否完成打印任务，如果没有中断，它只能持续地检查打印机的状态寄存器。这会浪费大量的CPU时间，因为在打印机未完成任务的大部分时间里，CPU做的这种轮询是无意义的。而有了中断机制，打印机在完成任务时可以主动向CPU发送中断信号，CPU就可以在这段时间去处理其他更有意义的任务，如运行其他程序或者处理其他设备的请求。</li><li>实现多任务处理（中断优先级）现代操作系统支持多任务运行。当多个任务并发执行时，中断机制可以有效地协调各个任务之间的资源分配和执行顺序。比如，当一个任务正在占用CPU执行时，如果有更高优先级的任务需要处理（如实时性很强的网络数据接收任务），可以通过中断机制暂停当前任务，让CPU转而处理更高优先级的任务。这有助于保证系统对各种任务的响应及时性，特别是对于那些对时间敏感的任务，如多媒体播放中的音频视频同步等任务。</li><li>设备交互需求（避免信息丢失）计算机系统中有各种各样的外部设备，如鼠标、键盘、硬盘等。这些设备的工作速度与CPU的速度相比非常慢。如果没有中断机制，设备与CPU之间的数据传输就会非常困难。以键盘为例，当用户按下一个键时，键盘需要向CPU发送相应的字符编码。通过中断机制，键盘可以在按键按下时及时通知CPU来读取这个编码，而不需要CPU一直等待键盘输入。</li><li>异常处理在程序执行过程中，可能会出现各种异常情况，如除数为零、访问非法内存地址等。中断机制可以将这些异常当作一种特殊的中断（称为异常中断）来处理。当发生这些异常时，系统可以通过中断机制停止当前程序的错误执行，避免系统崩溃，并进行相应的错误处理，如显示错误信息、终止程序或者尝试恢复程序的执行环境等。</li></ul><p><strong>中断的优势</strong></p><ul><li>实时响应性对于一些实时性要求很高的设备或任务，中断机制提供了很好的解决方案。例如在工业控制领域，传感器检测到危险情况（如温度过高、压力过大等）时，能够立即通过中断通知控制系统采取措施。这种实时响应能力可以避免潜在的危险和损失，因为系统不需要等待CPU的轮询周期才能得到传感器的状态信息。</li><li>资源利用率提高由于中断机制避免了CPU的大量无意义轮询，使得CPU能够更多地用于实际的数据处理和任务执行。这提高了整个系统的资源利用率，无论是CPU资源还是其他硬件资源。例如，在一个服务器系统中，通过中断机制可以让CPU更好地处理来自多个客户端的请求，而不会被一些慢速设备（如硬盘读写）的状态查询所浪费时间。</li><li>增强系统灵活性中断机制允许不同设备和任务按照各自的需求与CPU进行交互。操作系统可以根据设备的优先级、任务的性质等因素灵活地配置中断相关的参数，如中断向量、中断优先级等。这种灵活性使得系统能够适应不同的应用场景，无论是桌面计算机系统、移动设备还是大型服务器系统。</li><li>支持异步操作许多设备的操作是异步的，例如网络数据的接收和发送。中断机制能够很好地处理这种异步操作。当网络接口接收到新的数据时，它可以通过中断通知CPU来处理数据，而不需要CPU一直等待数据的到来。同样，在发送数据时，CPU可以将数据交给网络接口设备后继续执行其他任务，当数据发送完成时由设备通过中断通知CPU。</li></ul><h4 id="中断使用场景">中断使用场景</h4><p>单片机中断有多种使用场景，常见的包括以下几种：</p><ul><li>定时器中断：精确延时：比如在智能家电中，需要定时开启或关闭某个功能，如空调定时开关机，可通过定时器中断实现精确的时间控制。周期性任务：在工业自动化生产线上，某些设备需要周期性地进行数据采集或状态检测，定时器中断可确保这些任务按固定时间间隔执行。</li><li>外部中断：按键检测：在电子设备中，如手机、遥控器等，按下按键时会产生外部中断，单片机响应中断后执行相应的按键处理程序，实现对应功能，如调整音量、切换频道等。传感器信号检测：用于检测温度、湿度、压力等传感器的输出信号。当传感器状态变化达到设定阈值时，触发外部中断，单片机进行数据读取和处理，例如在智能家居系统中，根据温度传感器的信号自动控制空调或暖气的运行。</li><li>串口中断：数据通信：在需要与外部设备进行数据交互的场景中广泛应用，如计算机与单片机之间的数据传输、单片机与其他嵌入式设备的通信等。当串口接收到数据时，触发中断，单片机及时处理接收的数据，可用于实现实时监控、远程控制等功能，比如在远程监控系统中，单片机通过串口中断接收监控数据并进行处理和传输。</li><li>软件中断：系统异常处理：当系统出现故障或异常情况时，如程序运行出错、数据溢出等，可通过软件中断触发相应的异常处理程序，进行错误诊断、记录和恢复操作，以保证系统的稳定性和可靠性。状态切换：在一些复杂的控制系统中，根据不同的条件和事件需要切换系统的工作状态，软件中断可用于实现这种状态的快速切换，例如在智能交通信号灯控制系统中，根据不同的时间段和交通流量情况，通过软件中断切换信号灯的显示模式。</li></ul><h4 id="extiextern-interrupt外部中断">EXTI（ExternInterrupt）外部中断</h4><p>EXTI可以监测指定GPIO口的电平信号，当其指定的GPIO口产生电平变化时，EXTI将立即向NVIC发出中断申请，经过NVIC裁决后即可中断CPU主程序，使CPU执行EXTI对应的中断程序</p><p>支持的触发方式：上升沿/下降沿/双边沿/软件触发</p><p>支持的GPIO口：所有GPIO口，但相同的Pin不能同时触发中断</p><p>通道数：16个GPIO_Pin，外加PVD输出、RTC闹钟、USB唤醒、以太网唤醒</p><p>触发响应方式：中断响应/事件响应</p><h4 id="外部中断的结构">外部中断的结构</h4><ol type="1"><li><strong>整体架构</strong>：外部中断的整体结构较为复杂，从左到右依次为GPIO 口外设、AFIO 中断引脚选择电路模块、EXTI边缘检测及控制电路，最后分为触发中断和触发事件两路输出。GPIO口外设有多个，每个外设包含 16 个硬件引脚，这些引脚的信号首先进入 AFIO选择电路</li><li><strong>AFIO 选择电路</strong>：AFIO主要用于引脚复用功能的选择和定义，在外部中断中，它起到中断引脚选择的关键作用。由于GPIO 口硬件引脚数量众多，而 EXTI 模块只有 16 个 GPIO 通道，AFIO通过数据选择器，从多个 GPIO 口的 16 个硬件引脚中选择一个连接到 EXTI通道，这就解释了为何相同编号的引脚不能同时触发中断</li><li><strong>EXTI 内部电路</strong>：经过 AFIO 选择后的 16个通道信号与其他 4 个特殊功能信号（PVD 输出、RTC 闹钟、USB唤醒、以太网唤醒）共同组成 EXTI 的 20 个输入信号，进入 EXTI边缘检测及控制电路。该电路可选择上升沿、下降沿或双边沿触发，触发信号经过或门后兵分两路。一路用于触发中断，会先设置挂起寄存器，通过与中断屏蔽寄存器共同进入与门，决定是否向NVIC中断控制器发送中断信号；另一路用于触发事件，经过事件屏蔽寄存器控制后，通过脉冲发生器触发其他外设操作</li></ol><figure><img src="/2024/12/22/STM32%E6%89%8B%E5%86%8C/image-20250115222920878.png" alt="image-20250115222920878"><figcaption aria-hidden="true">image-20250115222920878</figcaption></figure><p><strong>代码实现</strong>：STM32中代码实现外部中断步骤应包含以下几步：</p><ol type="1"><li>开启GPIO对应的总线时钟（这里是APB2）；</li><li>初始化GPIO；</li><li>开启AFIO时钟；</li><li>配置EXTI及NVIC；</li><li>向中断函数中添加中断执行程序；</li></ol><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 中断配置</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CounterSensor_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 开启中断相应的时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="hljs-comment">// GPIO时钟</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); <span class="hljs-comment">// AFIO时钟</span><br><span class="hljs-comment">// 配置GPIO</span><br>GPIO_InitTypeDef GPIOInitSturcture; <span class="hljs-comment">// 定义GPIO结构体</span><br>GPIOInitSturcture.GPIO_Mode = GPIO_Mode_IPU; <span class="hljs-comment">//上拉输入</span><br>GPIOInitSturcture.GPIO_Pin = GPIO_Pin_14; <span class="hljs-comment">// 使用的GPIO端口</span><br>GPIOInitSturcture.GPIO_Speed = GPIO_Speed_50MHz; <span class="hljs-comment">// GPIO通讯频率</span><br>GPIO_Init(GPIOB, &amp;GPIOInitSturcture); <span class="hljs-comment">// GPIO初始化</span><br><span class="hljs-comment">// 配置AFIO，中断引脚选择</span><br>GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource14);<br><span class="hljs-comment">// 配置EXTI</span><br>EXTI_InitTypeDef EXTIInitSturcture;<br>EXTIInitSturcture.EXTI_Line = EXTI_Line14;<br>EXTIInitSturcture.EXTI_LineCmd = ENABLE;<br>EXTIInitSturcture.EXTI_Mode = EXTI_Mode_Interrupt;<br>EXTIInitSturcture.EXTI_Trigger = EXTI_Trigger_Rising;<br>EXTI_Init(&amp;EXTIInitSturcture);<br><br>NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<br>NVIC_InitTypeDef NVICInitSturcture;<br>NVICInitSturcture.NVIC_IRQChannel = EXTI15_10_IRQn;<br>NVICInitSturcture.NVIC_IRQChannelCmd = ENABLE;<br>NVICInitSturcture.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">1</span>;<br>NVICInitSturcture.NVIC_IRQChannelSubPriority = <span class="hljs-number">1</span>;<br>NVIC_Init(&amp;NVICInitSturcture);<br><br>&#125;<br><span class="hljs-comment">// 中断函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">EXTI15_10_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (EXTI_GetITStatus(EXTI_Line14) == SET)<br>&#123;<br><br>EXTI_ClearITPendingBit(EXTI_Line14); <span class="hljs-comment">//清除中断标志位</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>中断的注意事项</strong></p><ul><li>适用于对通讯频率及实时性有要求的场景，如电机测速、按键识别；</li><li>避免长/复杂代码，若中断中的代码复杂度较高，执行费时，则可能会导致主程序的阻塞；</li><li>避免和主函数操作同一硬件</li></ul></blockquote><h3 id="定时器">1.3.3 定时器</h3><h1 id="reference">Reference</h1><ol type="1"><li><a href="https://blog.csdn.net/bjbz_cxy/article/details/119925257">详细介绍GPIO、I2C、SPI通讯原理以及物理层原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/145096244">对中断的理解</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记-硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毛选一卷之中国社会各阶级的分析读书笔记</title>
    <link href="/2024/06/13/%E6%AF%9B%E9%80%89%E4%B8%80%E5%8D%B7%E4%B9%8B%E4%B8%AD%E5%9B%BD%E7%A4%BE%E4%BC%9A%E5%90%84%E9%98%B6%E7%BA%A7%E5%88%86%E6%9E%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/06/13/%E6%AF%9B%E9%80%89%E4%B8%80%E5%8D%B7%E4%B9%8B%E4%B8%AD%E5%9B%BD%E7%A4%BE%E4%BC%9A%E5%90%84%E9%98%B6%E7%BA%A7%E5%88%86%E6%9E%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>谁是我们的敌人？谁是我们的朋友？这个问题是革命的首要问题。中国过去一切革命斗争成效甚少，其基本原因是因为不能团结真正的朋友，以攻击真正的敌人。教员开篇直指主题，振聋发聩。</p><span id="more"></span><p>　</p><h3 id="文章写作背景">文章写作背景</h3><p>教员的《中国社会各阶级的分析》写于1925年12月，是他在国共合作时期对中国社会各阶级状况进行的一次深入分析。</p><p>1924年，中国国民党和中国共产党为了共同反对北洋军阀，开始了第一次国共合作。这一时期，国共两党联合进行革命活动，共同领导国民革命运动。1925年5月30日，上海发生了大规模的反帝爱国运动，即五卅运动。这次运动的发生进一步激发了全国各地的反帝情绪，推动了工农运动的发展。随着工农运动的高涨，各种社会矛盾也愈加突出。毛泽东意识到，需要对中国社会各阶级的状况进行深入分析，以指导革命运动的发展。</p><p>教员通过分析中国社会的各个阶级，明确了谁是革命的对象（如帝国主义、封建地主阶级、买办阶级）和革命的动力（如工人阶级、农民阶级、城市小资产阶级和民族资产阶级）。并为中国革命制定了具体的策略和方针，指出革命的主要力量是工农联盟，强调要团结一切可以团结的力量，形成广泛的统一战线。这篇文章不仅是对中国社会阶级状况的分析，更是毛泽东对马克思主义理论的具体运用和发展，目的是为中国革命提供理论指导和宣传。</p><h3 id="中国社会各阶级特点">中国社会各阶级特点</h3><p>文章中，教员将当时的中国分为6个阶级，分别是地主阶级、买办阶级、中产阶级、小资产阶级、半无产阶级、无产阶级。各个阶级的特点分别是</p><ol type="1"><li>地主阶级：</li></ol><ul><li>拥有大量土地，是主要的土地所有者。</li><li>通过出租土地、收取地租来获取收入。</li><li>利用剥削农民的方式积累财富，具有较强的经济实力和社会地位。</li></ul><ol start="2" type="1"><li>买办阶级：</li></ol><ul><li>依附于外国资本主义，为外国企业在本国代理商业事务。</li><li>通过从事外贸、金融等经济活动获取佣金和利润。</li><li>往往具有较高的经济地位和社会地位，但依赖于外国资本。</li></ul><ol start="3" type="1"><li>中产阶级：</li></ol><ul><li>拥有中等规模的生产资料和资本，如小工厂、小企业。</li><li>经营中小型商业活动或从事专业工作，如医生、律师、教师等。</li><li>生活相对富裕，有一定的经济地位和社会影响力，但不及大资产阶级。</li></ul><ol start="4" type="1"><li>小资产阶级：</li></ol><ul><li>拥有少量的生产资料，如小商店、小农场、手工作坊。</li><li>自己劳动并经营生产，但也可能雇佣少量工人。</li><li>生活较为稳定，具有一定的经济独立性，但容易受到市场波动的影响。</li></ul><ol start="5" type="1"><li>半无产阶级：</li></ol><ul><li>拥有少量或没有生产资料，主要靠出卖劳动力为生。</li><li>可能拥有少量土地或从事小规模手工业，但收入不足以维持生计。</li><li>生活不稳定，经常处于贫困状态，受到雇佣劳动和自我经营的双重压力。</li></ul><ol start="6" type="1"><li>无产阶级：</li></ol><ul><li>完全没有生产资料，只能靠出卖劳动力为生。</li><li>主要从事工厂、矿山等大型企业的体力劳动或服务业工作。</li><li>经济地位低下，生活条件差，经常面临失业和贫困的威胁。</li></ul><blockquote><p>通过以上内容，可以总结得到：<u><strong>可以通过群体是否占有生产资料来判断其所属的社会阶级</strong></u>。实际上这种方法是马克思主义阶级分析的基本原则之一。</p></blockquote><p>具体来说，<u>生产资料的占有情况决定了一个群体在社会生产体系中的地位和他们的经济利益，从而划分出不同的阶级。</u>以下是基于生产资料占有情况的简要分析：</p><ol type="1"><li>地主阶级</li></ol><p>​ <strong>生产资料</strong>：主要是土地。<strong>特征</strong>：拥有大量土地，通过出租土地获取地租收入，剥削农民。</p><ol start="2" type="1"><li>买办阶级</li></ol><p>​ <strong>生产资料</strong>：资本（多为外国资本）。<strong>特征</strong>：代理外国资本在本地的经济活动，获取佣金和利润，依附于外国资本。</p><ol start="3" type="1"><li>中产阶级</li></ol><p>​<strong>生产资料</strong>：中等规模的生产资料（如中型企业、专业技能）。<strong>特征</strong>：拥有中等规模的企业或从事专业工作，生活富裕，有一定的经济和社会地位。</p><ol start="4" type="1"><li>小资产阶级</li></ol><p>​<strong>生产资料</strong>：少量的生产资料（如小商店、小农场、小工坊）。<strong>特征</strong>：自我经营小规模生产，可能雇佣少量工人，经济相对独立但易受市场波动影响。</p><ol start="5" type="1"><li>半无产阶级</li></ol><p>​ <strong>生产资料</strong>：少量或没有生产资料。<strong>特征</strong>：靠出卖劳动力为主，可能有少量土地或小规模手工业，生活不稳定。</p><ol start="6" type="1"><li>无产阶级</li></ol><p>​ <strong>生产资料</strong>：没有生产资料。<strong>特征</strong>：完全靠出卖劳动力为生，主要从事体力劳动或服务业，经济地位低下，生活条件差。</p><blockquote><p>通过生产资料的占有情况，可以有效地将社会群体划分为不同的阶级。占有生产资料多的阶级（如地主阶级和买办阶级）通常在经济上占据优势地位，而占有生产资料少或没有生产资料的阶级（如半无产阶级和无产阶级）则在经济上处于劣势地位。这种划分方法有助于理解社会结构和各阶级之间的关系。</p></blockquote><h3 id="中国社会各阶级的革命性">中国社会各阶级的革命性</h3><p>阶级的经济性会影响其革命性，即一个阶级的经济地位和利益会决定其在革命中的立场和行为。马克思主义认为，不同阶级由于其在生产关系中的地位不同，决定了其在社会变革中的作用和态度。因此，这篇文章中，教员通过各阶级的经济地位来分析其革命性。通过对各个阶级在经济结构中的地位和利益的分析，他能够判断出哪些阶级在中国革命中会成为主要的革命力量，即朋友；哪些会成为革命的对象或对手，即敌人。</p><p>地主阶级和买办阶级都在经济上占据优势地位。地主阶级通过拥有和出租土地剥削农民，买办阶级则依附外国资本，通过代理商业活动获利。这两个阶级的根本利益在于维护现有的剥削关系和社会秩序，由于他们在现有社会制度中占据优势地位，通常倾向于维护现状，反对革命。因此他们是革命的主要对象。教员指出，这些阶级会反对革命，企图压制和镇压革命力量。</p><p>中产阶级主要指民族资产阶级。民族资产阶级拥有一定规模的生产资料，经营中小型企业或专业工作，他们受到外国资本和买办阶级的压制。由于受到外国资本的压制，民族资产阶级在一定程度上具有革命性，特别是在反对外国资本和买办阶级方面，一部分中产阶级可能支持革命，寻求政治和经济改革以改善自身地位。但是，他们也担心激进的社会变革会影响自身利益，因此另一部分可能因害怕动荡和不稳定而反对激进变革。教员认为其革命性不如工人和农民阶级强烈。</p><p>小资产阶级拥有少量生产资料，如小商店、小作坊等，生活较为稳定，但受市场波动影响较大。由于他们经济地位的不稳定和对改善生活的渴望，小资产阶级可能支持革命。但同时，他们也可能因为害怕动荡而反对激进的革命变革。因此，小资产阶级的革命性具有矛盾性。因此，他们可能支持适度改革，但对激进革命持保留态度。教员认为，小资产阶级是可以争取和团结的力量。</p><p>半无产阶级拥有少量或没有生产资料，主要靠出卖劳动力为生。半无产阶级因为生活不稳定，经济地位低下，往往具有较强的革命性，希望通过革命改变自己的困境。大部分农民，特别是贫农和雇农，他们拥有极少的土地或根本没有土地，生活困苦，受到地主阶级的剥削。贫农和雇农对现有剥削关系的不满，使他们具有较强的革命性。教员认为，农民阶级特别是贫农和雇农，是中国革命的重要力量。</p><p>无产阶级完全没有生产资料，只能靠出卖劳动力为生。无产阶级因受到资本主义制度的剥削和压迫，经济地位低下，具有最强的革命性。他们希望通过革命彻底改变现有的社会制度，争取自身的解放和权益。工人阶级没有生产资料，只能通过出卖劳动力为生，在资本主义制度下受到剥削和压迫。由于他们的经济地位低下，工人阶级具有强烈的革命愿望和动力。教员认为，工人阶级是中国革命的领导力量，是革命的先锋队。</p><h3 id="结论">结论</h3><p>一个阶级的经济地位和利益在很大程度上决定了其革命性。占据优势地位的阶级（如地主阶级和买办阶级）往往反对革命，因为他们在现有制度中获利。而受到剥削和压迫的阶级（如无产阶级和半无产阶级）则具有较强的革命性，渴望通过革命改变现状。中产阶级和小资产阶级的革命性则因其经济地位的复杂性而较为多变，既有可能支持适度变革，也有可能反对激进革命。</p><p>通过对各个阶级的经济地位和利益关系的分析，教员在文章中明确了不同阶级在革命中的立场和作用。这种分析不仅帮助确定了革命的主要动力和对象，也为制定革命策略提供了理论依据。教员强调，工人阶级和农民阶级是革命的主要力量，而地主阶级和买办阶级是革命的主要对手。通过团结和争取小资产阶级和民族资产阶级，形成广泛的革命统一战线，可以推动中国革命的胜利。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cellpose通用细胞分割算法安装与使用</title>
    <link href="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>工作需要，对之前使用的cellpose通用细胞分割算法安装及使用进行整理。</p><span id="more"></span><h2 id="安装-anaconda">1. 安装 Anaconda</h2><p>前往<a href="https://www.anaconda.com/products/individual">Anaconda</a>官网，下载对应版本Anaconda安装包。</p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/anaconda安装.jpg" alt="anaconda安装"><figcaption aria-hidden="true">anaconda安装</figcaption></figure><p>安装包下载完成后，进行安装，记得自己Anaconda的安装路径。</p><h2 id="拉取cellpose-github源码">2. 拉取Cellpose Github源码</h2><p>进入<a href="https://github.com/MouseLand/cellpose">MouseLand/cellpose</a>网站，下载源码至本地，并解压</p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519141559376.png" alt="image-20240519141559376"><figcaption aria-hidden="true">image-20240519141559376</figcaption></figure><h2 id="配置-cellpose-所需环境">3. 配置 Cellpose 所需环境</h2><p>进入anacondaprompt，终端模式下，进入前面下载的github文件路径，我的路径为<code>E:\cellpose-main</code></p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519142841909.png" alt="image-20240519142841909"><figcaption aria-hidden="true">image-20240519142841909</figcaption></figure><p><code>environment.yml</code>为环境的配置文件，将依据该环境文件配置conda环境</p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519143029215.png" alt="image-20240519143029215"><figcaption aria-hidden="true">image-20240519143029215</figcaption></figure><p>终端中运行如下命令，将在本地电脑上部署环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">$  conda <span class="hljs-built_in">env</span> create -f environment.yaml<br></code></pre></td></tr></table></figure><p>等待下载完成，激活新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  conda <span class="hljs-built_in">env</span> list <span class="hljs-comment">#查看当前电脑上已存在的环境</span><br></code></pre></td></tr></table></figure><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519143507689.png" alt="image-20240519143507689"><figcaption aria-hidden="true">image-20240519143507689</figcaption></figure><p>激活环境，并查看当前环境下的安装库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  conda activate cellpose <span class="hljs-comment">#激活cellpose环境</span><br>$  conda list<br></code></pre></td></tr></table></figure><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519143815041.png" alt="image-20240519143815041"><figcaption aria-hidden="true">image-20240519143815041</figcaption></figure><h2 id="运行程序分割图像">4. 运行程序，分割图像</h2><p>安装并运行 jupyter notebook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  conda install jupyter <span class="hljs-comment"># 安装 jupyter notebook</span><br>$  jupyter notebook <span class="hljs-comment"># 运行jupyter notebook</span><br></code></pre></td></tr></table></figure><p>jupyter notebook 界面如下</p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519150243080.png" alt="image-20240519150243080"><figcaption aria-hidden="true">image-20240519150243080</figcaption></figure><p>进入并运行<code>Cellpose\notebooks\run_cellpose_gq.ipynb</code>文件</p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519151628813.png" alt="image-20240519151628813"><figcaption aria-hidden="true">image-20240519151628813</figcaption></figure><p>若报以下错误，按以下解决方法进行解决</p><blockquote><p>错误1：</p></blockquote><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519140446863.png" alt="image-20240519140446863"><figcaption aria-hidden="true">image-20240519140446863</figcaption></figure><blockquote><p>解决错误1：运行<code>conda install scikit-image</code>命令</p></blockquote><blockquote><p>错误2：</p></blockquote><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519140559832.png" alt="image-20240519140559832"><figcaption aria-hidden="true">image-20240519140559832</figcaption></figure><blockquote><p>解决错误2：运行<code>conda install matplotlib</code>命令</p></blockquote><p>待处理图片放在对应文件夹中</p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519150604500.png" alt="image-20240519150604500"><figcaption aria-hidden="true">image-20240519150604500</figcaption></figure><p>运行程序，开始分割图片</p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519150032731.png" alt="image-20240519150032731"><figcaption aria-hidden="true">image-20240519150032731</figcaption></figure><p>分割效果</p><figure><img src="/2024/05/19/cellpose%E9%80%9A%E7%94%A8%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20240519150815144.png" alt="image-20240519150815144"><figcaption aria-hidden="true">image-20240519150815144</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytorch</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PCB绘制全流程</title>
    <link href="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="初识arduino">初识Arduino</h3><p>Arduino是一个受欢迎的开源电子平台，以其易用的硬件和软件而闻名。它特别受到业余爱好者、教育者和原型制作者的青睐，用于创建交互式电子项目。</p><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240412141910042.png" alt="image-20240412141910042"><figcaption aria-hidden="true">image-20240412141910042</figcaption></figure><p><strong>Arduino 的关键特性：</strong></p><ol type="1"><li><p><strong>硬件</strong>：Arduino平台的核心是其系列微控制器板。最常用的板是 ArduinoUno，但还有几种其他变体，设计用于满足不同的需求。这些板配备了一组数字和模拟输入/输出（I/O）引脚，可以与各种扩展板（盾牌）和其他电路接口。</p></li><li><p><strong>软件</strong>：Arduino配备了一个用户友好的集成开发环境（IDE），允许用户编写、编译和上传代码到微控制器。编程语言基于C/C++，对于熟悉这些语言的人来说很直接。</p></li><li><p><strong>社区和资源</strong>：Arduino享有庞大且活跃的社区，创作者在此分享项目、扩展并提供支持。丰富的教程、论坛和第三方资源使新手更容易深入电子学。</p></li></ol><p><strong>Arduino 的应用：</strong></p><p>Arduino 可用于从简单的 DIY家庭项目到更复杂的科学仪器等广泛的应用。常见项目包括机器人、家庭自动化系统、气象监测设备和互动艺术装置。它能够通过简单的代码与传感器、LED、电机和其他电子组件进行交互，使其成为初学者和专业人士的多功能工具。</p><p><strong>教育工具：</strong></p><p>在教育环境中，Arduino提供了一个实用的平台，用于教授编程和电子学的原理。它提供了一种实践方法，帮助学生直观地了解软件如何控制硬件，积极地吸引他们学习和实验。</p><p><strong>Arduino 的影响：</strong></p><p>Arduino平台大大降低了进入电子设计和原型制作的门槛。它继续赋予世界各地的发明家、设计师和制造者权力，使他们能够在不需要广泛的电子知识的情况下将想法变为现实。</p><p>总体而言，Arduino因其简单性、可访问性和广泛的支持社区而受到赞誉，是电子和计算机科学教育领域的重要工具。</p><h3 id="什么是电路板">什么是电路板</h3><p>PCB（印刷电路板）和PCBA（印刷电路板组装）是与电子电路制造相关的术语，但它们指的是过程的不同阶段。</p><ul><li><p><strong>PCB（印刷电路板）</strong></p><p>PCB是一种由非导电材料制成的板，其中嵌入了铜制电路层。这种板是大多数电子设备中支持和接线表面贴装和插座组件的物理基础。PCB的设计目的是通过从层压在非导电基材上的铜片中蚀刻出的导电路径或轨迹，来机械支持和电气连接电子组件。</p></li><li><p><strong>PCBA（印刷电路板组装）</strong></p><p>PCBA指的是已经装配好所有电子组件的PCB。这意味着在PCB制造完成后，所有组件如晶体管、电阻、二极管和集成电路都被焊接到上面，形成一个功能完整的电子设备。板上组件的装配过程通常通过各种技术进行，如表面贴装技术（SMT）或穿孔技术。</p><blockquote><p><strong>PCB与 PCBA的区别</strong></p><ul><li><strong>PCB</strong> 是没有任何组件附着的制造板。</li><li><strong>PCBA</strong> 是包括PCB和所有已安装组件的完成的装配体。</li></ul></blockquote></li></ul><p>从PCB到PCBA的转变涉及装配过程，这是电子设备生产中的一个重要步骤，它将一块裸板转变为能够执行指定电子任务的功能性技术设备。</p><h3 id="元器件贴装技术">元器件贴装技术</h3><p><strong>SMT（表面贴装技术）</strong></p><p>SMT是一种在印刷电路板（PCB）上直接安装组件的方法。使用SMT的组件称为表面贴装设备（SMD），它们比DIP组件小，没有长长的穿过板的引脚。相反，它们有短的引脚或导线，被焊接在板的表面。SMT允许在板的两面放置更多的组件，使得可以构建更紧凑、更高密度的电路。这种方法通常对于大批量生产更快速且更具成本效益。</p><p><strong>DIP（双列直插封装）</strong></p><p>DIP是电子组件的一种封装类型，其特点是有两排平行的电气连接引脚。组件通过钻在PCB上的孔插入，并且引脚在板的另一侧被焊接到焊盘上。DIP组件更大，更易于手动处理和焊接，适合于原型设计和小规模生产。它们也适用于需要拆卸和更换组件的情况，因为它们可以装配到插座连接器中。</p><blockquote><p>SMT与DIP的区别</p><ul><li><strong>组件放置</strong>：SMT组件安装在板的表面，而DIP组件则插入PCB的孔中。</li><li><strong>大小和密度</strong>：SMT支持更小的组件和更高的电路密度，适合现代紧凑型电子设备。DIP组件更大，占用更多PCB空间。</li><li><strong>生产适应性</strong>：由于SMT在效率和劳动成本较低方面的优势，它更受大批量自动生产的青睐。DIP则因其组装和修改更容易，通常用于原型和小批量项目。</li><li><strong>组装复杂性</strong>：与DIP相比，SMT需要更复杂的设备和设置进行组装。</li></ul></blockquote><p>总之，选择SMT还是DIP取决于正在制造的电子设备的具体需求，包括大小、生产量和组装技术的考虑。</p><h3 id="电路设计资源">电路设计资源</h3><ul><li><strong>PCB设计工具</strong>AD、PADS、Candence、Kicad、LCEDA等等</li><li><strong>器件选型</strong> 网络搜索、官网、立创商城等</li><li><strong>硬件设计参考(器件参数、电路图等)</strong><ol type="1"><li>网络搜索</li><li>头部公司规格书参考(TI、ADI、国内中高端品牌等)</li><li>开源硬件平台(立创EDA自带)、其他著名硬件论坛等</li></ol></li></ul><h3 id="pcb设计工具">PCB设计工具</h3><ul><li>单层、双层电路板(快速设计)推荐LCEDA(立创EDA)</li><li>立创商城、立创EDA一体，选型到设计一条龙</li><li>大部分封装(元器件的PCB样式)不用重新设计，直接使用</li><li>连接嘉立创下单平台后，可以选型、设计、生产一条龙</li><li>免费软件，没有版权问题</li><li>Kicad也是免费软件，但是仅作为PCB设计软件，功能较为单一</li><li>其他主流开发软件均为商业软件，价格较贵，有版权问题。</li></ul><h3 id="pcb设计及绘制流程">PCB设计及绘制流程</h3><h4 id="电路初步设计">1. <strong>电路初步设计</strong></h4><ol type="1"><li><p><strong>主器件选型及其他器件选型</strong></p><p>依据电路功能，网上搜索参考电路，确定模块电路的主要器件。电路参考可通过<code>Bing图片搜索</code>、<a href="https://oshwhub.com/">立创开源硬件库</a>、<code>元器件产品规格书</code>进行查找</p><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240412212453460.png" alt="image-20240412212453460"><figcaption aria-hidden="true">image-20240412212453460</figcaption></figure></li><li><p><strong>筛选基础库</strong></p><p>按照原则在立创商城中筛选器件，其中器件选型原则：</p><ol type="1"><li>销量</li><li>库存</li><li>封装是否合适</li></ol><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419150754937.png" alt="image-20240419150754937"><figcaption aria-hidden="true">image-20240419150754937</figcaption></figure><blockquote><p><strong>点击规格书，规格书关注点：</strong></p><ul><li>简介，即器件实现的功能</li><li>极限参数 &amp; 推荐工作条件</li><li>参考电路图(可以作为后面原理图的参考)</li></ul></blockquote></li></ol><h4 id="绘制原理图及pcb绘制工作全流程">2.绘制原理图及PCB绘制工作全流程</h4><p><strong>新建工程文件名要求</strong>：字母+数字+下划线，尽量标准化</p><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240418165600401.png" alt="image-20240418165600401"><figcaption aria-hidden="true">image-20240418165600401</figcaption></figure><p><strong>工具栏中包括原理图与PCB</strong></p><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419151132171.png" alt="image-20240419151132171"><figcaption aria-hidden="true">image-20240419151132171</figcaption></figure><p><strong>原理图中添加器件时，搜索时加上'<code>基础库</code>'关键字（扩展库SMT贴片需要加钱）</strong></p><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240418170215587.png" alt="image-20240418170215587"><figcaption aria-hidden="true">image-20240418170215587</figcaption></figure><p><strong>工作全流程：</strong></p><ul><li>画原理图</li></ul><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419151959439.png" alt="image-20240419151959439"><figcaption aria-hidden="true">image-20240419151959439</figcaption></figure><ul><li>导入pcb</li></ul><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419152025454.png" alt="image-20240419152025454"><figcaption aria-hidden="true">image-20240419152025454</figcaption></figure><ul><li>放外框</li></ul><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419152737593.png" alt="image-20240419152737593"><figcaption aria-hidden="true">image-20240419152737593</figcaption></figure><ul><li>布局 &amp; 走线（走线时'Tab'可以修改线宽）</li></ul><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419152827521.png" alt="image-20240419152827521"><figcaption aria-hidden="true">image-20240419152827521</figcaption></figure><blockquote><p>线宽大小取决于电流大小，线也不是越宽越好，如，高频电路中，线粗了会引入高频干扰（一般不超过焊盘的宽度）</p></blockquote><ul><li>放置接口焊盘</li></ul><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419152952449.png" alt="image-20240419152952449"><figcaption aria-hidden="true">image-20240419152952449</figcaption></figure><blockquote><p>过孔：一般内直径3.2mm，外直径5mm</p></blockquote><ul><li>放pcb名称、版本、日期、接口符号正负、输入输出</li></ul><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419153046222.png" alt="image-20240419153046222"><figcaption aria-hidden="true">image-20240419153046222</figcaption></figure><p>绘制好的3D电路板展示</p><figure><img src="/2024/04/12/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%AD%A6%E4%B9%A0/image-20240419153136796.png" alt="image-20240419153136796"><figcaption aria-hidden="true">image-20240419153136796</figcaption></figure><h3 id="硬件功能框架图">硬件功能框架图</h3><p>核心芯片或模块 电源部分 输入接口 输出控制接口 通讯接口 指示部分 天线其他模块</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记-硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能对话：ChatGPT的艺术</title>
    <link href="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <url>/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p>曾几何时，和机器对话仿佛是在和一堵墙进行沟通——你可能得到回声，但却难觅灵魂。然而，随着时间的推进，科技的发展，现在我们迎来了ChatGPT——一个不仅能聆听还能理解，甚至能分享笑容的虚拟伙伴。但ChatGPT的真正魅力，不仅仅在于它能给出什么样的回答，而更在于你如何与它互动。本篇文章旨在探索如何通过巧妙设计的提示（Prompts），让ChatGPT变身为你的私人顾问、故事讲述者，乃至思考伙伴。现在，让我们一起跳进这个魔法般的对话世界，看看如何使ChatGPT的对话不仅仅是交流，更是一场思维的飞跃！</p><span id="more"></span><h2 id="prompt-engineering艺术与技术的融合">1. PromptEngineering：艺术与技术的融合</h2><h3 id="什么是prompt-engineering">1.1 什么是Prompt Engineering？</h3><p>PromptEngineering，或称提示工程，是一种艺术和技术的结合，旨在通过精确且富有创意的提示，指导ChatGPT产生你期望的回答或动作。它不仅仅是问一个问题那么简单，而是关于如何构建那个问题，以及如何通过你的问题引导出更深层次的交流和创造性的思维。</p><h3 id="提示的基本结构">1.2 提示的基本结构</h3><p>一个有效的提示通常包括三个部分：角色（Role）、目标（Goal）和上下文（Context）。</p><ul><li><strong>角色（Role）</strong>：定义ChatGPT在这次对话中扮演的角色，比如旅游顾问、编程老师或是故事讲述者。</li><li><strong>目标（Goal）</strong>：明确你想要ChatGPT实现的目标，如提供旅游建议、解答编程疑惑或讲述一个故事。</li><li><strong>上下文（Context）</strong>：提供足够的背景信息，使ChatGPT能够在适当的上下文中给出回答。</li></ul><p>掌握这三个元素的有效结合，可以极大提升与ChatGPT的互动效率和质量。</p><h3 id="实践示例">1.3 实践示例</h3><p>假设你希望ChatGPT帮你规划一次旅行，你可以这样构建你的提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定角色</span><br>You are a travel consultant AI, helping customers find their perfect vacation destinations.<br><span class="hljs-comment"># 提出目标</span><br>Please provide five recommendations <span class="hljs-keyword">for</span> family-friendly vacation spots <span class="hljs-keyword">in</span> Europe that are suitable <span class="hljs-keyword">for</span> a 7-day trip.<br><span class="hljs-comment"># 添加上下文</span><br>Consider factors such as cultural experiences, outdoor activities, and budget-friendly options.<br></code></pre></td></tr></table></figure><p>这样的提示不仅清晰地界定了ChatGPT的角色、你的目标以及需要考虑的上下文信息，从而让AI能够提供更加精准和实用的建议。</p><h2 id="提升交流效率的策略">2. 提升交流效率的策略</h2><p>与ChatGPT的互动不仅仅限于简单的问答。它能帮助你完成复杂的任务、解答疑难问题，甚至参与创造性的项目。为了使这些交流尽可能高效，以下是一些实用策略。</p><h3 id="格式化引导精准定制你的chatgpt体验">2.1格式化引导：精准定制你的ChatGPT体验</h3><p>格式化引导是与ChatGPT进行高效交流的关键技术。通过明确指示ChatGPT的角色、目标以及上下文，你可以引导这个AI以最接近你期望的方式回应。为了让AI按照你期望的格式，你可以为他提供示例，便于它更好的理解。</p><p>假设你正在规划夏日旅行，需要ChatGPT提供一些创意建议。你可以这样构建你的提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定角色</span><br>You are a travel agency Al, helping customers find their perfect travel destination.<br><span class="hljs-comment"># 提供目标</span><br>Give me five great travel destinations <span class="hljs-keyword">for</span> this summer.<br></code></pre></td></tr></table></figure><p>通过这种方式，你不仅定义了ChatGPT的角色（AI旅行助手），还设定了具体目标（提供旅游地点的主题建议）。这样构建的提示确实能够获得有用回答。可能我们还想知道平均温度、光照时间，可以提供输出的格式要求及相关示例。这样精心构建的提示能够大大提高获得有用和创新回答的几率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提供约束， 给出输出的格式要求</span><br>Format your response like this:<br>Location:<br>Best time to visit:<br>Avg. temperature (Celsius):<br>Hours of Sunshine:<br>Rainy Days per Month:<br><span class="hljs-comment"># 提供示例</span><br>An example output could look like this:<br>Location: Seychelles<br>Best time to visit: Feb-Apr<br>Avg. temperature(Celsius): 28<br>Hours ofSunshine per Day: 7<br>Rainy Days per Month: 5.5<br></code></pre></td></tr></table></figure><ul><li>示例引导输出</li></ul><p>这种方式与上面类似，也是通过提供示例，让chatgpt模仿你的结构和风格进行输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提供目标</span><br>Write a tweet that explains the core idea behind ChatGPT. Use a similar tone &amp; structure as i <span class="hljs-keyword">do</span> <span class="hljs-keyword">in</span> my regular tweets. But don<span class="hljs-string">&#x27;t use the content.</span><br><span class="hljs-string"># 提供示例</span><br><span class="hljs-string">Here&#x27;</span>s an example:<br>ChatGPT and all those Al tools + projects that build up on them (e.g., AutoGPT) are all amazing and truly powerful.<br>And learning how to use them <span class="hljs-keyword">in</span> an efficient way is indeed important &amp; useful.<br>But all those <span class="hljs-string">&quot;You must learn this tool&quot;</span>, <span class="hljs-string">&quot;Top 20 Al tools you must not miss&quot;</span> or <span class="hljs-string">&quot;You&#x27;re missing out if you&#x27;re not doing XYZ&#x27; etc posts are just ridiculous.</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">Write a tweet that explains the core idea behind ChatGPT. Use a similar tone &amp; structure as l <span class="hljs-keyword">do</span> <span class="hljs-keyword">in</span> my regular tweets. But don<span class="hljs-string">&#x27;t use the content.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Here are two example tweets:</span><br><span class="hljs-string">1) ChatGPT and all those Al tools + projects that build up on them (e.g., AutoGPT) are all</span><br><span class="hljs-string">amazing and truly powerful.</span><br><span class="hljs-string">And learning how to use them in an efficient way is indeed important &amp; useful.</span><br><span class="hljs-string">But all those &quot;You must learn this tool&quot;, &quot;Top 20 Al tools you must not miss&quot; or &quot;You&#x27;</span>re missing out <span class="hljs-keyword">if</span> you<span class="hljs-string">&#x27;re not doing XYZ etc. posts are just ridiculous.</span><br><span class="hljs-string"></span><br><span class="hljs-string">2) Writing this book was quite a journey and a lot of fun! </span><br><span class="hljs-string">I took great care to pick understandable and helpful examples, include many practice</span><br><span class="hljs-string">exercises and explain all core concepts in-depth.</span><br><span class="hljs-string">The book covers the latest versions of React and React Router(6.4+)</span><br></code></pre></td></tr></table></figure><ul><li>格式化输出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">understanding their basic principles can help dispel fears and demystify these powerful Al</span><br><span class="hljs-string">technologies. As we continue to explore and develop Al, it&#x27;s crucial to remain curious and learn about</span><br><span class="hljs-string">the advancements in this ever-evolving field, embracing the potential benefits that responsible Al</span><br><span class="hljs-string">can bring to our lives.</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br>Summarize the above article, starting like this:<br><span class="hljs-comment"># 指定输出格式要求</span><br>The key takeaways ofthe article are:<br>-<br></code></pre></td></tr></table></figure><h3 id="ask-before-answer-prompt先问后答深化理解与探索">2.2Ask-before-Answer Prompt（先问后答）：深化理解与探索</h3><p>先问后答提示是一种高级的互动策略，旨在通过首先让ChatGPT提出问题来深化对话的理解和探索。这种方法特别适用于复杂的话题或当你希望ChatGPT帮助你更全面地思考问题时。</p><h4 id="什么是先问后答提示">什么是先问后答提示？</h4><p>先问后答提示是一种提示策略，其中用户首先引导ChatGPT提出一系列相关问题，然后再回答这些问题。这种方法促使ChatGPT在提供解决方案之前，进行更深入的思考和探索，有助于揭示问题的不同方面和潜在的解决策略。</p><h4 id="为什么使用先问后答提示">为什么使用先问后答提示？</h4><ul><li><strong>促进深度理解</strong>：通过要求ChatGPT提问，你可以评估它对话题的理解程度，同时鼓励它探索问题的更多维度。</li><li><strong>发掘新视角</strong>：ChatGPT提出的问题可能揭示你未曾考虑过的观点或信息，从而丰富了对话题的理解。</li><li><strong>增加互动性</strong>：这种提示方式增加了对话的互动性，使聊天体验更加动态和有趣。</li></ul><h4 id="应用示例">应用示例</h4><p>假设你想要chatgpt辅助你写一篇博客。你可以使用先问后答提示，如下：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定扮演角色</span><br>You are an experienced travel blogger with a focus on destinations <span class="hljs-keyword">for</span> nature &amp; activity lovers.<br><span class="hljs-comment"># 提供目标</span><br>Your goal is to write a blog post about snorkeling at Champagne Beach on Dominica.<br><span class="hljs-comment"># 提供约束及额外要求和信息</span><br>The post should be no longer than 750 characters and target a broad audience that goes beyond divers or nature enthusiasts.<br><span class="hljs-comment"># 让GPT询问我相关问题从而达到完善Prompt的目标</span><br>Before answering,l want you to first ask <span class="hljs-keyword">for</span> any extra information that helps you produce a better<br>answer. lf you got no questions, please provide the answer instead.<br></code></pre></td></tr></table></figure></p><p>通过使用先问后答提示，你可以激发更深层次的对话和探索，无论是在学术研究、创意思考还是解决实际问题中，都能发挥出意想不到的效果。希望这段内容能帮助你更有效地使用这种策略。</p><h3 id="perspective-prompting-视角引导法扩展思维视野">2.3 PerspectivePrompting （视角引导法）：扩展思维视野</h3><p>视角引导法是一种通过改变提问视角来引发不同回答的技巧，旨在通过引入新的视角或假设条件来探索问题的多个方面。这种方法特别适合于促进创造性思维、解决问题和深入理解复杂概念。</p><h4 id="什么是视角引导法">什么是视角引导法？</h4><p>视角引导法要求在构建提示时，明确指出从哪个特定视角来探讨问题或话题。这可以是从不同人的视角，如专家、历史人物，或者是从非人类角度，如物品、概念等。通过这种方式，可以挖掘出通常不会考虑到的洞见和解答。</p><h4 id="视角引导法的优势">视角引导法的优势</h4><ul><li><strong>促进深入理解</strong>：通过考虑不同的视角，可以更全面地理解问题的各个维度和影响因素。</li><li><strong>激发创新思维</strong>：不同的视角可能会激发出创新的解决方案和想法。</li><li><strong>增强对话的丰富性</strong>：引入新的视角可以使对话更加多样化和丰富，提高互动的趣味性。</li></ul><p><img src="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/image-20240403112130598.png"></p><h3 id="情感提示">2.4 情感提示</h3><p>情感提示是一种特别的对话策略，旨在通过引入情感元素来丰富与ChatGPT的互动。这种方法适用于需要表达或理解情感、建立更有人情味的交流环境时。</p><h4 id="什么是情感提示">什么是情感提示？</h4><p>情感提示涉及到在提示中明确表达情绪或情感状态，或者要求ChatGPT从特定的情感视角回答问题。这种策略的目的是使对话更加生动、真实，同时探索和理解情感对人类决策和认知的影响。</p><h4 id="应用示例-1">应用示例</h4><p>假设你想要chatgpt辅助你给同事写一封邮件。你只是想表达对其工作的不满，并不是不尊重他本人，因此，你可以指示gpt按照特定的情感要求进行回答，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 定义目标</span><br>Write an email response to the following customer complaint:<br><span class="hljs-string">&quot;Your products are garbage. The new chair broke 1 day after it was shipped. You&#x27;ll hear from my lawyer.&quot;</span><br><span class="hljs-comment"># 要求考虑情感</span><br>when drafting the response, take the sentiment and tone of the customer into account.<br></code></pre></td></tr></table></figure><h3 id="其他辅助策略">2.5 其他辅助策略</h3><p>ChatGPT的一大优点是能够进行迭代式对话。如果初次回答未能满足你的需求，可以继续提问或提供更多上下文，逐步引导ChatGPT 给出更符合预期的答案。</p><ul><li><strong>问题分割</strong>；让其帮助你将一个问题分割成几个问题，并逐步解决</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 定义角色</span><br>You are an experienced online blogger and digital marketer. <span class="hljs-built_in">ln</span> addition, you have a deep expertise <span class="hljs-keyword">in</span> machine learning, artificial intelligence and specifically GPT models as well as large language models (LLMs)<br><br><span class="hljs-comment"># 博客是关于什么的，及受众是谁</span><br>Help me create a blog post about the internal workings of ChatGPT by providing a list of important keywords.<br><br>The blog post should describe <span class="hljs-built_in">which</span> models get used internally by ChatGPT. lt should explain how those models were trained. All key concepts should be explained <span class="hljs-keyword">for</span> a non-expert target audience.<br><span class="hljs-comment"># 进行问题分割</span><br>Split this task into multiple steps and <span class="hljs-keyword">then</span> start with the first step.<br></code></pre></td></tr></table></figure><ul><li><strong>GPT生成指令</strong>；如果你不知道如何生成生成好的prompt，你也可以让他帮你生成，给他一个期望输出，让其反推。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">You are ChatGPT - an advanced Al, aiming to <span class="hljs-built_in">help</span> <span class="hljs-built_in">users</span> generate content.<br><br>Your goal is to write a prompt that could be used by ChatGPT <span class="hljs-built_in">users</span>.<br><br>Given the below example output, <span class="hljs-built_in">which</span> prompt would<span class="hljs-string">&#x27;ve yielded a similar output?</span><br><span class="hljs-string"></span><br><span class="hljs-string">Example output:</span><br><span class="hljs-string">&#x27;</span>Al will not entirely replace web developers, but it will certainly transform the field. As Al and automation technologies <span class="hljs-built_in">continue</span> to advance, we can expect them to handle more routine and repetitive tasks, such as basic coding and layout design. This will <span class="hljs-built_in">enable</span> web developers to focus more on creative and strategic aspects of their work.<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>有意义的额外补充</li></ul><p><img src="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/image-20240405205133565.png"></p><h3 id="小试牛刀">小试牛刀</h3><p>理论部分已经讲完了，何不来小试牛刀一下呢，自己构思一下如何完成这小任务</p><p><img src="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/image-20240403112629682.png"></p><h2 id="超越常规的使用方法">3. 超越常规的使用方法</h2><p>ChatGPT不仅是一个强大的信息查询工具，它还可以成为你的创造伙伴。无论是编写代码、撰写文章，还是创作音乐，通过精心设计的提示，ChatGPT能够在各种创造性任务中发挥巨大作用。</p><ul><li>搜索引擎</li><li>总结文本信息</li><li>翻译 &amp; 调整语气</li><li>校对 &amp; 增强文本</li><li>编写代码脚本</li><li>创造性写作</li></ul><h3 id="实践示例-1">3.1 实践示例</h3><p>假设我希望ChatGPT帮我完成绩点转换的工作，可以按照如下的工作流实现：</p><ol type="1"><li><p>上传绩点换算规则，确保其准确的理解规则</p><p><img src="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/image-20240406180741318.png"></p><p>检查，发现其确实正确的理解了换算的标准</p><p><img src="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/image-20240406182333823.png"></p></li><li><p>给他自己的成绩单，让其生成一个excel。结果发现他做的还不错</p><p><img src="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/image-20240407094254076.png"></p></li><li><p>最后，便是绩点转换；还是只需将文件传输给他，提出自己的要求，静静的等待</p></li></ol><p><img src="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/image-20240406182907025.png"></p><ol start="4" type="1"><li>这样，一个符合我们要求的excel文件就得到了，是不是很简单！</li></ol><p><img src="/2024/04/05/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D%EF%BC%9AChatGPT%E7%9A%84%E8%89%BA%E6%9C%AF/image-20240406183057213.png"></p><p>试想，这样一个工作如果自己按部就班做，光是创建excel成绩单就得很久。无论从事什么工作，ChatGPT可以作为一个卓越的助手，帮助提高工作效率。</p><h2 id="结语">结语</h2><p>ChatGPT的出现开启了人类与机器交流的新篇章。通过掌握提示工程的艺术与科学，我们不仅能够提高与ChatGPT的互动效率，还能开启更多创新和创造的可能性。随着技术的不断进步，我们有理由相信，未来的对话将更加智能、个性化和有趣。</p><p>希望本文能帮助你更好地理解和使用ChatGPT，开启一段充满创新和乐趣的对话之旅。记住，与ChatGPT的每一次对话，都是一次探索未知的机会。</p><h2 id="reference">Reference</h2><ol type="1"><li>https://www.bilibili.com/video/BV13s4y1M7TJ/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=7fed059ba9905c28f73d20ac51cfd427</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ChatGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信聊天记录分析：用Python描绘我们之间的故事</title>
    <link href="/2024/02/02/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%88%86%E6%9E%90/"/>
    <url>/2024/02/02/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>微信聊天记录是我们日常交流的点滴记录，其中蕴藏着许多有趣的信息。尤其是对于热恋中的情侣，微信聊天记录包含着很多甜蜜的对话，每一句背后都承载着深深的感情。在这个教程中，我将教你如何用Python对微信聊天记录进行分析与可视化，通过数据描绘独自属于你们之间的点滴故事。跟着这个教程，让我们一起用代码探寻爱情的奇妙之处！</p><span id="more"></span><h2 id="一准备数据解锁感情密码">一、准备数据，解锁感情密码</h2><p>不同品牌的手机获取的微信聊天记录的方式会有所不同，作者的手机是小米的，这部分的实现参考了网上大神的博文</p><p>参考资料：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/212901830">2021最详细微信聊天记录备份＆免费导出方案（全平台）</a></li><li><a href="https://godweiyang.com/2019/08/09/wechat-explore/">微信聊天记录导出为电脑txt文件教程| 韦阳的博客 (godweiyang.com)</a></li></ul><p>小米手机一次会导出所有人的聊天记录，因此，若需要导出本人和某人的特定聊天记录，需要将其他聊天记录清空，然后利用手机自带的备份功能将聊天记录备份并导出。</p><h2 id="二深情分析揭秘爱情密码">二、深情分析，揭秘爱情密码</h2><p>首先，我们需要借助一些神奇的Python库和模块，包括pandas、numpy、jieba、wordcloud、matplotlib等，为分析之旅做好准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">from</span> wordcloud <span class="hljs-keyword">import</span> WordCloud, ImageColorGenerator<br><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> imageio <span class="hljs-keyword">import</span> imread<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> time<br></code></pre></td></tr></table></figure><p>在这一步，我们将打开我们心灵深处的对话，读取微信聊天记录，准备解锁感情密码。首先，我们需要读取微信聊天记录的文本文件以及一个包含禁止词的文件。禁止词表中的词将不会纳入词云分析中。穿越禁止词，更能发现隐藏在文字背后的真情。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义禁止词</span><br>stop_word_filename = <span class="hljs-string">&#x27;./data/stopwords.txt&#x27;</span><br>stop_word = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> codecs.<span class="hljs-built_in">open</span>(stop_word_filename, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>).readlines()]<br><br><span class="hljs-comment"># 读取聊天记录</span><br>file = codecs.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;./__message.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>content = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines()]<br>contentCut = <span class="hljs-string">&#x27;\n&#x27;</span>.join(content)<br></code></pre></td></tr></table></figure><h2 id="中文分词与词云诉说爱情的美好">中文分词与词云，诉说爱情的美好</h2><p>用jieba进行中文分词，生成绚丽的词云图，可以展现你们聊天记录中的高频词汇。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 中文分词</span><br>segs = jieba.cut(contentCut)<br>words = [seg.strip().lower() <span class="hljs-keyword">for</span> seg <span class="hljs-keyword">in</span> segs <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(seg.strip()) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> seg.strip().lower() <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stop_word]<br><br><span class="hljs-comment"># 词云分析</span><br>word_df = pd.DataFrame(&#123;<span class="hljs-string">&quot;word&quot;</span>: words&#125;)<br>word_freq = word_df[<span class="hljs-string">&#x27;word&#x27;</span>].value_counts()<br><br><span class="hljs-comment"># 生成词云</span><br>word_list = <span class="hljs-string">&#x27; &#x27;</span>.join(words)<br>mask = imread(<span class="hljs-string">r&#x27;./pic/love.png&#x27;</span>)<br>wordcloud = WordCloud(font_path=<span class="hljs-string">r&#x27;./font/STFangSong.ttf&#x27;</span>, background_color=<span class="hljs-string">&quot;White&quot;</span>, mask=mask, random_state=<span class="hljs-number">100</span>, max_font_size=<span class="hljs-number">100</span>)<br>wordcloud.fit_words(<span class="hljs-built_in">dict</span>(word_freq[:<span class="hljs-number">80</span>]))<br>image_colors = ImageColorGenerator(mask)<br><br><span class="hljs-comment"># 绘制词云图</span><br>plt.figure()<br>plt.imshow(wordcloud.recolor(color_func=image_colors))<br>plt.savefig(<span class="hljs-string">&#x27;wordcloud_emotion.png&#x27;</span>, dpi=<span class="hljs-number">500</span>)<br>plt.axis(<span class="hljs-string">&quot;off&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>除了词云，还可以读取聊天记录数据，统计消息数、表情包、图片、语音等信息，了解你们之间的交流习惯。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取聊天记录数据</span><br>df = pd.read_csv(<span class="hljs-string">r&#x27;./LN一周年.csv&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>chat_data = df.dropna(axis=<span class="hljs-number">0</span>, how=<span class="hljs-string">&#x27;all&#x27;</span>, subset=<span class="hljs-literal">None</span>, inplace=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 统计消息数</span><br>textNum = (chat_data.<span class="hljs-built_in">type</span> == <span class="hljs-number">1</span>).<span class="hljs-built_in">sum</span>()<br>EmojisNum = (chat_data.<span class="hljs-built_in">type</span> == <span class="hljs-number">47</span>).<span class="hljs-built_in">sum</span>()<br>picNum = (chat_data.<span class="hljs-built_in">type</span> == <span class="hljs-number">3</span>).<span class="hljs-built_in">sum</span>()<br>vioceNum = (chat_data.<span class="hljs-built_in">type</span> == <span class="hljs-number">34</span>).<span class="hljs-built_in">sum</span>()<br>videoNum = (chat_data.<span class="hljs-built_in">type</span> == <span class="hljs-number">43</span>).<span class="hljs-built_in">sum</span>()<br>linkNum = (chat_data.<span class="hljs-built_in">type</span> == <span class="hljs-number">49</span>).<span class="hljs-built_in">sum</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;在我们的聊天记录中，共有<span class="hljs-subst">&#123;textNum&#125;</span>条消息，其中包含<span class="hljs-subst">&#123;EmojisNum&#125;</span>个表情包，<span class="hljs-subst">&#123;picNum&#125;</span>张图片，<span class="hljs-subst">&#123;vioceNum&#125;</span>条语音，<span class="hljs-subst">&#123;videoNum&#125;</span>段视频，<span class="hljs-subst">&#123;linkNum&#125;</span>个链接。&#x27;</span>)<br></code></pre></td></tr></table></figure><p>太单调了？没有创意？如果这样呢，尽情发挥你的想象吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计消息数</span><br>textNum = np.array([<span class="hljs-built_in">len</span>(content.strip()) <span class="hljs-keyword">for</span> content <span class="hljs-keyword">in</span> chat_data[chat_data.<span class="hljs-built_in">type</span>==<span class="hljs-number">1</span>].content]).<span class="hljs-built_in">sum</span>() <span class="hljs-comment">#文本字数</span><br>textMax = np.array([<span class="hljs-built_in">len</span>(content.strip()) <span class="hljs-keyword">for</span> content <span class="hljs-keyword">in</span> chat_data[chat_data.<span class="hljs-built_in">type</span>==<span class="hljs-number">1</span>].content]).<span class="hljs-built_in">max</span>() <span class="hljs-comment">#最长文本的字数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;截止%d-%02d-%02d，\n我们共发送了%d条消息，\n由泉儿的%d条，娜娜的%d条信息组成；\n其中文字有%d条，共计%d个字，\n大约聊出了%d本小王子，\n最长的一条足足有%d字，相当于%d篇高考作文&#x27;</span><br>      %(time.localtime(chat_data.iloc[-<span class="hljs-number">1</span>,[<span class="hljs-number">6</span>]]//<span class="hljs-number">1000</span>)[<span class="hljs-number">0</span>], time.localtime(chat_data.iloc[-<span class="hljs-number">1</span>,[<span class="hljs-number">6</span>]]//<span class="hljs-number">1000</span>)[<span class="hljs-number">1</span>], time.localtime(chat_data.iloc[-<span class="hljs-number">1</span>,[<span class="hljs-number">6</span>]]//<span class="hljs-number">1000</span>)[<span class="hljs-number">2</span>],<br>        chat_data.shape[<span class="hljs-number">0</span>], chat_data.isSend.value_counts()[<span class="hljs-number">1</span>], chat_data.isSend.value_counts()[<span class="hljs-number">0</span>], <br>       (chat_data.<span class="hljs-built_in">type</span>==<span class="hljs-number">1</span>).<span class="hljs-built_in">sum</span>(), textNum, <br>       textNum/<span class="hljs-number">17600</span>, textMax, textMax/<span class="hljs-number">800</span>)<br>     )<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">截止2024-01-17，<br>我们共发送了66826条消息，<br>由我的25238条，你的41588条信息组成；<br>其中文字有59077条，共计350658个字，<br>大约聊出了19本小王子，<br>最长的一条足足有813字，相当于1篇高考作文<br></code></pre></td></tr></table></figure><h3 id="聊天频率分析">3.2 聊天频率分析</h3><p>最后，通过时间分布图，将感情的旅程用数据诉说，描绘你们在不同时间段的聊天频率。在开始聊天频率分析之前，我们要知道每条信息的发送时间，“createTime”栏中的数据似乎并不是我们想要的信息，需对其进行转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 时间转换</span><br>t = chat_data.loc[<span class="hljs-number">2</span>:][<span class="hljs-string">&#x27;createTime&#x27;</span>]//<span class="hljs-number">1000</span><br><span class="hljs-comment"># time.localtime(t)</span><br>year = [time.localtime(ti)[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> ti <span class="hljs-keyword">in</span> t]<br>month = [time.localtime(ti)[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> ti <span class="hljs-keyword">in</span> t]<br>day = [time.localtime(ti)[<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> ti <span class="hljs-keyword">in</span> t]<br>hour = [time.localtime(ti)[<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> ti <span class="hljs-keyword">in</span> t]<br>minute = [time.localtime(ti)[<span class="hljs-number">4</span>] <span class="hljs-keyword">for</span> ti <span class="hljs-keyword">in</span> t]<br><span class="hljs-comment"># sec = [time.localtime(ti)[5] for ti in t] </span><br>week = [time.localtime(ti)[<span class="hljs-number">6</span>] <span class="hljs-keyword">for</span> ti <span class="hljs-keyword">in</span> t]<br>time_freq = pd.DataFrame(&#123;<span class="hljs-string">&#x27;year&#x27;</span>:year, <span class="hljs-string">&#x27;month&#x27;</span>:month, <span class="hljs-string">&#x27;day&#x27;</span>:day, <span class="hljs-string">&#x27;hour&#x27;</span>:hour, <span class="hljs-string">&#x27;min&#x27;</span>:minute, <span class="hljs-string">&#x27;week&#x27;</span>:week&#125;)<br>time_freq<br></code></pre></td></tr></table></figure><p>做完这一切，你就可以分析任意时段的聊天频率了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 绘制聊天频率分布图</span><br>plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">8</span>))<br>plt.subplot(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>sns.countplot(x=<span class="hljs-string">&#x27;month&#x27;</span>, data=time_freq)<br>plt.title(<span class="hljs-string">&#x27;月度聊天频率&#x27;</span>)<br><br>plt.subplot(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>sns.countplot(x=<span class="hljs-string">&#x27;hour&#x27;</span>, data=time_freq)<br>plt.title(<span class="hljs-string">&#x27;小时聊天频率&#x27;</span>)<br><br>plt.subplot(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>sns.countplot(x=<span class="hljs-string">&#x27;week&#x27;</span>, data=time_freq)<br>plt.title(<span class="hljs-string">&#x27;星期聊天频率&#x27;</span>)<br><br>plt.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学术论文作图：让你的研究“图”兴致勃勃</title>
    <link href="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/"/>
    <url>/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>在学术研究的世界里，一图胜千言。正确的图表不仅可以使你的论文更加吸引人，还可以帮助读者更好地理解你的研究成果。但是，很多研究新手在论文作图方面感到迷茫。本文将探讨如何有效地规划实验、处理数据，并创建能够准确传达你研究结果的图表。</p><h2 id="实验规划-你的图表的起点">实验规划 —— 你的图表的起点</h2><h3 id="从结果导向出发">1.1 从结果导向出发</h3><p>想要画出有说服力的图表，得先从实验规划说起。每个图表都应该有个“灵魂”——即核心思想。比如你研究的是刚度如何影响癌细胞的侵袭/迁移能力，那么刚度就是你的控制变量，而侵袭能力则是你希望通过图表展现的结果。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407084216886.png"></p><p>记住，每张图都是在讲一个故事。它可能是一个关于细胞运动的史诗，或者是一个关于化学反应速率的侦探故事。关键在于，你需要明白你的实验目的，规划你的实验以此为导向。</p><h3 id="借鉴别人的方案">1.2 借鉴别人的方案</h3><p>不要羞于借鉴别人的实验设计。在Google Scholar和Web ofScience上你可以找到无数的灵感。有时候，一个好的实验规划就像是艺术作品，需要从不同的角度和不同的人那里获取灵感。借鉴他人的方案，并不意味着你的研究缺乏创新，而是站在巨人的肩膀上，看得更远。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240405141537515.png"></p><h2 id="数据处理-你的图表的骨架">数据处理 —— 你的图表的骨架</h2><h3 id="及时处理分门别类">2.1 及时处理，分门别类</h3><p>数据处理这件事，要迅速，要有条不紊。创建一个“数据宝库”——一个专门的PPT或文件夹，将你所有的关键数据和结果汇总在一处。给文件夹取个好名字，别再用“新建文件夹”这样的命名了。每当你需要画图或查找数据时，你会感谢今天井然有序的自己。</p><p><strong>及时数据处理：</strong>实验结束后立即处理您的数据，确保没有忽略或遗忘任何关键细节。这种做法对于维持您的发现的准确性和相关性至关重要。</p><p><strong>数据收集和管理</strong>：使用逻辑和一致的命名约定来组织你的数据文件，这样在需要时你可以轻松找到它们。例如，使用描述性的文件名，如<code>2024-01-DrugA-DosageResponse.csv</code>，而不是<code>newdata1.csv</code>。</p><p><strong>分离软件和数据：</strong>通过将软件和数据保存在不同的文件夹中，您可以在软件更新或重新安装期间保护您的数据不被错放或丢失。这个简单而有效的策略确保了您数据的长期保存。</p><p><strong>Readme.txt的力量：</strong>对于复杂的数据集，readme.txt文件就像是一盏指路灯，指导读者了解您的数据的结构和内容。这不仅有助于理解，还有助于保存数据的上下文和重要性。</p><p><strong>汇总PPT：</strong>汇总主要结果，作为资料库，方便在写文章时查阅，简化了写作过程，减少了反复查看原始数据的需要。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407084413684.png"></p><h3 id="数据统计图论文图表的半壁江山">2.2数据统计图：论文图表的“半壁江山”</h3><p><strong>选择合适的图表类型</strong>：数据统计图是科研论文中不可或缺的元素。从频数分析到描述统计，从差异关系研究到影响关系研究，选择正确的统计方法和图表类型，可以让你的数据“活”起来。</p><p>下面是知乎上网友分类汇总学术研究上常用的<a href="https://www.zhihu.com/search?q=数据分析方法&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3013922259%7D">数据分析方法</a>；比较常用的是前三个</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240120114233659.png"></p><ol type="1"><li>基础描述统计</li></ol><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240120115321394.png"></p><p><strong>频数分析</strong>一般使用频数、百分比、饼图等形式进行描述，如我在论文中进行细胞尺寸统计就属于频数分析；</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240120115426385.png"></p><p><strong>描述分析</strong>常见的指标有平均值、标准差、最大值、最小值、中位数等，常用的图有柱状图、箱形图、葡萄图、小提琴图，可以根据自己的需求选择相应图形</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240120115622525.png"></p><ol start="2" type="1"><li><strong>差异关系研究</strong></li></ol><p>常见的差异关系研究方法包括<strong>方差分析、t检验、卡方检验、非参数检验等</strong>。比较常用的是方差分析、t检验，t检验常用于两两之间差异比较；方差分析多用于多组之间差异比较；</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240120115752940.png"></p><ol start="3" type="1"><li><strong>影响关系研究</strong></li></ol><p>影响关系研究包括进行<strong>相关分析、回归分析</strong>，用于研究数据之间的关系。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240120115837070.png"></p><p><strong>数据清洗</strong>：检查数据的准确性和完整性。去除或更正错误的数据点，处理缺失值。这一步骤对保证你的图表反映真实、准确的结果至关重要。</p><p><strong>数据分析</strong>：选择适合你数据和研究问题的统计方法。无论是进行描述性统计分析还是更复杂的回归分析，确保你理解所使用的每种方法，并能够解释它们是如何支持你的研究假设的。</p><h2 id="科研作图-你的图表的灵魂">科研作图 —— 你的图表的灵魂</h2><p>科研作图一般包括照片及绘图两种，如电镜图、显微镜荧光图等属于前者，这种图处理较少，一般都是加比例尺，电镜图加伪彩；第二种是依据数据绘制得到的图，如前面讲的柱状图，箱型图等；</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407084629935.png"></p><h3 id="选择合适的作图工具">3.1 选择合适的作图工具</h3><p>Origin、Prism、Python、Matlab……市面上有着数不清的作图工具。选择哪个？这完全取决于你的需要和偏好。有些人喜欢Prism的直观操作，有些人则偏爱Python在数据处理上的强大功能。我的建议？尝试几个，找到最适合你的工具。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407084723609.png"></p><ul><li><p><strong>MATLAB</strong>：适合复杂的数据分析和图形生成，特别是在工程和科学研究中。</p></li><li><p><strong>Python</strong>：通过Matplotlib和Seaborn库，Python成为一个强大的工具，适用于各种数据可视化任务。</p></li><li><p><strong>R</strong>：特别适合统计分析和图形生成，拥有广泛的包和函数库支持各种类型的数据可视化。</p></li></ul><p>python及matlab数据处理能力也很强大；尤其是python在批量处理文件方面效率很高；有些同学不熟悉python、matlab，没关系，可以求助chatgpt；chatgpt本身还是很强大的，除了大家熟知的论文润色，科研绘图也很强大；教程链接我放左下角，有兴趣可以学习参考</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407084811645.png"></p><h3 id="配色让你的图表穿上高定">3.2 配色：让你的图表穿上“高定”</h3><p>好的配色可以让你的图表从众多论文中脱颖而出。</p><p>首先，复杂的图不要使用纯黑白色，会显得单调，增加读者阅读困难；左边的黑不溜秋，易读性大大降低；</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085034857.png"></p><p>其次，<strong>避免彩虹色，过高饱和度</strong>；高饱和度容易导致视觉疲劳，而低饱和度给人一种沉稳、理智感觉，更适合于科研作图；我在第一版绘图时，使用过多颜色，看起来很混乱。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085111367-1712451903685-1.png"></p><p><strong>巧用透明度</strong>；一个图中有很多颜色时，可以使用透明度进行区分，很和谐；使用不同透明度的绿色展示细胞活性的趋势，数值高的地方用深色，反之用浅色；</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085615716.png"></p><p>同一篇文章，尽量选择同类型配色，保证整个论文风格统一；</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085644553.png"></p><p>使用一些在线配色工具，如AdobeColor或coolors.co，可以帮助你找到和谐、舒适的颜色搭配。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085208061.png"></p><p>有些同学会说这颜色也不好看，也可以采用吸色的方法；大自然是最好的配色板；照找一张自己喜欢的图片，按其中的颜色进行配色。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085232049.png"></p><h3 id="简化少即是多">3.3 简化：少即是多</h3><p>在图表设计中，简化是关键。尽量合并相同的横纵坐标，避免背景颜色，保持背景的清洁简单。相信我，你的读者会感激你让他们的阅读过程更加轻松愉快。</p><p>如：同一子图中如果出现重复坐标，可以考虑合并；不同子图避免合并；比如nature文章中，对f子图中的重复坐标进行合并，g图则没有；</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085328352.png"></p><p>再者，背景颜色没必要，尤其是元素很多的情况下；论文通常是白色背景；带背景颜色的图片放在论文中反而会显得违和</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085405323.png"></p><h2 id="科研作图技巧">科研作图技巧</h2><ol type="1"><li><strong>建立良好的数据分析文件：</strong>借鉴程序员在GitHub上的做法，建立Readme.md文件或Readme.txt文件，方便长期记忆。</li><li><strong>清晰为王：</strong>确保您的图表一目了然。这意味着避免混乱，使用可读的字体，并清晰地标记轴和数据点。</li><li><strong>视觉吸引力：</strong>使用颜色应该有助于区分不同的数据集或突出关键发现，而不是分散注意力。坚持使用一个对所有读者（包括色盲用户）都易于访问的一致的颜色方案。</li><li><strong>简洁胜于复杂：</strong>您的图表应该尽可能简单，但又足够详细以传达信息。过于复杂的图表可能会造成混淆而不是阐明。</li></ol><h2 id="常见错误及其避免方法">常见错误及其避免方法</h2><p>即使是经验丰富的研究者也可能在创建图形时遇到问题。常见的陷阱包括：</p><ul><li><strong>图形信息过载</strong>：避免在单一图形中包含太多信息。保持简洁，每个图形只传达一两个关键点。</li><li><strong>使用不适当的比例或轴标签</strong>：确保所有的轴都清楚标记，并使用适当的比例，使得数据的展示既准确又易于理解。</li><li><strong>忽视视觉美学</strong>：使用对比色彩来区分不同数据集，但同时保证整体视觉效果和谐。</li></ul><h2 id="最后向顶级期刊学习">最后，向顶级期刊学习</h2><p>始终保持好奇心和学习态度。如果你对某个图表的格式或配色有疑问，不妨看看顶级期刊是如何做的。他们之所以成为“顶级”，很大一部分原因是因为他们在呈现研究成果上做得非常好。</p><p><img src="/2024/01/20/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E5%88%86%E4%BA%AB/image-20240407085435177.png"></p><h2 id="结语">结语</h2><p>论文作图不仅是科研过程的一部分，更是科研沟通的艺术。一张好的图表能够跨越语言和文化的障碍，将你的研究讲述给全世界。所以，花时间在你的图表上，让它们为你的研究发声。就像好的设计能够让生活更美好一样，好的科研作图可以让科学沟通更有效。</p><p>希望这篇博客能够帮助你在科研作图的道路上更进一步。记住，每一次尝试都是一次学习的机会。不断试验，不断学习，你会发现自己能够创造出越来越多让人眼前一亮的图表。祝你在科研之路上越走越远，越画越精彩！</p><h2 id="reference">Reference</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/358723118">T-test与ANOVA(方差分析)及Prism实例- 知乎 (zhihu.com)</a></p></li><li><p><a href="https://mengte.online/archives/6619">GraphPad PrismXY表统计分析——相关分析(Correlation Analysis)</a></p></li><li><p><a href="https://mengte.online/archives/6590">GraphPad PrismXY表统计分析——简单线性回归分析 (Simple Linear RegressionAnalysis)</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1oc411H7y9/">ChatGPT结合Excel、Python高效处理数据和科研绘图（以清华师姐的数据实例演示）_哔哩哔哩_bilibili</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强化学习</title>
    <link href="/2024/01/01/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/01/01/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="强化学习基础">1、强化学习基础</h2><p>强化学习是一种机器学习方法，旨在让智能体通过与环境的交互学习如何做出决策，以达到实现特定目标的目的。它有以下重要组成部分：</p><ul><li>主要要素：</li></ul><ol type="1"><li><p><strong>智能体（Agent）</strong>：强化学习的决策制定者或学习者，其目标是通过与环境的交互来学习最佳行为策略。</p></li><li><p><strong>环境（Environment）</strong>：智能体所处的外部环境，它会对智能体的行为做出响应，并提供反馈信息。</p></li><li><p><strong>状态（State）</strong>：描述环境特定瞬间的情况。智能体根据当前状态做出决策。</p></li><li><p><strong>动作（Action）</strong>：智能体基于当前状态做出的行为。</p></li><li><p><strong>奖励（Reward）</strong>：智能体根据其行为在特定状态下获得的反馈。奖励可以是正的、负的或零，用于指导智能体优化其行为。</p></li></ol><ul><li>核心概念：</li></ul><ol type="1"><li><p><strong>奖励最大化</strong>：智能体的目标是通过最大化长期奖励来学习最佳策略。</p></li><li><p><strong>策略（Policy）</strong>：决定智能体在特定状态下选择什么动作的规则或方法。</p></li><li><p><strong>价值函数（ValueFunction）</strong>：衡量在给定状态或状态-动作对下，智能体预期能获得的长期奖励。</p></li><li><p><strong>探索与利用</strong>：智能体需要在利用已知有效策略与探索未知策略之间寻找平衡，以便更好地了解环境和取得更高的奖励。</p></li></ol><ul><li>常见算法：</li></ul><ol type="1"><li><p><strong>Q-learning</strong>：一种基于价值迭代的强化学习算法，用于学习状态-动作对的价值。</p></li><li><p><strong>Deep Q-Networks(DQN)</strong>：将深度神经网络与Q-learning相结合，适用于处理具有高维状态空间的问题。</p></li><li><p><strong>策略梯度（PolicyGradient）</strong>：直接学习最优策略的方法，而不是学习价值函数。</p></li></ol><blockquote><p>强化学习适用于许多领域，如机器人控制、游戏玩法优化、自动驾驶等，它使得智能体能够在未知环境中学习并做出决策，逐步优化行为以达到特定目标。</p></blockquote><h2 id="section">2、</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于yolo的原神钓鱼目标检测</title>
    <link href="/2023/12/28/%E5%9F%BA%E4%BA%8Eyolo%E7%9A%84%E5%8E%9F%E7%A5%9E%E9%92%93%E9%B1%BC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    <url>/2023/12/28/%E5%9F%BA%E4%BA%8Eyolo%E7%9A%84%E5%8E%9F%E7%A5%9E%E9%92%93%E9%B1%BC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>原神启动！原批变身！恰好把之前抽的雷神培养一下，正好没有专武，想着把鱼叉弄一下。自己又不想钓鱼，正好就试着把原神自动钓鱼项目<a href="https://github.com/IrisRainbowNeko/genshin_auto_fish">（基于深度强化学习的原神自动钓鱼AI）</a>复现一下，于是便有了这篇博文。</p><span id="more"></span><h2 id="yolo-环境配置">1、YOLO 环境配置</h2><h3 id="安装-cuda-和-cudnn">1.1 安装 CUDA 和 cudnn</h3><p>参考之前写的 <a href="https://blog.csdn.net/weixin_44349241/article/details/114333235">博客</a>，按其中步骤安装即可。这里安装的是version 为 11.2 的cuda。</p><h3 id="安装-pytorch-gpu">1.2 安装 pytorch-gpu</h3><p>去 <a href="https://pytorch.org/get-started/previous-versions/">torch官网</a>寻找与自己 cuda 版本相对应的 pytorch，这里我没有找到对应 cuda-11.2版本的torch安装命令，于是选择了安装 cuda-11.1的torch（<strong>自己安装torch的cuda版本应不能超过电脑的 cuda版本</strong>） <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install torch==1.8.1+cu111 torchvision==0.9.1+cu111 torchaudio==0.8.1 -f https://download.pytorch.org/whl/torch_stable.html<br></code></pre></td></tr></table></figure></p><blockquote><p>建议先安装 torch，再安装 yolo；若先安装 yolo，系统会自行安装torch-cpu，还需卸载</p></blockquote><h3 id="安装-yolov8">1.3 安装 YOLOv8</h3><p>git 拉取 <a href="https://gitee.com/monkeycc/ultralytics">ultralytics: YOLOv8 🚀Ultralytics 同步更新官方最新版 YOLOv8 (gitee.com)</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/monkeycc/ultralytics.git<br></code></pre></td></tr></table></figure><p>进入 <code>ultralytics</code> 目录内，安装 yolo 及相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -e .<br></code></pre></td></tr></table></figure><p>验证是否安装成功 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ultralytics<br>ultralytics.checks()<br></code></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ultralytics YOLOv8.0.230 � Python-3.8.8 torch-1.8.1+cu111 CUDA:0 (NVIDIA GeForce GTX 1050 Ti, 4096MiB)<br>Setup complete ✅ (4 CPUs, 15.9 GB RAM, 13.4/50.0 GB disk)<br></code></pre></td></tr></table></figure></p><h3 id="下载预权重">1.4 下载预权重</h3><p>下载训练模型，推荐yolov8s.pt或者yolov8n.pt，模型小，下载快，在gitee或者github下方readme里面，下载完成后，将模型放在主文件夹下</p><p>yolov8s.pt下载地址：<a href="https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8s.pt">yolov8s.pt</a></p><p>yolov8n.pt下载地址：<a href="https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt">yolov8n.pt</a></p><h3 id="测试环境">1.5 测试环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yolo predict model=yolov8n.pt <span class="hljs-built_in">source</span>=<span class="hljs-string">&#x27;ultralytics/assets/bus.jpg&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>1/1 E:\myProject\ultralytics\ultralytics\assets\bus.jpg: 640x480 4 persons, 1 bus, 1 stop sign, 80.1ms</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs image">Speed: 0.0ms preprocess, 80.1ms inference, 3.0ms postprocess per image at shape (1, 3, 640, 480)<br>Results saved to runs\detect\predict<br>💡 Learn more at https://docs.ultralytics.com/modes/predict<br></code></pre></td></tr></table></figure><h2 id="安装数据标注工具">2、安装数据标注工具</h2><h3 id="标注工具基本介绍">2.1 标注工具基本介绍</h3><p>这里只介绍两种标注工具：<code>labelimg</code>、<code>labelme</code>；LabelMe和LabelImg都是用于图像标注的工具，但它们有一些不同之处：</p><ol type="1"><li><strong>开发者和平台：</strong><ul><li>LabelMe：LabelMe是由麻省理工学院（MIT）开发的在线标注工具，允许用户标注图像，并支持多种标注格式。</li><li>LabelImg：LabelImg是由Tzutalin开发的开源工具，它是一个基于Python的图像标注工具，可以在本地使用，支持多种格式的图像标注。</li></ul></li><li><strong>功能：</strong><ul><li>LabelMe：LabelMe提供了一些高级的标注功能，如<u>实例分割（不仅限于矩形框标注）和复杂形状标注</u>的能力。</li><li>LabelImg：LabelImg相对简单，适用于一般的对象检测任务，支持<u>常见的矩形标注和类别标签</u>。</li></ul></li><li><strong>使用场景和灵活性：</strong><ul><li>LabelMe：<u>适合需要更复杂标注需求（如实例分割）的项目</u>，同时需要在线协作或访问的团队。</li><li>LabelImg：<u>适合简单的对象检测标注需求</u>，更适合个人或小团队在本地使用。</li></ul></li></ol><p>选择使用哪个工具取决于你的具体需求和标注的复杂程度。如果你需要更高级的标注功能并且团队需要在线协作，LabelMe可能更适合；而如果你只需要简单的对象检测标注，LabelImg可能更加方便。这里我们只是进行简单的目标检测，选择使用LabelImg；当然你也可以选用LabelMe，注意LabelMe标注生成的文件为json，还需额外脚本将其生成txt才能用作yolo训练。</p><h3 id="labelme安装">2.2 LabelMe安装</h3><p>参考 <a href="https://github.com/labelmeai/labelme">GitHub主页</a>安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create --name=labelme python=3<br>conda activate labelme<br>pip install labelme<br><br><span class="hljs-comment"># or install standalone executable/app from:</span><br><span class="hljs-comment"># https://github.com/wkentaro/labelme/releases</span><br></code></pre></td></tr></table></figure> 运行命令，启动 labelimg <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">labelme<br></code></pre></td></tr></table></figure></p><h3 id="labelimg安装">2.3 LabelImg安装</h3><p>参考 <a href="https://github.com/HumanSignal/labelImg">github主页</a>安装步骤安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install pyqt=5<br>conda install -c anaconda lxml<br>pyrcc5 -o libs/resources.py resources.qrc<br>python labelImg.py<br>python labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]<br>----------------------------<br>pip install labelimg -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><h2 id="训练模型">3、训练模型</h2><h3 id="创建数据加载配置文件">3.1 创建数据加载配置文件</h3><p>新建data文件夹（可自定义），再在data目录下新建images, labels,data.yaml</p><p><a href="https://blog.csdn.net/weixin_61988885/article/details/129421538?share_token=dad53e58-4c3a-4935-9a84-56924d78a2af">YOLOv8从环境搭建到推理训练_yolov8 predict-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_45701791/article/details/113992622">教程：超详细从零开始yolov5模型训练_yolo训练-CSDN博客</a></p><p>📌images目录下存放数据集的图片文件</p><p>📌labels目录下存放txt标准格式标签</p><p>📌yaml文件用来存放一些目录信息和标志物分类</p><hr><h3 id="创建数据集">3.2 创建数据集</h3><p>步骤（YOLO）：</p><ol type="1"><li>在 data/predefined_classes.txt 文件中定义将用于训练的类别列表。</li><li>使用上述说明构建并启动。</li><li>在工具栏中的“保存”按钮正下方，点击“PascalVOC”按钮切换到YOLO格式。</li><li>您可以使用“打开/Open”或“打开/OpenDIR”来处理单个或多个图像。处理完单个图像后，请点击保存。YOLO格式的txt文件将保存在与图像同名的文件夹中。名为“classes.txt”的文件也将保存在该文件夹中。“classes.txt”定义了YOLO标签所引用的类别列表。</li></ol><p><strong>注意：</strong></p><p>在处理图像列表时，您的标签列表不应该在处理过程中更改。当您保存一张图像时，classes.txt也会被更新，而之前的注释不会被更新。在保存为YOLO格式时，不应使用“默认类别”功能，它不会被引用。保存为YOLO格式时，“difficult”标志会被丢弃。</p><h3 id="数据集划分">3.3 数据集划分</h3><p>在前面创建的imges及labels文件夹下存放划分后的数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, shutil, random<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">标注文件是yolo格式（txt文件）</span><br><span class="hljs-string">训练集：验证集：测试集 （7：2：1） </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_img</span>(<span class="hljs-params">img_path, label_path, split_list</span>):<br>    <span class="hljs-keyword">try</span>:<br>        Data = <span class="hljs-string">&#x27;./genish_auto_fish&#x27;</span><br>        <span class="hljs-comment"># Data是你要将要创建的文件夹路径（路径一定是相对于你当前的这个脚本而言的）</span><br>        <span class="hljs-comment"># os.mkdir(Data)</span><br><br>        train_img_dir = Data + <span class="hljs-string">&#x27;/images/train&#x27;</span><br>        val_img_dir = Data + <span class="hljs-string">&#x27;/images/val&#x27;</span><br>        test_img_dir = Data + <span class="hljs-string">&#x27;/images/test&#x27;</span><br><br>        train_label_dir = Data + <span class="hljs-string">&#x27;/labels/train&#x27;</span><br>        val_label_dir = Data + <span class="hljs-string">&#x27;/labels/val&#x27;</span><br>        test_label_dir = Data + <span class="hljs-string">&#x27;/labels/test&#x27;</span><br><br>        <span class="hljs-comment"># 创建文件夹</span><br>        os.makedirs(train_img_dir)<br>        os.makedirs(train_label_dir)<br>        os.makedirs(val_img_dir)<br>        os.makedirs(val_label_dir)<br>        os.makedirs(test_img_dir)<br>        os.makedirs(test_label_dir)<br><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;文件目录已存在&#x27;</span>)<br><br>    train, val, test = split_list<br>    all_img = os.listdir(img_path)<br>    all_img_path = [os.path.join(img_path, img) <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> all_img]<br>    <span class="hljs-comment"># all_label = os.listdir(label_path)</span><br>    <span class="hljs-comment"># all_label_path = [os.path.join(label_path, label) for label in all_label]</span><br>    train_img = random.sample(all_img_path, <span class="hljs-built_in">int</span>(train * <span class="hljs-built_in">len</span>(all_img_path)))<br>    train_img_copy = [os.path.join(train_img_dir, img.split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> train_img]<br>    train_label = [toLabelPath(img, label_path) <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> train_img]<br>    train_label_copy = [os.path.join(train_label_dir, label.split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> train_label]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(train_img)), desc=<span class="hljs-string">&#x27;train &#x27;</span>, ncols=<span class="hljs-number">80</span>, unit=<span class="hljs-string">&#x27;img&#x27;</span>):<br>        _copy(train_img[i], train_img_dir)<br>        _copy(train_label[i], train_label_dir)<br>        all_img_path.remove(train_img[i])<br>    val_img = random.sample(all_img_path, <span class="hljs-built_in">int</span>(val / (val + test) * <span class="hljs-built_in">len</span>(all_img_path)))<br>    val_label = [toLabelPath(img, label_path) <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> val_img]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(val_img)), desc=<span class="hljs-string">&#x27;val &#x27;</span>, ncols=<span class="hljs-number">80</span>, unit=<span class="hljs-string">&#x27;img&#x27;</span>):<br>        _copy(val_img[i], val_img_dir)<br>        _copy(val_label[i], val_label_dir)<br>        all_img_path.remove(val_img[i])<br>    test_img = all_img_path<br>    test_label = [toLabelPath(img, label_path) <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> test_img]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(test_img)), desc=<span class="hljs-string">&#x27;test &#x27;</span>, ncols=<span class="hljs-number">80</span>, unit=<span class="hljs-string">&#x27;img&#x27;</span>):<br>        _copy(test_img[i], test_img_dir)<br>        _copy(test_label[i], test_label_dir)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_copy</span>(<span class="hljs-params">from_path, to_path</span>):<br>    shutil.copy(from_path, to_path)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">toLabelPath</span>(<span class="hljs-params">img_path, label_path</span>):<br>    img = img_path.split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>]<br>    label = img.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.txt&#x27;</span><br>    <span class="hljs-keyword">return</span> os.path.join(label_path, label)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    img_path = <span class="hljs-string">&#x27;./genish_auto_fish/imagesAll&#x27;</span>  <span class="hljs-comment"># 你的图片存放的路径（路径一定是相对于你当前的这个脚本文件而言的）</span><br>    label_path = <span class="hljs-string">&#x27;./genish_auto_fish/labelsAll&#x27;</span>  <span class="hljs-comment"># 你的txt文件存放的路径（路径一定是相对于你当前的这个脚本文件而言的）</span><br>    split_list = [<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>]  <span class="hljs-comment"># 数据集划分比例[train:val:test]</span><br>    split_img(img_path, label_path, split_list)<br></code></pre></td></tr></table></figure><p>脚本运行后，生成将标注好的数据随机划分到各自的文件夹中，label同理</p><p><img src="/2023/12/28/%E5%9F%BA%E4%BA%8Eyolo%E7%9A%84%E5%8E%9F%E7%A5%9E%E9%92%93%E9%B1%BC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/image-20240103110930577.png"></p><p>在对应yaml配置文件中配置好自己数据集的相关信息，以备训练</p><p><img src="/2023/12/28/%E5%9F%BA%E4%BA%8Eyolo%E7%9A%84%E5%8E%9F%E7%A5%9E%E9%92%93%E9%B1%BC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/image-20240103111433341.png"></p><h3 id="模型训练">3.4 模型训练</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yolo task=detect mode=train model=yolov8s.yaml data=mydata_tuomin/tuomin.yaml epochs=100 batch=4 device=0<br></code></pre></td></tr></table></figure><p>以上参数解释如下：</p><p>📌task：选择任务类型，可选['detect', 'segment', 'classify','init']。</p><p>📌mode: 选择是训练、验证还是预测的任务类型，可选['train', 'val','predict']。</p><p>📌model:选择yolov8不同的模型配置文件，可选yolov8s.yaml、yolov8m.yaml、yolov8x.yaml等，也可选择已经训练好的预训练权重（yolov8s.pt、yolov8m.pt）。</p><p>​ 选择.pt和.yaml的区别（<a href="https://blog.csdn.net/qq_37553692/article/details/130898732">YOLOv8训练参数详解</a>）</p><ul><li>.pt类型的文件是从预训练模型的基础上进行训练。若我们选择yolov8n.pt这种.pt类型的文件，其实里面是包含了模型的结构和训练好的参数的，也就是说拿来就可以用，就已经具备了检测目标的能力了，yolov8n.pt能检测coco中的80个类别。假设你要检测不同种类的狗，那么yolov8n.pt原本可以检测狗的能力对你训练应该是有帮助的，你只需要在此基础上提升其对不同狗的鉴别能力即可。但如果你需要检测的类别不在其中，例如口罩检测，那么就帮助不大。</li><li><code>.yaml</code>文件是从零开始训练。采用<code>yolov8n.yaml</code>这种.yaml文件的形式，在文件中指定类别，以及一些别的参数。</li></ul><p>📌data: 选择生成的数据集配置文件，即前面的fish.yaml</p><p>📌epochs：训练的轮次数量，指的就是训练过程中整个数据集将被迭代多少次。</p><p>📌batch：每批图像数量（-1为自动批大小）；一次看完多少张图片才进行权重更新，梯度下降的mini-batch，显卡不行你就调小点。</p><p>📌device：可以使用<code>device</code>参数指定训练设备。如果没有传递参数，并且有可用的GPU，则将使用GPU<code>device=0</code>，否则将使用<code>device=cpu</code>。</p><blockquote><p>更详细的介绍，可前往查阅 yolov8技术文档的训练章节（ <a href="https://docs.ultralytics.com/zh/modes/train/#_4">训练 -Ultralytics YOLOv8 文档</a>）</p></blockquote><p>训练完成后，系统会输出权重储存路径：</p><p><img src="/2023/12/28/%E5%9F%BA%E4%BA%8Eyolo%E7%9A%84%E5%8E%9F%E7%A5%9E%E9%92%93%E9%B1%BC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/image-20240103212134460.png"></p><h2 id="对原神窗口进行实时目标检测">4、 对原神窗口进行实时目标检测</h2><p>网上查询了窗口图像采集的方案，最终选定pywin32库进行程序窗口的图像采集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> win32gui, win32ui, win32con<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> ultralytics <span class="hljs-keyword">import</span> YOLO<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    window_name = <span class="hljs-string">&quot;原神&quot;</span><br>    <span class="hljs-comment"># 获得窗口句柄</span><br>    hWnd = win32gui.FindWindow(<span class="hljs-literal">None</span>, window_name)<br>    <span class="hljs-comment"># 加载训练好的yolo模型</span><br>    model = YOLO(<span class="hljs-string">&#x27;best.pt&#x27;</span>)<br>    <span class="hljs-comment"># 获取句柄窗口的大小信息</span><br>    left, top, right, bot = win32gui.GetClientRect(hWnd)<br>    <span class="hljs-built_in">print</span>(left, top, right, bot)<br>    width = (right - left)<br>    height = (bot - top)<br>    <span class="hljs-comment"># 命名输出的窗口名</span><br>    cv2.namedWindow(<span class="hljs-string">&#x27;im_opencv&#x27;</span>)<br>    <span class="hljs-comment"># 返回句柄窗口的设备环境，覆盖整个窗口，包括非客户区，标题栏，菜单，边框</span><br>    hWndDC = win32gui.GetWindowDC(hWnd)<br>    <span class="hljs-comment"># 创建设备描述表</span><br>    mfcDC = win32ui.CreateDCFromHandle(hWndDC)<br>    <span class="hljs-comment"># 创建内存设备描述表</span><br>    saveDC = mfcDC.CreateCompatibleDC()<br>    <span class="hljs-comment"># 创建位图对象准备保存图片</span><br>    saveBitMap = win32ui.CreateBitmap()<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 为bitmap开辟存储空间</span><br>        saveBitMap.CreateCompatibleBitmap(mfcDC, width, height)<br>        <span class="hljs-comment"># 将截图保存到saveBitMap中</span><br>        saveDC.SelectObject(saveBitMap)<br>        <span class="hljs-comment"># 保存bitmap到内存设备描述表</span><br>        saveDC.BitBlt((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (width, height), mfcDC, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), win32con.SRCCOPY)<br>        <span class="hljs-comment"># opencv+numpy保存</span><br>        <span class="hljs-comment">##获取位图信息</span><br>        signedIntsArray = saveBitMap.GetBitmapBits(<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment">## 图像转换成ndarray</span><br>        im_opencv = numpy.frombuffer(signedIntsArray, dtype=<span class="hljs-string">&#x27;uint8&#x27;</span>)<br>        im_opencv.shape = (height, width, <span class="hljs-number">4</span>)<br>        im_opencv = cv2.cvtColor(im_opencv, cv2.COLOR_BGRA2BGR)<br>        im_opencv = cv2.resize(im_opencv, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), fx=<span class="hljs-number">0.5</span>, fy=<span class="hljs-number">0.5</span>)<br>        <span class="hljs-comment"># cv2.imwrite(&quot;im_opencv.jpg&quot;, im_opencv, [int(cv2.IMWRITE_JPEG_QUALITY), 100])  # 保存</span><br>        <span class="hljs-comment"># 利用yolo模型进行目标检测</span><br>        result = model(im_opencv)<br>        cv2.imshow(<span class="hljs-string">&quot;im_opencv&quot;</span>, result[<span class="hljs-number">0</span>].plot())  <span class="hljs-comment"># 显示</span><br>        key = cv2.waitKey(<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">if</span> key &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>): <span class="hljs-comment"># 识别到按&#x27;q&#x27;键，退出</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在退出窗口&#x27;</span>)<br>            cv2.destroyAllWindows()<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>下面展示一下最终效果，由于本人精力有限，只采集了150张图片作为数据集，整体识别效果一般；但是通过这么一个实现过程，确实能够帮助大家入门yolo</p><p><img src="/2023/12/28/%E5%9F%BA%E4%BA%8Eyolo%E7%9A%84%E5%8E%9F%E7%A5%9E%E9%92%93%E9%B1%BC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/原神目标识别.gif"></p><p>Reference：</p><ol type="1"><li><a href="https://docs.ultralytics.com/zh/quickstart/#conda-docker">UltralyticsYOLOv8 文档</a></li><li><a href="https://blog.csdn.net/weixin_44349241/article/details/114333235">win10下Tensorflow与Pytorch安装教程-CSDN博客</a></li><li><a href="https://pytorch.org/get-started/previous-versions/">PyTorch文档</a></li><li><a href="https://github.com/HumanSignal/labelImg/blob/master/readme/README.zh.rst">labelImgREADME zh</a></li><li><a href="https://blog.csdn.net/weixin_61988885/article/details/129421538?share_token=dad53e58-4c3a-4935-9a84-56924d78a2af">YOLOv8从环境搭建到推理训练_yolov8 predict-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_45701791/article/details/113992622">教程：超详细从零开始yolov5模型训练_yolo训练-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_37553692/article/details/130898732">YOLOv8训练参数详解（全面详细、重点突出、大白话阐述小白也能看懂）_yolov8参数-CSDN博客</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>YOLO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于解决 hexo 博客中图片无法显示的问题</title>
    <link href="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>读研后大部分时间都待在办公室了，原来部署博客的笔记本电脑很少携带。为了方便更新博客，想着实现一下博客多端同步功能，即使在办公室也能轻松摸鱼写博客😊。虽然同步编辑实现了，却出现了博客中图片无法显示的问题；网上寻找解决办法，有效的博客并不多，甚至很多博客是一样的，存粹的copy。好在花费了一些时间，解决了这个问题，于是便想着记录一下解决过程，希望能给别的同志一些参考和启发。</p><span id="more"></span><h2 id="初尝试">1、初尝试</h2><p>网上绝大数的解决方法都是设置<code>post__asset_folder属性为true</code>+ <code>安装hexo-asset-image插件</code>，经尝试后并不好使。后来看到了<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">这篇博客</a>，受其启发去查看图片的路径，方定位到问题，才得以解决。</p><h2 id="解决方案">2、解决方案</h2><h3 id="创建图片资源文件夹">2.1 创建图片资源文件夹</h3><p>网上有关的解决方式几乎很大一部分会提到这一点：将博客根目录<code>_config.yml</code>文件中的<code>post_asset_folder</code> 选项设为 <code>true</code>来打开。事实上这正是hexo<a href="https://hexo.io/zh-cn/docs/asset-folders">官方文档</a>给出的解决<strong>方案之一</strong>中的<strong>一个步骤</strong>。</p><p>该操作的作用就是在使用<code>hexo new "xxx"</code>命令新建博文时，在相同路径下同步创建一个<code>xxx</code>文件夹，而<code>xxx</code>文件夹的作用就是用来存放博客中引用的图片资源；</p><h3 id="安装插件">2.2 安装插件</h3><p>很多博客提到<code>hexo-asset-image</code>这个插件，相信在网上找了一波解决方案的同学一定对这个名字不陌生。</p><p>插件安装方法参考官网：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>该插件主要功能就是<strong>路径转换</strong>，根据markdown中图片的相对路径，给出html中图片的绝对路径。具体原理，金牛大王同学的<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">博客</a>中提过，我不再阐述。</p><h3 id="配置typora图像引用设置">2.3 配置typora图像引用设置</h3><p>这里也是参考了网上的设置。这样设置，当我们向文档中添加图片时，软件会自动帮我们将图片复制到文档同名文件夹中，即前文提到的每篇博客对应的图片资源文件夹；可使我们更专注于写作。</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220190441688.png"></p><h3 id="更正markdown图片路径">2.4 更正markdown图片路径</h3><p>图片不能正常显示，根本原因就是路径不正确，html无法识别。这里我打开<code>hexo g</code>后生成的博客<code>index.html</code>文件（文件位于博客根目录public文件夹中）</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220191537253.png"></p><p>可以看到图片不能正常显示</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220191709908.png"></p><p>使用浏览器检查元素工具查看图片的html源码</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220191758373.png"></p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220191859827.png"></p><p>发现路径中出现两段重复的文字，且图片路径的最前方多了<code>/.io</code></p><ul><li><p><strong>如何去掉多余的前缀？</strong></p><p>重复路径这一问题，主要是由于插件使用方法不正确导致，我们来看看<a href="https://github.com/xcodebuild/hexo-asset-image">官网</a>的使用方法：</p></li></ul><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220200318080.png"></p><p>因此，在markdown文档中，图片的引用路径中不应该添加前缀，正确的引用如下：</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220200518074.png"></p><ul><li><p><strong>多余的<code>/.io</code>怎么处理呢？</strong></p><p>经过官网查询，发现这个问题是<code>hexo-asset-image/index.js</code>中的一行代码导致的，原作者已经修复<u>（<a href="https://github.com/xcodebuild/hexo-asset-image/issues/47">域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成/.io/xxx.jpg · Issue #47 · xcodebuild/hexo-asset-image(github.com)</a>）</u>，不知为何我下载的依旧是旧版本</p></li></ul><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220201130720.png"></p><p>手动修改代码后，图片可正常显示。</p><p><img src="/2023/12/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20231220201553022.png"></p><p>至此，问题已全部解决</p><h2 id="小结">3、小结</h2><p>现如今，网上的博客质量良莠不齐。各种问题也是因人而异，同样的解决方法适用于别人，可能不适用于自己。总是，遇见问题，还是要多尝试，多查资料，多思考</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在hexo中嵌入pdf</title>
    <link href="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/"/>
    <url>/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/</url>
    
    <content type="html"><![CDATA[<p>本来是想把一周年纪念日的照片放在个人网站上，考虑到一张张上传太麻烦了，正好此前做了一本书，想着干脆直接上传 pdf 并嵌入到网站上。</p><p>说干就干，查了一些将 pdf 嵌入博客页面的方法，有<code>hexo-pdf</code>这个插件，但是似乎不支持多端适配。有朋友提到可以用<code>pdf.js</code>，简单方便，而且在桌面端和移动端都有不错的效果，那么开始实验！</p><span id="more"></span><p>接下来，进入正式流程：</p><ul><li>第一步，下载<a href="https://mozilla.github.io/pdf.js/getting_started/#download">pdf.js</a>，将文件夹解压放到指定的位置。我的博客应用的是<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题，将下载文件夹命名为 pdfjs，拷贝到<code>themes/fluid/source/js</code> 中</li></ul><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220101630961.png"></p><ul><li>第二步，修改<code>pdfjs/web/viewer.js</code>，将里面的特定内容注销，可以使用关键词搜索找到这里⬇️</li></ul><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220102717239.png"></p><ul><li>第三步，修改博客配置文件<code>_config.yml</code>（注意不是主题配置文件），将<code>pdfjs</code>文件夹加入到跳过渲染的选项里；</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">skip_render:</span> [<span class="hljs-string">myjs/**</span>]<br></code></pre></td></tr></table></figure><ul><li>第四步，在<code>pdfjs</code>文件夹里，新建一个 <code>pdf</code> 文件夹，用于存储需要嵌入的 pdf 文件。需要注意的是，存入的 pdf 文件名不能含有非法字符，比如<code>&amp;</code>；</li></ul><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220103144520.png"></p><ul><li>第五步，在博文的markdown文档中使用 <code>&lt;iframe&gt;</code> 控件配合pdf.js 库完成 pdf  显示:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;iframe src=<span class="hljs-string">&#x27;/js/pdfjs/web/viewer.html?file=/js/pdfjs/pdf/我们的第一个春夏秋冬.pdf&#x27;</span> style=<span class="hljs-string">&#x27;width:100%;height:900px&#x27;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>注意此处填写的是相对路径⬆️，嵌入文档的高度和宽度可以调整，对于论文pdf或者ppt转pdf而言，将高度设置为<code>900px</code>似乎是个不错的选择。另外，由于markdown编辑器（比如typora）并不是完整的浏览器，所以在查看<code>.md</code>文档时，本地并不会成功显示 pdf 控件，而是会看到类似下面的内容：</p><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220103903451.png"></p><p>部署完在网页端打开，浏览器是可以正常渲染的！效果如下：</p><p><img src="/2023/12/20/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%B5%8C%E5%85%A5pdf/image-20231220104706148-1703040433644-1.png"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客多端同步</title>
    <link href="/2023/12/19/hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5/"/>
    <url>/2023/12/19/hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><ol><li><p>在新电脑上克隆username.github.io仓库的hexo分支(就是存放源码的分支)到本地，此时本地git仓库处于hexo分支,可以执行<code>git branch -v</code>查看。</p></li><li><p>在clone下来的仓库文件夹中安装和配置hexo环境，依次调用命令：npm install hexo、npm install、npm install hexo-deployer-git；（不需要hexo init）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo <span class="hljs-comment"># 安装hexo</span><br>npm install <span class="hljs-comment"># 安装依赖及插件</span><br>npm install hexo-deployer-git<br></code></pre></td></tr></table></figure></li><li><p>新的终端电脑上生成新文章：</p><ul><li><p><strong>打开命令行或终端</strong>：进入到你的 Hexo 博客根目录。</p></li><li><p><strong>运行命令创建新文章</strong>：Hexo 提供了一个命令来创建新文章。在命令行中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>这会在 Hexo 的 <code>source/_posts</code> 目录下创建一个新的 Markdown 文件，文件名通常会基于标题自动生成。</p></li><li><p><strong>编辑文章</strong>：使用喜欢的文本编辑器打开新生成的 Markdown 文件，然后编写你的文章内容。可以使用 Markdown 格式书写内容，并在文件头部配置文章的元数据（如标题、日期、标签等）。</p></li><li><p><strong>保存文件</strong>：编辑完成后保存文件。</p></li><li><p><strong>生成静态页面、预览并部署</strong>：在完成文章的编写后，你需要运行以下命令生成 Hexo 博客的静态页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br>hexo server<br>hexo deploy<br></code></pre></td></tr></table></figure></li></ul></li></ol><h1 id="安装过程中遇到的问题"><a href="#安装过程中遇到的问题" class="headerlink" title="安装过程中遇到的问题"></a>安装过程中遇到的问题</h1><p><strong>Q1：在进行 <code>hexo g</code>时，报错<code>pandoc exited with code null</code></strong></p><p><strong>S1：<a href="https://blog.csdn.net/weixin_45073562/article/details/120289648">「博客搭建」Hexo Next主题配置Mathjax遇到的问题：pandoc exited with code null-CSDN博客</a></strong></p><ol><li><p><strong>使用Mathjax作为渲染器</strong><br>使用 Mathjax 进行数学公式渲染，需要使用 hexo-renderer-pandoc 或者 hexo-renderer-kramed （官方不推荐）作为 Hexo 的 Markdown 渲染器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm un hexo-renderer-marked  <span class="hljs-comment"># 先将原有的渲染器卸载(可选)</span><br>npm i hexo-renderer-pandoc<span class="hljs-comment"># 安装pandoc</span><br></code></pre></td></tr></table></figure></li><li><p><strong>修改配置文件</strong><br>在主题配置文件_config.yml 中找到math关键词，将mathjax的false改为true。注意，mathjax和katex只能有一个置为true。</p><blockquote><p>注意：还有一个per_page选项，默认为false，表示只对文章开头（front-matter）含有mathjax: true语句的文章进行渲染。为true表示会所有文章进行渲染，不管有没有加上mathjax: true语句。建议置为true，否则一篇一篇文章加上这条语句太麻烦了 <strong>(未找到)</strong></p></blockquote></li><li><p><strong>本地安装pandoc</strong><br>使用pandoc还需要在本地安装，在官网上下载pandoc，直接安装即可。<u>安装完后，记得电脑重启一下，我之前就是没安装pandoc以及没重启导致出错，然后hexo -g一直提示pandoc exited with code null的，重启之后，就能正确生成html文件了。</u></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基础笔记（一）</title>
    <link href="/2023/04/10/c++%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/10/c++%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>C++基础入门学习笔记</p><span id="more"></span><h2 id="c初识">1 C++初识</h2><h3 id="第一个c程序">1.1 第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="创建项目">1.1.1 创建项目</h4><p>​ Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541383178746.png" alt="1541383178746"><figcaption aria-hidden="true">1541383178746</figcaption></figure><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541384366413.png" alt="1541384366413"><figcaption aria-hidden="true">1541384366413</figcaption></figure><h4 id="创建文件">1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541383817248.png" alt="1541383817248"><figcaption aria-hidden="true">1541383817248</figcaption></figure><p>给C++文件起个名称，然后点击添加即可。</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541384140042.png" alt="1541384140042"><figcaption aria-hidden="true">1541384140042</figcaption></figure><h4 id="编写代码">1.1.3 编写代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Hello world&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行程序">1.1.4 运行程序</h4><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541384818688.png" alt="1541384818688"><figcaption aria-hidden="true">1541384818688</figcaption></figure><h3 id="注释">1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol type="1"><li><strong>单行注释</strong>：<code>// 描述信息</code><ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="变量">1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//变量的定义</span><br><span class="hljs-comment">//语法：数据类型  变量名 = 初始值</span><br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="常量">1.4 常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol type="1"><li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li><li><strong>const</strong>修饰的变量<code>const 数据类型 常量名 = 常量值</code><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、宏常量</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> day 7</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="hljs-string">&quot; 天&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//day = 8;  //报错，宏常量不可以修改</span><br><br><span class="hljs-comment">//2、const修饰变量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> month = <span class="hljs-number">12</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="hljs-string">&quot; 个月份&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//month = 24; //报错，常量是不可以修改的</span><br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="c-标识符及关键字">1.5 C++ 标识符及关键字</h3><p><strong>C++标识符</strong>是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。一个标识符以字母A-Z 或 a-z 或下划线 _开始，后跟零个或多个字母、下划线和数字（0-9）。</p><p>C++ 标识符内不允许出现标点字符，比如 @、&amp; 和 %。C++是区分大小写的编程语言。因此，在 C++ 中，<strong>Manpower</strong> 和<strong>manpower</strong> 是两个不同的标识符。</p><p>下面列出几个有效的标识符：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">mohd       zara    abc   move_name  a_123<br>myname50   _temp   j     a23b9      retVal<br></code></pre></td></tr></table></figure><p><strong>关键字作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr class="header"><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr class="odd"><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr class="even"><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr class="odd"><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr class="even"><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr class="odd"><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr class="even"><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr class="odd"><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr class="even"><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr class="odd"><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr class="even"><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr class="odd"><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr class="even"><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="标识符命名规则">1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h2 id="数据类型">2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="整型">2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr class="header"><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr class="odd"><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr class="even"><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr class="odd"><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr class="even"><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="sizeof关键字">2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">short</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span>) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= longlong==</p></blockquote><h3 id="实型浮点型">2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol type="1"><li>单精度float</li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr class="header"><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr class="odd"><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr class="even"><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">float</span> f1 = <span class="hljs-number">3.14f</span>;<br><span class="hljs-type">double</span> d1 = <span class="hljs-number">3.14</span>;<br><br>cout &lt;&lt; f1 &lt;&lt; endl;<br>cout &lt;&lt; d1 &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(f1) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(d1) &lt;&lt; endl;<br><br><span class="hljs-comment">//科学计数法</span><br><span class="hljs-type">float</span> f2 = <span class="hljs-number">3e2</span>; <span class="hljs-comment">// 3 * 10 ^ 2 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;<br><br><span class="hljs-type">float</span> f3 = <span class="hljs-number">3e-2</span>;  <span class="hljs-comment">// 3 * 0.1 ^ 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符型">2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = 'a';</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br>cout &lt;&lt; ch &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) &lt;&lt; endl;<br><br><span class="hljs-comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span><br><span class="hljs-comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span><br><br>cout &lt;&lt; (<span class="hljs-type">int</span>)ch &lt;&lt; endl;  <span class="hljs-comment">//查看字符a对应的ASCII码</span><br>ch = <span class="hljs-number">97</span>; <span class="hljs-comment">//可以直接用ASCII给字符型变量赋值</span><br>cout &lt;&lt; ch &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ASCII码表格：</p><table style="width:100%;"><thead><tr class="header"><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr class="odd"><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr class="even"><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr class="odd"><td>2</td><td>STX</td><td>34</td><td>"</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr class="even"><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr class="odd"><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr class="even"><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr class="odd"><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr class="even"><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr class="odd"><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr class="even"><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr class="odd"><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr class="even"><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr class="odd"><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr class="even"><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr class="odd"><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr class="even"><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr class="odd"><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr class="even"><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr class="odd"><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr class="even"><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr class="odd"><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr class="even"><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr class="odd"><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr class="even"><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr class="odd"><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr class="even"><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr class="odd"><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr class="even"><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr class="odd"><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr class="even"><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr class="odd"><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr class="even"><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong>分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong>分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="转义字符">2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p><p>现阶段我们常用的转义字符有：<code>\n  \\  \t</code></p><table><thead><tr class="header"><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr class="odd"><td></td><td>警报</td><td>007</td></tr><tr class="even"><td> 退格(BS) ，将当前位置移到前一列</td><td>008</td><td></td></tr><tr class="odd"><td> 换页(FF)，将当前位置移到下页开头</td><td>012</td><td></td></tr><tr class="even"><td>***</td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr class="odd"><td> 回车(CR) ，将当前位置移到本行开头</td><td>013</td><td></td></tr><tr class="even"><td>**</td><td><strong>水平制表(HT) （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr class="odd"><td> 垂直制表(VT)</td><td>011</td><td></td></tr><tr class="even"><td><strong>\\</strong></td><td><strong>代表一个反斜线字符""</strong></td><td><strong>092</strong></td></tr><tr class="odd"><td>'</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr class="even"><td>"</td><td>代表一个双引号字符</td><td>034</td></tr><tr class="odd"><td>?</td><td>代表一个问号</td><td>063</td></tr><tr class="even"><td>\0</td><td>数字0</td><td>000</td></tr><tr class="odd"><td></td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr class="even"><td></td><td>16进制转义字符，h范围0<sub>9，a</sub>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;\\&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;\tHello&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串型">2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol type="1"><li><p><strong>C风格字符串</strong>：<code>char 变量名[] = "字符串值"</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br>cout &lt;&lt; str1 &lt;&lt; endl;<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol type="1"><li><p><strong>C++风格字符串</strong>：<code>string  变量名 = "字符串值"</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>string str = <span class="hljs-string">&quot;hello world&quot;</span>;<br>cout &lt;&lt; str &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p></li></ol><h3 id="布尔类型-bool">2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值</p><p>bool类型只有两个值：</p><ul><li>true --- 真（本质是1）</li><li>false --- 假（本质是0）</li></ul><p><strong>bool类型占==1个字节==大小</strong></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>cout &lt;&lt; flag &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>flag = <span class="hljs-literal">false</span>;<br>cout &lt;&lt; flag &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">bool</span>) &lt;&lt; endl; <span class="hljs-comment">//1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据的输入">2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//整型输入</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入整型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; a;<br>cout &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">//浮点型输入</span><br><span class="hljs-type">double</span> d = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; d;<br>cout &lt;&lt; d &lt;&lt; endl;<br><br><span class="hljs-comment">//字符型输入</span><br><span class="hljs-type">char</span> ch = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; ch;<br>cout &lt;&lt; ch &lt;&lt; endl;<br><br><span class="hljs-comment">//字符串型输入</span><br>string str;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; str;<br>cout &lt;&lt; str &lt;&lt; endl;<br><br><span class="hljs-comment">//布尔类型输入</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; flag;<br>cout &lt;&lt; flag &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算符">3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr class="header"><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr class="odd"><td>算术运算符</td><td>用于处理四则运算</td></tr><tr class="even"><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr class="odd"><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr class="even"><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="算术运算符">3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算</p><p>算术运算符包括以下符号：</p><table><thead><tr class="header"><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr class="odd"><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr class="even"><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr class="odd"><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr class="even"><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr class="odd"><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr class="even"><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr class="odd"><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr class="even"><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr class="odd"><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr class="even"><td>--</td><td>前置递减</td><td>a=2; b=--a;</td><td>a=1; b=1;</td></tr><tr class="odd"><td>--</td><td>后置递减</td><td>a=2; b=a--;</td><td>a=1; b=2;</td></tr></tbody></table><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//加减乘除</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b1 = <span class="hljs-number">3</span>;<br><br>cout &lt;&lt; a1 + b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 - b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 * b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class="hljs-comment">//两个整数相除结果依然是整数</span><br><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = <span class="hljs-number">20</span>;<br>cout &lt;&lt; a2 / b2 &lt;&lt; endl; <br><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span><br><br><br><span class="hljs-comment">//两个小数可以相除</span><br><span class="hljs-type">double</span> d1 = <span class="hljs-number">0.5</span>;<br><span class="hljs-type">double</span> d2 = <span class="hljs-number">0.25</span>;<br>cout &lt;&lt; d1 / d2 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//取模</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b1 = <span class="hljs-number">3</span>;<br><br>cout &lt;&lt; <span class="hljs-number">10</span> % <span class="hljs-number">3</span> &lt;&lt; endl;<br><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = <span class="hljs-number">20</span>;<br><br>cout &lt;&lt; a2 % b2 &lt;&lt; endl;<br><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span><br><br><span class="hljs-comment">//两个小数不可以取模</span><br><span class="hljs-type">double</span> d1 = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">double</span> d2 = <span class="hljs-number">1.1</span>;<br><br><span class="hljs-comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//递增</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//后置递增</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>a++; <span class="hljs-comment">//等价于a = a + 1</span><br>cout &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">//前置递增</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br>++b;<br>cout &lt;&lt; b &lt;&lt; endl; <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">//区别</span><br><span class="hljs-comment">//前置递增先对变量进行++，再计算表达式</span><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = ++a2 * <span class="hljs-number">10</span>;<br>cout &lt;&lt; b2 &lt;&lt; endl;<br><br><span class="hljs-comment">//后置递增先计算表达式，后对变量进行++</span><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = a3++ * <span class="hljs-number">10</span>;<br>cout &lt;&lt; b3 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="赋值运算符">3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr class="header"><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr class="odd"><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr class="even"><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr class="odd"><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr class="even"><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr class="odd"><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr class="even"><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//赋值运算符</span><br><br><span class="hljs-comment">// =</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">100</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// +=</span><br>a = <span class="hljs-number">10</span>;<br>a += <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a + 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// -=</span><br>a = <span class="hljs-number">10</span>;<br>a -= <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a - 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// *=</span><br>a = <span class="hljs-number">10</span>;<br>a *= <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a * 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// /=</span><br>a = <span class="hljs-number">10</span>;<br>a /= <span class="hljs-number">2</span>;  <span class="hljs-comment">// a = a / 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// %=</span><br>a = <span class="hljs-number">10</span>;<br>a %= <span class="hljs-number">2</span>;  <span class="hljs-comment">// a = a % 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="比较运算符">3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr class="header"><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr class="odd"><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr class="even"><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr class="odd"><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr class="even"><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr class="odd"><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr class="even"><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br>cout &lt;&lt; (a == b) &lt;&lt; endl; <span class="hljs-comment">// 0 </span><br><br>cout &lt;&lt; (a != b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>cout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示，“假”用数字“0”来表示。==</p></blockquote><h3 id="逻辑运算符">3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr class="header"><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr class="odd"><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真； 如果a为真，则!a为假。</td></tr><tr class="even"><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr class="odd"><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逻辑运算符  --- 非</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; !a &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; !!a &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逻辑运算符  --- 与</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 1</span><br><br>a = <span class="hljs-number">10</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 0 </span><br><br>a = <span class="hljs-number">0</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 0</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p></blockquote><p><strong>示例3：</strong>逻辑或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//逻辑运算符  --- 或</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 1</span><br><br>a = <span class="hljs-number">10</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 1 </span><br><br>a = <span class="hljs-number">0</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 0</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>逻辑==或==运算符总结： ==同假为假，其余为真==</p></blockquote><h2 id="程序流程结构">4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="选择结构">4.1 选择结构</h3><h4 id="if语句">4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol type="1"><li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/clip_image002.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//选择结构-单行if语句</span><br><span class="hljs-comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span><br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; score;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; endl;<br><br><span class="hljs-comment">//if语句</span><br><span class="hljs-comment">//注意事项，在if判断语句后面，不要加分号</span><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2" type="1"><li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li></ol><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/clip_image002-1541662519170.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li></ol><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/clip_image002-1541662566808.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">500</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">400</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">700</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了北大&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">650</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了清华&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了人大&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">500</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">400</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/三只小猪.jpg" alt="三只小猪"></p><h4 id="三目运算符">4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br><br>c = a &gt; b ? a : b;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-comment">//C++中三目运算符返回的是变量,可以继续赋值</span><br><br>(a &gt; b ? a : b) = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="switch语句">4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">switch</span>(表达式)<br><br>&#123;<br><br><span class="hljs-keyword">case</span> 结果<span class="hljs-number">1</span>：执行语句;<span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> 结果<span class="hljs-number">2</span>：执行语句;<span class="hljs-keyword">break</span>;<br><br>...<br><br><span class="hljs-keyword">default</span>:执行语句;<span class="hljs-keyword">break</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//请给电影评分 </span><br><span class="hljs-comment">//10 ~ 9   经典   </span><br><span class="hljs-comment">// 8 ~ 7   非常好</span><br><span class="hljs-comment">// 6 ~ 5   一般</span><br><span class="hljs-comment">// 5分以下 烂片</span><br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请给电影打分&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">switch</span> (score)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;经典&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;非常好&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;一般&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;烂片&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="循环结构">4.2 循环结构</h3><h4 id="while循环语句">4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code>while(循环条件)&#123; 循环语句 &#125;</code></p><p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/clip_image002-1541668640382.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>num++;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>==猜数字==</p><p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/猜数字.jpg" alt="猜数字"><figcaption aria-hidden="true">猜数字</figcaption></figure><h4 id="do...while循环语句">4.2.2 do...while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code>do&#123; 循环语句 &#125; while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于==do...while会先执行一次循环语句==，再判断循环条件</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/clip_image002-1541671163478.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">do</span><br>&#123;<br>cout &lt;&lt; num &lt;&lt; endl;<br>num++;<br><br>&#125; <span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>);<br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：与while循环区别在于，do...while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 = 153</p><p>请利用do...while语句，求出所有3位数中的水仙花数</p><h4 id="for循环语句">4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>详解：</strong></p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541673704101.png" alt="1541673704101"><figcaption aria-hidden="true">1541673704101</figcaption></figure><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do...while,for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100，如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/timg.gif" alt="timg"><figcaption aria-hidden="true">timg</figcaption></figure><h4 id="嵌套循环">4.2.4 嵌套循环</h4><p><strong>作用：</strong>在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541676003486.png" alt="1541676003486"><figcaption aria-hidden="true">1541676003486</figcaption></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//外层循环执行1次，内层循环执行1轮</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/0006018857256120_b.jpg" alt="0006018857256120_b"><figcaption aria-hidden="true">0006018857256120_b</figcaption></figure><h3 id="跳转语句">4.3 跳转语句</h3><h4 id="break语句">4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//1、在switch 语句中使用break</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;1、普通&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;2、中等&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;3、困难&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><br>cin &gt;&gt; num;<br><br><span class="hljs-keyword">switch</span> (num)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//2、在循环语句中用break</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出循环语句</span><br>&#125;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//在嵌套循环语句中使用break，退出内层循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="continue语句">4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="goto语句">4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;1&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">goto</span> FLAG;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;2&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;4&quot;</span> &lt;&lt; endl;<br><br>FLAG:<br><br>cout &lt;&lt; <span class="hljs-string">&quot;5&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote><h2 id="数组">5 数组</h2><h3 id="概述">5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p><p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541748375356.png" alt="1541748375356"><figcaption aria-hidden="true">1541748375356</figcaption></figure><h3 id="一维数组">5.2 一维数组</h3><h4 id="一维数组定义方式">5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol type="1"><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li><li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li></ol><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//定义方式1</span><br><span class="hljs-comment">//数据类型 数组名[元素个数];</span><br><span class="hljs-type">int</span> score[<span class="hljs-number">10</span>];<br><br><span class="hljs-comment">//利用下标赋值</span><br>score[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>score[<span class="hljs-number">1</span>] = <span class="hljs-number">99</span>;<br>score[<span class="hljs-number">2</span>] = <span class="hljs-number">85</span>;<br><br><span class="hljs-comment">//利用下标输出</span><br>cout &lt;&lt; score[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; score[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>cout &lt;&lt; score[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br><br><span class="hljs-comment">//第二种定义方式</span><br><span class="hljs-comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span><br><span class="hljs-comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span><br><span class="hljs-type">int</span> score2[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">100</span>, <span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-comment">//逐个输出</span><br><span class="hljs-comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span><br><br><span class="hljs-comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; score2[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//定义方式3</span><br><span class="hljs-comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span><br><span class="hljs-type">int</span> score3[] = &#123; <span class="hljs-number">100</span>,<span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; score3[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="一维数组数组名">5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol type="1"><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//数组名用途</span><br><span class="hljs-comment">//1、可以获取整个数组占用内存空间大小</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br><span class="hljs-comment">//2、可以通过数组名获取到数组首地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)arr &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;arr[<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br><span class="hljs-comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span><br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] ={300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p><strong>练习案例2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h4 id="冒泡排序">5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol type="1"><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541905327273.png" alt="1541905327273"><figcaption aria-hidden="true">1541905327273</figcaption></figure><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">9</span>] = &#123; <span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维数组">5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><figure><img src="/2023/04/10/c++%E7%AC%94%E8%AE%B0/1541905559138.png" alt="1541905559138"><figcaption aria-hidden="true">1541905559138</figcaption></figure><h4 id="二维数组定义方式">5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol type="1"><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li><li><code>数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li></ol><blockquote><p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//方式1  </span><br><span class="hljs-comment">//数组类型 数组名 [行数][列数]</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">6</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>&#123;<br>cout &lt;&lt; arr[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//方式2 </span><br><span class="hljs-comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span><br><span class="hljs-type">int</span> arr2[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;;<br><br><span class="hljs-comment">//方式3</span><br><span class="hljs-comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><br><span class="hljs-type">int</span> arr3[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;; <br><br><span class="hljs-comment">//方式4 </span><br><span class="hljs-comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><br><span class="hljs-type">int</span> arr4[][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="二维数组数组名">5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//二维数组数组名</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br><span class="hljs-comment">//地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="二维数组应用案例"><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr class="header"><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr class="odd"><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr class="even"><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr class="odd"><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> scores[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>&#125;,<br>&#123;<span class="hljs-number">90</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>&#125;,<br>&#123;<span class="hljs-number">60</span>,<span class="hljs-number">70</span>,<span class="hljs-number">80</span>&#125;,<br>&#125;;<br><br>string names[<span class="hljs-number">3</span>] = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>&#123;<br>sum += scores[i][j];<br>&#125;<br>cout &lt;&lt; names[i] &lt;&lt; <span class="hljs-string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数">6 函数</h2><h3 id="概述-1">6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="函数的定义">6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型</p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句</p><p>5、return 表达式</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">返回值类型 函数名 （参数列表）<br>&#123;<br><br>       函数体语句<br><br>       <span class="hljs-keyword">return</span>表达式<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数的调用">6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code>函数名（参数）</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> <span class="hljs-comment">//定义中的num1,num2称为形式参数，简称形参</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//调用add函数</span><br><span class="hljs-type">int</span> sum = <span class="hljs-built_in">add</span>(a, b);<span class="hljs-comment">//调用时的a，b称为实际参数，简称实参</span><br>cout &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br><br>a = <span class="hljs-number">100</span>;<br>b = <span class="hljs-number">100</span>;<br><br>sum = <span class="hljs-built_in">add</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="值传递">6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，==如果形参发生，并不会影响实参==</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;交换前：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br><br><span class="hljs-type">int</span> temp = num1;<br>num1 = num2;<br>num2 = temp;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br><br><span class="hljs-comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">swap</span>(a, b);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="函数的常见样式"><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol type="1"><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数常见样式</span><br><span class="hljs-comment">//1、 无参无返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span><br>cout &lt;&lt; <span class="hljs-string">&quot;this is test01&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//test01(); 函数调用</span><br>&#125;<br><br><span class="hljs-comment">//2、 有参无返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test02&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//3、无参有返</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test03 &quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-comment">//4、有参有返</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test04</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test04 &quot;</span> &lt;&lt; endl;<br><span class="hljs-type">int</span> sum = a + b;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数的声明">6.6 函数的声明</h3><p><strong>作用：</strong>告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//声明可以多次，定义只能一次</span><br><span class="hljs-comment">//声明</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-comment">//定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br><br>cout &lt;&lt; <span class="hljs-built_in">max</span>(a, b) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数的分文件编写">6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol type="1"><li>创建后缀名为.h的头文件<br></li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//swap.h文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//实现两个数字交换的函数声明</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//swap.cpp文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//main函数文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br><span class="hljs-built_in">swap</span>(a, b);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="指针">7 指针</h2><h3 id="指针的基本概念">7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p></li><li><p>可以利用指针变量保存地址</p></li></ul><h3 id="指针变量的定义和使用">7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//1、指针的定义</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//定义整型变量a</span><br><br><span class="hljs-comment">//指针定义语法： 数据类型 * 变量名 ;</span><br><span class="hljs-type">int</span> * p;<br><br><span class="hljs-comment">//指针变量赋值</span><br>p = &amp;a; <span class="hljs-comment">//指针指向变量a的地址</span><br>cout &lt;&lt; &amp;a &lt;&lt; endl; <span class="hljs-comment">//打印数据a的地址</span><br>cout &lt;&lt; p &lt;&lt; endl;  <span class="hljs-comment">//打印指针变量p</span><br><br><span class="hljs-comment">//2、指针的使用</span><br><span class="hljs-comment">//通过*操作指针变量指向的内存</span><br>cout &lt;&lt; <span class="hljs-string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过" *"操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="指针所占内存空间">7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> * p;<br>p = &amp;a; <span class="hljs-comment">//指针指向数据a的地址</span><br><br>cout &lt;&lt; *p &lt;&lt; endl; <span class="hljs-comment">//* 解引用</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(p) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span> *) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span> *) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">double</span> *) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="空指针和野指针">7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//指针变量p指向内存地址编号为0的空间</span><br><span class="hljs-type">int</span> * p = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//访问空指针报错 </span><br><span class="hljs-comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span><br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//指针变量p指向内存地址编号为0x1100的空间</span><br><span class="hljs-type">int</span> * p = (<span class="hljs-type">int</span> *)<span class="hljs-number">0x1100</span>;<br><br><span class="hljs-comment">//访问野指针报错 </span><br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="const修饰指针">7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol type="1"><li>const修饰指针 --- 常量指针</li><li>const修饰常量 --- 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * p1 = &amp;a; <br>p1 = &amp;b; <span class="hljs-comment">//正确</span><br><span class="hljs-comment">//*p1 = 100;  报错</span><br><br><br><span class="hljs-comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span><br><span class="hljs-type">int</span> * <span class="hljs-type">const</span> p2 = &amp;a;<br><span class="hljs-comment">//p2 = &amp;b; //错误</span><br>*p2 = <span class="hljs-number">100</span>; <span class="hljs-comment">//正确</span><br><br>    <span class="hljs-comment">//const既修饰指针又修饰常量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p3 = &amp;a;<br><span class="hljs-comment">//p3 = &amp;b; //错误</span><br><span class="hljs-comment">//*p3 = 100; //错误</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量,是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="指针和数组">7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-type">int</span> * p = arr;  <span class="hljs-comment">//指向数组的指针</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-comment">//利用指针遍历数组</span><br>cout &lt;&lt; *p &lt;&lt; endl;<br>p++;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指针和函数">7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap1</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b; <br>b = temp;<br>&#125;<br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap2</span><span class="hljs-params">(<span class="hljs-type">int</span> * p1, <span class="hljs-type">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = *p1;<br>*p1 = *p2;<br>*p2 = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">swap1</span>(a, b); <span class="hljs-comment">// 值传递不会改变实参</span><br><br><span class="hljs-built_in">swap2</span>(&amp;a, &amp;b); <span class="hljs-comment">//地址传递会改变实参</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="指针数组函数">7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//冒泡排序函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> * arr, <span class="hljs-type">int</span> len)</span>  <span class="hljs-comment">//int * arr 也可以写为int arr[]</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//打印数组函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>);<br><br><span class="hljs-built_in">bubbleSort</span>(arr, len);<br><br><span class="hljs-built_in">printArray</span>(arr, len);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote><h2 id="结构体">8 结构体</h2><h3 id="结构体基本概念">8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p><h3 id="结构体定义和使用">8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值...}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;stu3; <span class="hljs-comment">//结构体变量创建方式3 </span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//结构体变量创建方式1</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu1; <span class="hljs-comment">//struct 关键字可以省略</span><br><br>stu1.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>stu1.age = <span class="hljs-number">18</span>;<br>stu1.score = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; endl;<br><br><span class="hljs-comment">//结构体变量创建方式2</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu2 = &#123; <span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">60</span> &#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; endl;<br><br><br>stu3.name = <span class="hljs-string">&quot;王五&quot;</span>;<br>stu3.age = <span class="hljs-number">18</span>;<br>stu3.score = <span class="hljs-number">80</span>;<br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ''.'' 访问成员</p></blockquote><h3 id="结构体数组">8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//结构体数组</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> arr[<span class="hljs-number">3</span>]=<br>&#123;<br>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">80</span> &#125;,<br>&#123;<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">60</span> &#125;,<br>&#123;<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">70</span> &#125;<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体指针">8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>, &#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> * p = &amp;stu;<br><br>p-&gt;score = <span class="hljs-number">80</span>; <span class="hljs-comment">//指针通过 -&gt; 操作符可以访问成员</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="结构体嵌套结构体">8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//教师结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">teacher</span><br>&#123;<br>    <span class="hljs-comment">//成员列表</span><br><span class="hljs-type">int</span> id; <span class="hljs-comment">//职工编号</span><br>string name;  <span class="hljs-comment">//教师姓名</span><br><span class="hljs-type">int</span> age;   <span class="hljs-comment">//教师年龄</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu; <span class="hljs-comment">//子结构体 学生</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">teacher</span> t1;<br>t1.id = <span class="hljs-number">10000</span>;<br>t1.name = <span class="hljs-string">&quot;老王&quot;</span>;<br>t1.age = <span class="hljs-number">40</span>;<br><br>t1.stu.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>t1.stu.age = <span class="hljs-number">18</span>;<br>t1.stu.score = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="hljs-string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="hljs-string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="结构体做函数参数">8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent</span><span class="hljs-params">(student stu )</span></span><br><span class="hljs-function"></span>&#123;<br>stu.age = <span class="hljs-number">28</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent2</span><span class="hljs-params">(student *stu)</span></span><br><span class="hljs-function"></span>&#123;<br>stu-&gt;age = <span class="hljs-number">28</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>student stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>&#125;;<br><span class="hljs-comment">//值传递</span><br><span class="hljs-built_in">printStudent</span>(stu);<br>cout &lt;&lt; <span class="hljs-string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br><br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//地址传递</span><br><span class="hljs-built_in">printStudent2</span>(&amp;stu);<br>cout &lt;&lt; <span class="hljs-string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="结构体中-const使用场景">8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//const使用场景</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent</span><span class="hljs-params">(<span class="hljs-type">const</span> student *stu)</span> <span class="hljs-comment">//加const防止函数体中的误操作</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>student stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span> &#125;;<br><br><span class="hljs-built_in">printStudent</span>(&amp;stu);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体案例">8.8 结构体案例</h3><h4 id="案例1">8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>string name;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span><br>&#123;<br>string name;<br>Student sArray[<span class="hljs-number">5</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">allocateSpace</span><span class="hljs-params">(Teacher tArray[] , <span class="hljs-type">int</span> len)</span> <span class="hljs-comment">//</span></span><br><span class="hljs-function"></span>&#123;<br>string tName = <span class="hljs-string">&quot;教师&quot;</span>;<br>string sName = <span class="hljs-string">&quot;学生&quot;</span>;<br>string nameSeed = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>tArray[i].name = tName + nameSeed[i];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br>tArray[i].sArray[j].name = sName + nameSeed[j];<br>tArray[i].sArray[j].score = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">61</span> + <span class="hljs-number">40</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printTeachers</span><span class="hljs-params">(Teacher tArray[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; tArray[i].name &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>)); <span class="hljs-comment">//随机数种子 头文件 #include &lt;ctime&gt;</span><br><br>Teacher tArray[<span class="hljs-number">3</span>]; <span class="hljs-comment">//老师数组</span><br><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(tArray) / <span class="hljs-built_in">sizeof</span>(Teacher);<br><br><span class="hljs-built_in">allocateSpace</span>(tArray, len); <span class="hljs-comment">//创建数据</span><br><br><span class="hljs-built_in">printTeachers</span>(tArray, len); <span class="hljs-comment">//打印数据</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例2">8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>&#125;,<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//英雄结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">hero</span><br>&#123;<br>string name;<br><span class="hljs-type">int</span> age;<br>string sex;<br>&#125;;<br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(hero arr[] , <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j].age &gt; arr[j + <span class="hljs-number">1</span>].age)<br>&#123;<br>hero temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//打印数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printHeros</span><span class="hljs-params">(hero arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="hljs-string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">hero</span> arr[<span class="hljs-number">5</span>] =<br>&#123;<br>&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>&#125;,<br>&#125;;<br><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(hero); <span class="hljs-comment">//获取数组元素个数</span><br><br><span class="hljs-built_in">bubbleSort</span>(arr, len); <span class="hljs-comment">//排序</span><br><br><span class="hljs-built_in">printHeros</span>(arr, len); <span class="hljs-comment">//打印</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git笔记</title>
    <link href="/2022/12/19/Git/"/>
    <url>/2022/12/19/Git/</url>
    
    <content type="html"><![CDATA[<p>Git 是一个版本控制系统，用于跟踪文件和项目的变化。</p><span id="more"></span><h3 id="版本控制">版本控制</h3><ul><li><strong>追踪文件变化</strong>: Git可以记录文件的修改、添加和删除等操作，让你了解文件的变更历史。</li><li><strong>版本回溯</strong>:你可以轻松地回到项目的历史版本，查看以前的文件状态。</li><li><strong>并行开发与合并</strong>:允许多人在同一个项目上同时工作，并在合适时候将各自的工作合并到一起。</li></ul><h3 id="协作与远程仓库">协作与远程仓库</h3><ul><li><strong>分支管理</strong>: Git允许你创建、合并和删除分支，这样你可以并行开发多个功能。</li><li><strong>远程仓库</strong>: 可以与远程仓库（如GitHub、GitLab、Bitbucket等）交互，将本地的修改推送到远程，或从远程拉取更新。</li></ul><h3 id="工作流管理">工作流管理</h3><ul><li><strong>提交管理</strong>:将工作区的修改保存为提交（commit），并添加描述信息，便于理解和回溯。</li><li><strong>撤销和修改管理</strong>:允许撤销错误的提交，修改提交历史等操作。</li></ul><h3 id="其他功能">其他功能</h3><ul><li><strong>备份和恢复</strong>: 可以轻松地备份和恢复项目的状态。</li><li><strong>代码审查与问题追踪</strong>:可以利用分支和提交信息进行代码审查，并将问题和解决方案记录在提交中。</li></ul><p>总的来说，Git提供了一个强大的工具集，用于管理和跟踪项目的变化，促进团队协作，并提供了有效的版本控制。这里是一些基本的Git 用法：</p><h3 id="用法">用法</h3><h4 id="创建版本库">创建版本库</h4><ul><li><p><code>git init</code>: 在当前目录初始化一个新的 Git 仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init my_project<br><span class="hljs-built_in">cd</span> my_project<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, Git!&quot;</span> &gt; hello.txt<br></code></pre></td></tr></table></figure></li><li><p><code>git clone &lt;repository URL&gt;</code>:克隆一个远程仓库到本地。</p></li></ul><h4 id="基本操作">基本操作</h4><ul><li><p><code>git add &lt;file&gt;</code>: 将文件添加到暂存区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add hello.txt<br></code></pre></td></tr></table></figure></li><li><p><code>git commit -m "commit message"</code>:提交暂存区的文件变化到本地仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Add hello.txt file&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><code>git status</code>: 查看工作区、暂存区的状态。</p></li><li><p><code>git log</code>: 查看提交历史记录。</p></li></ul><h4 id="分支操作">分支操作</h4><ul><li><code>git branch</code>: 查看本地分支列表。</li><li><code>git branch &lt;branch_name&gt;</code>: 创建新的分支。</li><li><code>git checkout &lt;branch_name&gt;</code>: 切换到指定分支。</li><li><code>git checkout main</code>: 切换到主分支</li><li><code>git merge &lt;branch_name&gt;</code>:合并指定分支到当前分支。</li></ul><h4 id="远程仓库">远程仓库</h4><ul><li><code>git remote add origin &lt;remote_repository_URL&gt;</code>:关联本地仓库与远程仓库。</li><li><code>git push -u origin &lt;branch_name&gt;</code>:推送本地分支到远程仓库。</li><li><code>git pull origin &lt;branch_name&gt;</code>:拉取远程仓库的更新到本地。</li></ul><h4 id="撤销与重置">撤销与重置</h4><ul><li><code>git reset &lt;file&gt;</code>:将文件从暂存区移除，但保留在工作区。</li><li><code>git reset --hard HEAD</code>:重置到最新的提交，丢弃所有本地修改。</li><li><code>git revert &lt;commit_SHA&gt;</code>:撤销指定提交的修改，生成一个新的提交来撤销该修改。</li></ul><p>这些是 Git 的一些基本用法，但 Git还有许多其他功能和命令可以使用，可以根据需要进一步探索。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 安装 pytorch-gpu</title>
    <link href="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/"/>
    <url>/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/</url>
    
    <content type="html"><![CDATA[<h2 id="安装驱动">1. 安装驱动</h2><p>终端输入以下命令查看推荐驱动版本 <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ubuntu-drivers devices<br></code></pre></td></tr></table></figure> 输出如下：</p><p><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/9688ea450cf84399963656173bcd720d.png" alt="在这里插入图片描述"> 这里显示推荐版本为 515 版本 再在终端输入<code>sudo ubuntu-drivers autoinstall</code> 即可自动安装，或者输入<code>sudo apt install nvidia-driver-515</code> 安装，然后<code>sudo reboot</code> 重启系统即可 运行 <code>nvidia-smi</code>命令，查看驱动是否安装成功</p><p><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/d20e252d431347cc874e0c06313a79dd.png" alt="在这里插入图片描述"> 返回的信息显示，安装的显卡驱动版本为 515，最高可支持 11.7 的 cuda；到这里就说明我们的驱动已经安装成功了！！！</p><h2 id="安装-cuda">2. 安装 cuda</h2><p>具体安装何版本的 cuda 取决于 pytorch 的版本。进入<a href="https://pytorch.org/get-started/locally/">pytorch官方安装页面</a>，选择对应的版本<img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/06441e839f344ee4bc5d3d28873449a6.png" alt="在这里插入图片描述"></p><p>这里显示 pytorch 1.12 版本对应的 cuda 是 11.6。现在我们就可以去 <a href="https://developer.nvidia.com/cuda-toolkit-archive">cuda下载页面</a>下载对应程序包</p><figure><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/b4915e69df7c4da3a9517f7bd767abcf.png" alt="在这里插入图片描述"><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>点击进入，选择自己系统对应的版本，在终端中运行其提供的命令即可 <img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/8f81a325e00f482f9cd3de75b9d02337.png" alt="在这里插入图片描述"><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/7edc450ef0eb44c8bc9782b883ae412f.png" alt="在这里插入图片描述"></p><h2 id="配置环境变量">3. 配置环境变量</h2><p>进入根目录，修改 bashrc文件并添加环境变量。这一步的目的是为了让程序能够找到 cuda 的位置<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> ~<br><span class="hljs-variable">$</span> vi .bashrc<br></code></pre></td></tr></table></figure> 向 .bashrc 文件末尾添加如下内容 <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">export <span class="hljs-variable constant_">LD_LIBRARY_PATH</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/cuda/lib</span>64<span class="hljs-symbol">:/usr/local/cuda/extras/CPUTI/lib64</span><br>export <span class="hljs-variable constant_">CUDA_HOME</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/cuda/bin</span><br>export <span class="hljs-variable constant_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:</span><span class="hljs-variable">$LD_LIBRARY_PATH</span><span class="hljs-symbol">:</span><span class="hljs-variable">$CUDA</span>_HOME<br></code></pre></td></tr></table></figure> 终端运行<code>nvcc -V</code> 命令查看是否成功</p><figure><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/d5d760636aaf4094b68f414fcd16dec9.png" alt="在这里插入图片描述"><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="安装-pytorch">4. 安装 pytorch</h2><p>直接终端运行官方提供的下载命令 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> install pytorch torchvision torchaudio cudatoolkit=<span class="hljs-number">11</span>.<span class="hljs-number">6</span> -c pytorch -c conda-forge<br></code></pre></td></tr></table></figure> 下载安装失败 尝试<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a>先生成 <code>conda config --set show_channel_urls yes</code> 生成<code>.condarc</code> 文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/main<br>  - https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/r<br>  - https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/msys2<br>custom_channels:<br>  conda-forge: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  msys2: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  bioconda: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  menpo: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  pytorch: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  pytorch-lts: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  simpleitk: https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br></code></pre></td></tr></table></figure><p>再次失败</p><figure><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/dcf61ab8a9b74acf8223429506590eb4.png" alt="在这里插入图片描述"><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>开始面向 csdn ，寻找解决办法，参考了该篇博客：<a href="https://blog.csdn.net/wdnmdppx/article/details/125692448">总结：使用anaconda清华镜像源安装pytorch1.12.0stable版失败的问题综合，以及对应的解决方案</a>，尝试未果，放弃！！！改为安装 cuda11.3 的 pytorch</p><figure><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/7715b5adb4894ddca67099fb38785f73.png" alt="在这里插入图片描述"><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>终端运行安装命令 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> install pytorch torchvision torchaudio cudatoolkit=<span class="hljs-number">11</span>.<span class="hljs-number">3</span> -c pytorch<br></code></pre></td></tr></table></figure> 安装未报错</p><figure><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/28bcab7a65ca4b98a9559de588abfbe4.png" alt="在这里插入图片描述"><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>顺利安装完成</p><figure><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/af645c7238084c46bf62d30d8e2306a6.png" alt="在这里插入图片描述"><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>测试一下</p><p><img src="/2022/08/12/Ubuntu%20%E5%AE%89%E8%A3%85%20pytorch-gpu/03a9695679394a52b79181cbf82ec6c5.png" alt="在这里插入图片描述"> gpu 可以正常使用，nice ！！！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytorch</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 远程连接服务器</title>
    <link href="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>宇宙第一IDE，当属 VSCode。作为一名高级炼丹师，怎么能不会远程连接服务器进行开发呢。接下来就讲述如何使用 VSCode 远程连接服务器进行炼丹操作。</p><span id="more"></span><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="step-1：安装-Anaconda"><a href="#step-1：安装-Anaconda" class="headerlink" title="step 1：安装 Anaconda"></a>step 1：安装 Anaconda</h3><p>前往<a href="https://www.anaconda.com/products/individual">Anaconda</a>官网，下载对应版本Anaconda安装包。</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/anaconda%E5%AE%89%E8%A3%85.jpg" alt="anaconda安装"></p><p>安装包下载完成后，进行安装，记得自己Anaconda的安装路径。</p><h3 id="step2：安装-VSCode"><a href="#step2：安装-VSCode" class="headerlink" title="step2：安装 VSCode"></a>step2：安装 VSCode</h3><p>前往<a href="https://code.visualstudio.com/">Visual studio code</a>页面进行下载安装。</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/vscode%E5%AE%89%E8%A3%85.png" alt="vscode安装"></p><h3 id="step3：在VSCode中安装插件"><a href="#step3：在VSCode中安装插件" class="headerlink" title="step3：在VSCode中安装插件"></a>step3：在VSCode中安装插件</h3><p>【在 VSCode 插件商店中搜索 Python、Jupyter、Remote-SSH，选择插件并点击 install 安装程序】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/Python%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.jpg" alt="Python插件安装"></p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/jupyter%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.jpg" alt="jupyter插件安装"></p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/ssh%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.jpg" alt="ssh插件安装"></p><h2 id="二、远程连接服务器"><a href="#二、远程连接服务器" class="headerlink" title="二、远程连接服务器"></a>二、远程连接服务器</h2><h3 id="step1：Remote-SSH-连接配置"><a href="#step1：Remote-SSH-连接配置" class="headerlink" title="step1：Remote-SSH 连接配置"></a>step1：Remote-SSH 连接配置</h3><p>【打开SSH TARGETS连接服务器】输入ssh 用户名@+服务器IP</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.jpg" alt="远程连接"></p><p>【选 C:\用户名\.ssh\config 进行配置】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE.jpg" alt="连接配置"></p><p>【修改 config 配置文件】Host后面为你的服务器备注（随意命名），HostName 为连接的服务器 ip 地址，User 为服务器用户名</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/config.jpg" alt="config"></p><h3 id="step2：SSH-插件设置"><a href="#step2：SSH-插件设置" class="headerlink" title="step2：SSH  插件设置"></a>step2：SSH  插件设置</h3><p>【勾选 Remote-SSH 设置中的 show login terminal】以便我们可以在 Terminal 中观察到我们的Connect Information</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%AE%BE%E7%BD%AE.jpg" alt="设置"></p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/ssh%E8%AE%BE%E7%BD%AE.jpg" alt="ssh设置"></p><h3 id="step3：连接服务器"><a href="#step3：连接服务器" class="headerlink" title="step3：连接服务器"></a>step3：连接服务器</h3><p>【连接刚刚建好的 SSH Target】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9E%E6%8E%A5.jpg" alt="连接"></p><p>【选择服务器对应的系统平台】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BF%9E%E6%8E%A5%E5%B9%B3%E5%8F%B0.jpg" alt="连接平台"></p><p>【输入 服务器密码 进行登陆】</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81.jpg" alt="输入密码"></p><p>左下角 蓝色 为连接成功，通过 Terminal 进行 conda 操作</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BB%88%E7%AB%AF.jpg" alt="终端"></p><h2 id="三、配制-jupyter-环境"><a href="#三、配制-jupyter-环境" class="headerlink" title="三、配制 jupyter 环境"></a>三、配制 jupyter 环境</h2><h3 id="step1：在-VSCode-中选择-Python-环境"><a href="#step1：在-VSCode-中选择-Python-环境" class="headerlink" title="step1：在 VSCode 中选择 Python 环境"></a>step1：在 VSCode 中选择 Python 环境</h3><p>【选择自己配置好的 conda 环境】这里选择事先安装好的虚拟环境</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%80%89%E6%8B%A9%E7%BC%96%E8%AF%91%E5%99%A8.jpg" alt="选择编译器"></p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%80%89%E6%8B%A9conda.jpg" alt="选择conda"></p><h3 id="step2：文件操作"><a href="#step2：文件操作" class="headerlink" title="step2：文件操作"></a>step2：文件操作</h3><p>【文件 - 打开文件夹】即可对服务器下文件进行操作</p><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%96%87%E4%BB%B6%E5%A4%B9%E9%80%89%E5%8F%96.jpg" alt="文件夹选取"></p><h3 id="step3：代码运行测试，成功！"><a href="#step3：代码运行测试，成功！" class="headerlink" title="step3：代码运行测试，成功！"></a>step3：代码运行测试，成功！</h3><p><img src="/2022/06/30/VSCode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%88%90%E5%8A%9F.jpg" alt="成功"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下clion安装第三方库</title>
    <link href="/2022/05/19/Linux%E4%B8%8Bclion%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    <url>/2022/05/19/Linux%E4%B8%8Bclion%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="ubuntu下安装eigen3">Ubuntu下安装eigen3</h2><h3 id="使用命令行安装方法一">1.使用命令行安装（<strong>方法一</strong>）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">sudo apt-get install libeigen3-dev<br></code></pre></td></tr></table></figure><h3 id="采用源码安装方法二">2.采用源码安装（<strong>方法二</strong>）</h3><p>进入<a href="https://eigen.tuxfamily.org/index.php?title=Main_Page">eigen</a>网址，下载对应版本源码压缩包（zip/ targz），并解压。</p><p>由于eigen只由头文件构成，因此它不需要编译；使用cmake进行安装：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">cd eigen<span class="hljs-number">-3.3</span><span class="hljs-number">.9</span><br>mkdir build<br>cd build<br>cmake ..<br>sudo make install<br><span class="hljs-comment">// 默认安装目录在（/usr/include/eigen3）</span><br></code></pre></td></tr></table></figure><p>clion下 CMakeLists.txt 配置文件写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">cmake_minimum_required(VERSION <span class="hljs-number">3.17</span>)<br>project(eigenMatrix)<br><br><span class="hljs-built_in">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">14</span>)<br><br><span class="hljs-comment">#find_package (Eigen3 3.3.9 REQUIRED)</span><br><br>include_directories(<span class="hljs-string">&quot;//usr//include//eigen3&quot;</span>)<br>add_executable(eigenMatrix main.cpp)<br><br><span class="hljs-comment">#target_link_libraries (eigenMatrix Eigen3::Eigen)</span><br></code></pre></td></tr></table></figure><h3 id="eigen语法">3. eigen语法</h3><ul><li>定义矩阵：<code>Matrix&lt;dtype, matrix_size, matrix_size&gt; var</code></li><li>定义向量（3x1）：<code>Vector3d var</code>等同于<code>Matrix&lt;double,3,1&gt; matrix_NN</code></li><li>定义方阵（3x3）：<code>Matrix3d var</code></li><li>随机数矩阵：<code>Matrix3d::Random()</code></li><li>零矩阵：<code>Matrix3d::Zero()</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// example</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Eigen/Core&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> Eigen;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Matrix&lt;<span class="hljs-type">float</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&gt; matrix_23;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 scikit-learn 解决兵王问题</title>
    <link href="/2022/04/06/%E7%94%A8scikit-learn%E8%A7%A3%E5%86%B3%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/06/%E7%94%A8scikit-learn%E8%A7%A3%E5%86%B3%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近在看机器学习的经典教材《Hands On Machine Learning with Scikit-Learn、Keras and Tensorflow》，其中大量篇幅涉及到 scikit-learn 库。就上手学了学，为了避免自己成为行动上的矮子，想着把它用起来。恰好前几天刚刚用 LibSVM 复现了兵王问题，不如这次就再用 scikit-learn 再复现一次。好吧，其实就是我懒。唉，尽学卡普空炒冷饭了！</p><span id="more"></span><p>首先可以确定兵王问题是一个分类问题。显然，我们要采用监督式学习，那就依旧采用 SVM 算法吧。既然是炒冷饭，那就炒到底！！！确定了基本框架之后，就可以开始写代码了。思路与上一次基本相同，除使用库不同外，另外一个区别就是在测试集的生成方面采用了分层抽样的思想。</p><h1 id="一、加载数据"><a href="#一、加载数据" class="headerlink" title="一、加载数据"></a>一、加载数据</h1><p>老样子，先加载数据看看里子是啥样，知己知彼才能事半功倍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data = pd.read_csv(<span class="hljs-string">&#x27;krkopt.data&#x27;</span>, names=[<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;y1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;y2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;y3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>])<br>data.head() <span class="hljs-comment"># 查看数据集的前五条</span><br></code></pre></td></tr></table></figure><p><strong>Out [1]:</strong> </p><table border="1" class="dataframe">  <thead>    <tr style="text-align: center;">      <th></th>      <th>x1</th>      <th>y1</th>      <th>x2</th>      <th>y2</th>      <th>x3</th>      <th>y3</th>      <th>result</th>    </tr>  </thead>  <tbody>    <tr style="text-align: center;">      <th>0</th>      <td>a</td>      <td>1</td>      <td>b</td>      <td>3</td>      <td>c</td>      <td>2</td>      <td>draw</td>    </tr>    <tr style="text-align: center;">      <th>1</th>      <td>a</td>      <td>1</td>      <td>c</td>      <td>1</td>      <td>c</td>      <td>2</td>      <td>draw</td>    </tr>    <tr style="text-align: center;">      <th>2</th>      <td>a</td>      <td>1</td>      <td>c</td>      <td>1</td>      <td>d</td>      <td>1</td>      <td>draw</td>    </tr>    <tr style="text-align: center;">      <th>3</th>      <td>a</td>      <td>1</td>      <td>c</td>      <td>1</td>      <td>d</td>      <td>2</td>      <td>draw</td>    </tr>    <tr style="text-align: center;">      <th>4</th>      <td>a</td>      <td>1</td>      <td>c</td>      <td>2</td>      <td>c</td>      <td>1</td>      <td>draw</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.info() <span class="hljs-comment"># 查看数据集的基本概况</span><br></code></pre></td></tr></table></figure><p><strong>Out [2]:</strong> </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;pandas.core.frame.DataFrame&#x27;</span>&gt;<br>Range<span class="hljs-keyword">Index</span>: <span class="hljs-number">28056</span> entries, <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> <span class="hljs-number">28055</span><br>Data <span class="hljs-keyword">columns</span> (total <span class="hljs-number">7</span> <span class="hljs-keyword">columns</span>):<br> #   <span class="hljs-keyword">Column</span>  Non-<span class="hljs-keyword">Null</span> Count  Dtype <br><span class="hljs-comment">---  ------  --------------  ----- </span><br> <span class="hljs-number">0</span>   x1      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  <span class="hljs-keyword">object</span><br> <span class="hljs-number">1</span>   y1      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  int64 <br> <span class="hljs-number">2</span>   x2      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  <span class="hljs-keyword">object</span><br> <span class="hljs-number">3</span>   y2      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  int64 <br> <span class="hljs-number">4</span>   x3      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  <span class="hljs-keyword">object</span><br> <span class="hljs-number">5</span>   y3      <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  int64 <br> <span class="hljs-number">6</span>   result  <span class="hljs-number">28056</span> non-<span class="hljs-keyword">null</span>  <span class="hljs-keyword">object</span><br>dtypes: int64(<span class="hljs-number">3</span>), <span class="hljs-keyword">object</span>(<span class="hljs-number">4</span>)<br>memory <span class="hljs-keyword">usage</span>: <span class="hljs-number">1.5</span>+ MB<br></code></pre></td></tr></table></figure><p>这里我们可以看到这个数据集中共有28056个实例，其中’x1’，’x2’，’x3’，’result’属性是文本格式，其他属性都是数值类型。后面肯定要对这部分文本类型的属性进行处理，下面我们再来看看这些属性中的具体内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">col_text_index = [<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>] <span class="hljs-comment"># 将文本类型的属性提取出来</span><br><span class="hljs-keyword">for</span> col_ <span class="hljs-keyword">in</span> col_text_index:<br>    <span class="hljs-built_in">print</span>(data[col_].value_counts(),<span class="hljs-string">&#x27;\n---------------&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>Out [3]:</strong> </p><pre><code class="hljs">d    12136c     8726b     5316a     1878Name: x1, dtype: int64 ---------------h    3616g    3599f    3582e    3576a    3468b    3438c    3409d    3368Name: x2, dtype: int64 ---------------h    4848g    4600f    4352e    3450a    2920d    2796b    2700c    2390Name: x3, dtype: int64 ---------------fourteen    4553thirteen    4194twelve      3597eleven      2854draw        2796fifteen     2166ten         1985nine        1712eight       1433seven        683six          592five         471sixteen      390two          246four         198three         81one           78zero          27Name: result, dtype: int64 ---------------</code></pre><p>实际上该数据集各个属性的值都是离散的，每个值都代表该属性中的一种情况，数值的大小在这里其实是没有太大意义的</p><h1 id="二、数据清洗"><a href="#二、数据清洗" class="headerlink" title="二、数据清洗"></a>二、数据清洗</h1><p>依旧按照惯例，对数据集中的文本属性进行数据清洗处理，这里使用 $sklearn.preprocessing.OrdinalEncoder $ 将分类属性中的文本处理为整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OrdinalEncoder<br>enc = OrdinalEncoder()<br>X = data.drop(<span class="hljs-string">&#x27;result&#x27;</span>, axis=<span class="hljs-number">1</span>)<br>X_tr = enc.fit_transform(X)<br>data_tr = pd.DataFrame(X_tr, columns=X.columns, index=X.index) + <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>]:<br>    <span class="hljs-built_in">print</span>(data_tr[attr].value_counts(),<span class="hljs-string">&#x27;\n---------------&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>Out [4]:</strong> </p><pre><code class="hljs">4.0    121363.0     87262.0     53161.0     1878Name: x1, dtype: int64 ---------------8.0    36167.0    35996.0    35825.0    35761.0    34682.0    34383.0    34094.0    3368Name: x2, dtype: int64 ---------------8.0    48487.0    46006.0    43525.0    34501.0    29204.0    27962.0    27003.0    2390Name: x3, dtype: int64 ---------------</code></pre><p>这里，顺便将标签也处理一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">label = data[<span class="hljs-string">&#x27;result&#x27;</span>].copy()<br>label[label!=<span class="hljs-string">&#x27;draw&#x27;</span>] = -<span class="hljs-number">1</span><br>label.replace(<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br>label.columns = <span class="hljs-string">&#x27;result&#x27;</span><br></code></pre></td></tr></table></figure><p>这样数据清洗就完毕了，来看看数据的最终效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data_tr.head()<br></code></pre></td></tr></table></figure><p><strong>Out [5]:</strong> </p><table border="1" class="dataframe">  <thead>    <tr style="text-align: center;">      <th></th>      <th>x1</th>      <th>y1</th>      <th>x2</th>      <th>y2</th>      <th>x3</th>      <th>y3</th>    </tr>  </thead>  <tbody>    <tr style="text-align: center;">      <th>0</th>      <td>1.0</td>      <td>1.0</td>      <td>2.0</td>      <td>3.0</td>      <td>3.0</td>      <td>2.0</td>    </tr>    <tr style="text-align: center;">      <th>1</th>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>      <td>1.0</td>      <td>3.0</td>      <td>2.0</td>    </tr>    <tr style="text-align: center;">      <th>2</th>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>      <td>1.0</td>      <td>4.0</td>      <td>1.0</td>    </tr>    <tr style="text-align: center;">      <th>3</th>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>      <td>1.0</td>      <td>4.0</td>      <td>2.0</td>    </tr>    <tr style="text-align: center;">      <th>4</th>      <td>1.0</td>      <td>1.0</td>      <td>3.0</td>      <td>2.0</td>      <td>3.0</td>      <td>1.0</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">label.head()<br></code></pre></td></tr></table></figure><p><strong>Out [6]:</strong> </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">2</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">3</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">4</span>    <span class="hljs-number">1</span><br><span class="hljs-attribute">Name</span>: result, dtype: int64<br></code></pre></td></tr></table></figure><h1 id="三、创建测试集"><a href="#三、创建测试集" class="headerlink" title="三、创建测试集"></a>三、创建测试集</h1><p>在进一步处理数据之前，我们需要先生成测试集。接下来，我们将只会用到训练集，测试集只有在最后的模型测试时才会用到。通常来说，测试集取全部数据集的20%即可。这里调用 $sklearn.model_selection.StratifiedShuffleSplit$ 以分层抽样的形式进行数据集划分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedShuffleSplit<br>y_tr = label.to_numpy()<br>ss = StratifiedShuffleSplit(n_splits=<span class="hljs-number">1</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><span class="hljs-keyword">for</span> train_index, test_index <span class="hljs-keyword">in</span> ss.split(X_tr, y_tr):<br>    X_trainpre, X_testpre = X_tr[train_index], X_tr[test_index]<br>    y_train, y_test = y_tr[train_index], y_tr[test_index]<br>pd.DataFrame(y_train).value_counts()<br></code></pre></td></tr></table></figure><p><strong>Out [7]:</strong> </p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>1    20207<br> 1     2237<br><span class="hljs-attribute">dtype</span>: int64<br></code></pre></td></tr></table></figure><h1 id="四、特征缩放"><a href="#四、特征缩放" class="headerlink" title="四、特征缩放"></a>四、特征缩放</h1><p>   特征缩放是数据预处理中重要的环节之一，如果输入的数值属性有非常大的比例差异，往往会导致机器学习算法的性能表现不佳。同比例缩放所有属性的两种常用方法是最小-最大缩放和标准化。其中，标准化方法受到异常值的影响更小，这里尝试使用标准化方法。scikit-learn库中对应的类是 $sklearn.preprocessing.StandardScaler$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br>scaler = StandardScaler()<br>X_train = scaler.fit_transform(X_trainpre)<br>X_test = scaler.transform(X_testpre)<br>pd.DataFrame(X_test, columns=data_tr.columns).head()<br></code></pre></td></tr></table></figure><p><strong>Out [8]:</strong> </p><table border="1" class="dataframe">  <thead>    <tr style="text-align: center;">      <th></th>      <th>x1</th>      <th>y1</th>      <th>x2</th>      <th>y2</th>      <th>x3</th>      <th>y3</th>    </tr>  </thead>  <tbody>    <tr style="text-align: center;">      <th>0</th>      <td>0.947896</td>      <td>1.235042</td>      <td>-0.239276</td>      <td>-0.226981</td>      <td>0.415659</td>      <td>-1.532498</td>    </tr>    <tr style="text-align: center;">      <th>1</th>      <td>-0.119730</td>      <td>-0.923108</td>      <td>0.195286</td>      <td>1.088712</td>      <td>-1.748052</td>      <td>-0.202882</td>    </tr>    <tr style="text-align: center;">      <th>2</th>      <td>-0.119730</td>      <td>0.155967</td>      <td>-0.239276</td>      <td>1.088712</td>      <td>-1.748052</td>      <td>-0.646088</td>    </tr>    <tr style="text-align: center;">      <th>3</th>      <td>-2.254982</td>      <td>-0.923108</td>      <td>-1.108400</td>      <td>1.088712</td>      <td>-0.017083</td>      <td>-1.089293</td>    </tr>    <tr style="text-align: center;">      <th>4</th>      <td>-1.187356</td>      <td>-0.923108</td>      <td>0.195286</td>      <td>0.211583</td>      <td>-1.315310</td>      <td>1.126734</td>    </tr>  </tbody></table><h1 id="五、模型选择"><a href="#五、模型选择" class="headerlink" title="五、模型选择"></a>五、模型选择</h1><p>   我们选择 RBF 内核的支持向量机，有两个超参数 $C$，$\gamma$ 进行确定。LibSVM 的帮助文档中建议 $C\in [2^{-5}, 2^{15}]$，$\gamma\in[2^{-15},2^{3}]$。这里我们遵循文档规定，在此范围内进行粗略搜索；同时这里采用五折交叉验证方法对超参数的优劣进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearnex <span class="hljs-keyword">import</span> patch_sklearn<br>patch_sklearn()<br><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br>C_range = np.logspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, base=<span class="hljs-number">2</span>)<br>gamma_range = np.logspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, base=<span class="hljs-number">2</span>)<br>param_grid = <span class="hljs-built_in">dict</span>(gamma=gamma_range, C=C_range)<br>cv = StratifiedShuffleSplit(n_splits=<span class="hljs-number">5</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br>grid = GridSearchCV(SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>), param_grid=param_grid, cv=cv, verbose=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>grid.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">&quot;The best parameters are %s with a score of %0.4f&quot;</span><br>    % (grid.best_params_, grid.best_score_)<br>)<br></code></pre></td></tr></table></figure><p><strong>Out [9]:</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Fitting 5 folds <span class="hljs-keyword">for</span> each of 110 candidates, totalling 550 fits<br>[CV 1/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.4s<br>[CV 2/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 3/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 4/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 5/5] END .<span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=3.0517578125e-05;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=0.0001220703125;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=0.0001220703125;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 3/5] END <span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=0.0001220703125;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=0.03125, <span class="hljs-attribute">gamma</span>=0.0001220703125;, <span class="hljs-attribute">score</span>=0.900 total time=   0.2s<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.03125;, <span class="hljs-attribute">score</span>=0.996 total time=   6.9s<br>[CV 5/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.03125;, <span class="hljs-attribute">score</span>=0.997 total time=   7.6s<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.994 total time=   1.4s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.996 total time=   1.2s<br>[CV 3/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.995 total time=   1.2s<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.996 total time=   1.3s<br>[CV 5/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.125;, <span class="hljs-attribute">score</span>=0.997 total time=   1.3s<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.5;, <span class="hljs-attribute">score</span>=0.999 total time=   0.3s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-attribute">C</span>=32768.0, <span class="hljs-attribute">gamma</span>=0.5;, <span class="hljs-attribute">score</span>=0.997 total time=   0.3s<br>The best parameters are &#123;<span class="hljs-string">&#x27;C&#x27;</span>: 512.0, <span class="hljs-string">&#x27;gamma&#x27;</span>: 0.5&#125; with a score of 0.9976<br></code></pre></td></tr></table></figure><p>参数搜索完毕，最好的模型精度可以达到 <strong>99.76%</strong> ，似乎还不错！这就完了？当然没有，也许会存在更优的解，也不一定。花点时间做更进一步搜索也值得，我们可以在前面粗略搜索的最优参数附近作进一步的精细搜索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取粗略搜索得到的最优参数</span><br>C_current_best = grid.best_params_[<span class="hljs-string">&#x27;C&#x27;</span>]<br>gamma_current_best = grid.best_params_[<span class="hljs-string">&#x27;gamma&#x27;</span>]<br>index_C = np.where(C_range == C_current_best)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>index_Gamma = np.where(gamma_range == gamma_current_best)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 计算精细搜索的参数范围</span><br>n = <span class="hljs-number">10</span><br>CScale = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>)<br>minCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_C-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(CScale), index_C+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>CRange_finer = np.logspace(minCScale, maxCScale, n+<span class="hljs-number">1</span>, base=<span class="hljs-number">2</span>)<br><br>GammaScale = np.linspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>minGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_Gamma-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(GammaScale), index_Gamma+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>GammaRange_finer = np.logspace(minGammaScale, maxGammaScale, n+<span class="hljs-number">1</span>, base=<span class="hljs-number">2</span>)<br><br>param_grid = <span class="hljs-built_in">dict</span>(gamma=GammaRange_finer, C=CRange_finer)<br>cv = StratifiedShuffleSplit(n_splits=<span class="hljs-number">5</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br>grid = GridSearchCV(SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>), param_grid=param_grid, cv=cv, verbose=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>grid.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">&quot;The best parameters are %s with a score of %0.4f&quot;</span><br>    % (grid.best_params_, grid.best_score_)<br>)<br></code></pre></td></tr></table></figure><p><strong>Out [10]:</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Fitting 5 folds <span class="hljs-keyword">for</span> each of 121 candidates, totalling 605 fits<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.998 total time=   0.4s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.997 total time=   0.4s<br>[CV 3/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.997 total time=   0.4s<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.996 total time=   0.3s<br>[CV 5/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=256.0, <span class="hljs-attribute">gamma</span>=0.25;, <span class="hljs-attribute">score</span>=0.996 total time=   0.4s<br><span class="hljs-built_in">..</span>.<br>[CV 1/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.998 total time=   0.3s<br>[CV 2/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.998 total time=   0.4s<br>[CV 3/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.997 total time=   0.3s<br>[CV 4/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.997 total time=   0.4s<br>[CV 5/5] END <span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=0.8705505632961241;, <span class="hljs-attribute">score</span>=0.999 total time=   0.4s<br>[CV 1/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.998 total time=   0.3s<br>[CV 2/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.997 total time=   0.3s<br>[CV 3/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.997 total time=   0.3s<br>[CV 4/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.997 total time=   0.4s<br>[CV 5/5] END <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-attribute">C</span>=1024.0, <span class="hljs-attribute">gamma</span>=1.0;, <span class="hljs-attribute">score</span>=0.999 total time=   0.3s<br>The best parameters are &#123;<span class="hljs-string">&#x27;C&#x27;</span>: 256.0, <span class="hljs-string">&#x27;gamma&#x27;</span>: 0.7578582832551991&#125; with a score of 0.9977<br></code></pre></td></tr></table></figure><p>到这里，我们的参数搜索已经完成。剩下的就是创建 SVM 模型了，这步就很简单了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><br>model =SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>, gamma=grid.best_params_[<span class="hljs-string">&#x27;gamma&#x27;</span>], C=grid.best_params_[<span class="hljs-string">&#x27;C&#x27;</span>])<br>model.fit(X_train, y_train)<br>pre = model.predict(X_test)<br>accuracy_score(y_test, pre)<br></code></pre></td></tr></table></figure><p><strong>Out [11]:</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">测试集准确率：0.998039914468995<br></code></pre></td></tr></table></figure><h1 id="六、代码展示"><a href="#六、代码展示" class="headerlink" title="六、代码展示"></a>六、代码展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">project: 用 scikit-learn 解决兵王问题</span><br><span class="hljs-string">author：Northfourta</span><br><span class="hljs-string">date：2022/04/06</span><br><span class="hljs-string">dependent libraries：</span><br><span class="hljs-string">- numpy</span><br><span class="hljs-string">- pandas</span><br><span class="hljs-string">- scikit-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OrdinalEncoder<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedShuffleSplit<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">from</span> sklearnex <span class="hljs-keyword">import</span> patch_sklearn<br>patch_sklearn() <span class="hljs-comment"># scikit-learn 加速包</span><br><br><span class="hljs-comment"># 加载数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;krkopt.data&#x27;</span>, names=[<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;y1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;y2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;y3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>])<br><span class="hljs-comment"># 数据清洗</span><br>enc = OrdinalEncoder()<br>X = data.drop(<span class="hljs-string">&#x27;result&#x27;</span>, axis=<span class="hljs-number">1</span>)<br>X_tr = enc.fit_transform(X)<br><br>label = data[<span class="hljs-string">&#x27;result&#x27;</span>].copy()<br>label[label!=<span class="hljs-string">&#x27;draw&#x27;</span>] = -<span class="hljs-number">1</span><br>label.replace(<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 创建测试集</span><br>y_tr = label.to_numpy()<br>ss = StratifiedShuffleSplit(n_splits=<span class="hljs-number">1</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><span class="hljs-keyword">for</span> train_index, test_index <span class="hljs-keyword">in</span> ss.split(X_tr, y_tr):<br>    X_trainpre, X_testpre = X_tr[train_index], X_tr[test_index]<br>    y_train, y_test = y_tr[train_index], y_tr[test_index]<br>    <br><span class="hljs-comment"># 特征缩放</span><br>scaler = StandardScaler()<br>X_train = scaler.fit_transform(X_trainpre)<br>X_test = scaler.transform(X_testpre)<br><br><span class="hljs-comment"># 模型选择</span><br>C_range = np.logspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, base=<span class="hljs-number">2</span>)<br>gamma_range = np.logspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, base=<span class="hljs-number">2</span>)<br>param_grid = <span class="hljs-built_in">dict</span>(gamma=gamma_range, C=C_range)<br>cv = StratifiedShuffleSplit(n_splits=<span class="hljs-number">5</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br>grid = GridSearchCV(SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>), param_grid=param_grid, cv=cv, verbose=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>grid.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">&quot;The best parameters are %s with a score of %0.4f&quot;</span><br>    % (grid.best_params_, grid.best_score_)<br>)<br><br><span class="hljs-comment"># 获取粗略搜索得到的最优参数</span><br>C_current_best = grid.best_params_[<span class="hljs-string">&#x27;C&#x27;</span>]<br>gamma_current_best = grid.best_params_[<span class="hljs-string">&#x27;gamma&#x27;</span>]<br>index_C = np.where(C_range == C_current_best)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>index_Gamma = np.where(gamma_range == gamma_current_best)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 计算精细搜索的参数范围</span><br>n = <span class="hljs-number">10</span><br>CScale = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>)<br>minCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_C-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(CScale), index_C+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>CRange_finer = np.logspace(minCScale, maxCScale, n+<span class="hljs-number">1</span>, base=<span class="hljs-number">2</span>)<br><br>GammaScale = np.linspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>minGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_Gamma-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(GammaScale), index_Gamma+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>GammaRange_finer = np.logspace(minGammaScale, maxGammaScale, n+<span class="hljs-number">1</span>, base=<span class="hljs-number">2</span>)<br><br>param_grid = <span class="hljs-built_in">dict</span>(gamma=GammaRange_finer, C=CRange_finer)<br>cv = StratifiedShuffleSplit(n_splits=<span class="hljs-number">5</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br>grid = GridSearchCV(SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>), param_grid=param_grid, cv=cv, verbose=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br>grid.fit(X_train, y_train)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">&quot;The best parameters are %s with a score of %0.4f&quot;</span><br>    % (grid.best_params_, grid.best_score_)<br>)<br><br><span class="hljs-comment"># 模型创建</span><br>model =SVC(kernel=<span class="hljs-string">&#x27;rbf&#x27;</span>, gamma=grid.best_params_[<span class="hljs-string">&#x27;gamma&#x27;</span>], C=grid.best_params_[<span class="hljs-string">&#x27;C&#x27;</span>])<br>model.fit(X_train, y_train)<br>pre = model.predict(X_test)<br>accuracy_score(y_test, pre)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SVM</tag>
      
      <tag>机器学习</tag>
      
      <tag>Python</tag>
      
      <tag>scikit-learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于LibSVM的兵王问题实现</title>
    <link href="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>纸上得来终觉浅，绝知此事要躬行。为了将 LibSVM 库的学习赋予实践，博主在这里基于 Python 的 LibSVM 对浙江大学《机器学习》课程中的兵王问题进行了复现，并以此博客来记录自己的学习过程。 </p><span id="more"></span><h1 id="一、问题背景"><a href="#一、问题背景" class="headerlink" title="一、问题背景"></a>一、问题背景</h1><p>国际象棋的兵王问题：棋盘上黑方只剩一个王，白方剩一个王 一个兵，棋局只有两个结果：“白方将死黑方获胜”或者“和棋”，这个问题属于二分类的问题。这里要利用支持向量机解决这个问题，实现在不告诉计算机国际象棋规则的前提下，让计算机可以根据棋子位置判断棋局的结果。</p><h1 id="二、数据集"><a href="#二、数据集" class="headerlink" title="二、数据集"></a>二、数据集</h1><p>本次用到的数据集为 <strong>UCI Machine Learning Repository:</strong> <a href="http://archive.ics.uci.edu/ml/datasets/Chess+(King-Rook+vs.+King)">Chess (King-Rook vs. King) Data Set</a></p><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A6%82%E5%86%B5.jpg"></p><p>数据集一共包含28056个数据，其中“和棋”样本2796个，“白方胜”样本25260个。数据集的解释如下</p><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98.jpg"></p><h1 id="三、LibSVM工具包"><a href="#三、LibSVM工具包" class="headerlink" title="三、LibSVM工具包"></a>三、LibSVM工具包</h1><p>LibSVM是由台湾大学林智仁教授等开发设计的SVM工具包，支持C， C++， Java，Python ， R 和 Matlab 等</p><h2 id="1-为Python安装LibSVM"><a href="#1-为Python安装LibSVM" class="headerlink" title="1. 为Python安装LibSVM"></a>1. 为Python安装LibSVM</h2><p>利用pip运行如下安装命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install -U libsvm-official<br></code></pre></td></tr></table></figure><h2 id="2-LibSVM的使用"><a href="#2-LibSVM的使用" class="headerlink" title="2. LibSVM的使用"></a>2. LibSVM的使用</h2><p>LibSVM的使用非常简单，只需调用其为我们提供的接口即可，这里我们只需了解其常用的几个接口：</p><ul><li>svm_problem</li><li>svm_parameter</li><li>svm_train</li><li>svm_predict</li><li>svm_save_model</li><li>svm_load_model</li></ul><p>具体用法可以参考博主 finley 写的这篇博客：<a href="https://www.cnblogs.com/Finley/p/5329417.html">LibSVM for Python 使用</a>，个人觉得很详细。</p><h1 id="四、实现流程"><a href="#四、实现流程" class="headerlink" title="四、实现流程"></a>四、实现流程</h1><h2 id="1-预处理数据"><a href="#1-预处理数据" class="headerlink" title="1. 预处理数据"></a>1. 预处理数据</h2><p>首先，尝试加载数据，并观察其内容与分布等基本信息，便于我们后续处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libsvm.svmutil <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 加载数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;krkopt.data&#x27;</span>, header=<span class="hljs-literal">None</span>)<br>data.columns=[<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;y1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;y2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;y3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>] <span class="hljs-comment"># 为其columns标签</span><br>data.describe() <span class="hljs-comment"># 观察数据的基本信息</span><br></code></pre></td></tr></table></figure><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E6%95%B0%E6%8D%AE%E8%A7%82%E5%AF%9F1.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.head() <span class="hljs-comment"># 观察前5个数据</span><br></code></pre></td></tr></table></figure><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E6%95%B0%E6%8D%AE%E8%A7%82%E5%AF%9F2.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 观察数据每列的内容</span><br>In[<span class="hljs-number">1</span>]:<br>columns = <span class="hljs-built_in">list</span>(data.columns)<br><span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> columns:<br>    <span class="hljs-built_in">print</span>(column, <span class="hljs-string">&#x27;: &#x27;</span>, data[column].unique())<br>-----------------------------------------------------    <br>Out[<span class="hljs-number">1</span>]:<br>x1 :  [<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-string">&#x27;d&#x27;</span>]<br>y1 :  [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br>x2 :  [<span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-string">&#x27;f&#x27;</span> <span class="hljs-string">&#x27;g&#x27;</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span>]<br>y2 :  [<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<br>x3 :  [<span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-string">&#x27;f&#x27;</span> <span class="hljs-string">&#x27;g&#x27;</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;b&#x27;</span>]<br>y3 :  [<span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<br>result :  [<span class="hljs-string">&#x27;draw&#x27;</span> <span class="hljs-string">&#x27;zero&#x27;</span> <span class="hljs-string">&#x27;one&#x27;</span> <span class="hljs-string">&#x27;two&#x27;</span> <span class="hljs-string">&#x27;three&#x27;</span> <span class="hljs-string">&#x27;four&#x27;</span> <span class="hljs-string">&#x27;five&#x27;</span> <span class="hljs-string">&#x27;six&#x27;</span> <span class="hljs-string">&#x27;seven&#x27;</span> <span class="hljs-string">&#x27;eight&#x27;</span><br> <span class="hljs-string">&#x27;nine&#x27;</span> <span class="hljs-string">&#x27;ten&#x27;</span> <span class="hljs-string">&#x27;eleven&#x27;</span> <span class="hljs-string">&#x27;twelve&#x27;</span> <span class="hljs-string">&#x27;thirteen&#x27;</span> <span class="hljs-string">&#x27;fourteen&#x27;</span> <span class="hljs-string">&#x27;fifteen&#x27;</span> <span class="hljs-string">&#x27;sixteen&#x27;</span>]<br></code></pre></td></tr></table></figure><p>可以发现数据中存在的字符类型，这显然是不行的，我们需要对其进行数值化处理。a，b，c等代表的是棋子的横坐标位置，不妨用1代表a，2代表b，以此类推；同样对于结果而言，利用+1替代draw（正样本），其他则用-1代替（负样本），代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将样本进行数值化</span><br>data.replace(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">5</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">6</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">7</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-number">8</span>, inplace=<span class="hljs-literal">True</span>)<br>data.loc[data[<span class="hljs-string">&#x27;result&#x27;</span>]!=<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-string">&#x27;result&#x27;</span>] = -<span class="hljs-number">1</span><br>data.loc[data[<span class="hljs-string">&#x27;result&#x27;</span>]==<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-string">&#x27;result&#x27;</span>] = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/2022/03/22/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0/%E5%9F%BA%E4%BA%8ELibSVM%E7%9A%84%E5%85%B5%E7%8E%8B%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%5C%E6%95%B0%E5%80%BC%E5%8C%96.jpg"></p><p>为了消除指标之间的量纲影响，而对训练造成影响，需要进行数据<strong>标准化处理</strong>：<br>$$<br>Xtraining &#x3D; \frac{Xtraining - meanX}{stdX}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 标准化</span><br>meanX = np.mean(XTraining, axis=<span class="hljs-number">0</span>)<br>stdX = np.std(XTraining, axis=<span class="hljs-number">0</span>)<br>XTraining = (XTraining - meanX) / stdX<br>XTesting = (XTesting - meanX) / stdX<br></code></pre></td></tr></table></figure><p>到这里，数据的预处理已经完成，下面我们就可以正式开始构建我们自己的 SVM 模型了。</p><h2 id="2-超参数选择"><a href="#2-超参数选择" class="headerlink" title="2. 超参数选择"></a>2. 超参数选择</h2><p>我们选择 RBF 内核的支持向量机，有两个超参数 $C$，$\gamma$ 进行确定。LibSVM 的帮助文档中建议 $C\in [2^{-5}, 2^{15}]$，$\gamma\in[2^{-15},2^{3}]$。这里我们遵循文档规定，在此范围内进行粗略搜索；同时这里采用五折交叉验证方法对超参数的优劣进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">In[<span class="hljs-number">2</span>]:<br><span class="hljs-comment"># 限制超参数的搜索范围</span><br>CScale = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>)<br>GammaScale = np.linspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>C = np.full_like(CScale, <span class="hljs-number">2</span>) ** CScale<br>Gamma = np.full_like(GammaScale, <span class="hljs-number">2</span>) ** GammaScale<br>MAX_ACC = <span class="hljs-number">0</span><br>prob  = svm_problem(YTraining, XTraining)<br><span class="hljs-comment"># 进行粗略的超参数的搜索</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Gamma)): <br>        <span class="hljs-comment"># [&#x27;-t 2 -c &#x27;+ str(C[i]) + &#x27; -g &#x27; + str(Gamma[j]) + &#x27; -v 5&#x27;]含义：</span><br>        <span class="hljs-comment"># -t 2：      SVM采用RBF内核</span><br>        <span class="hljs-comment"># -c + str(C[i])：      C 的数值为 C[i]</span><br>        <span class="hljs-comment"># -g + str(Gamma[j])：  gamma 数值为 Gamma[j]</span><br>        <span class="hljs-comment"># -v 5：      五折交叉验证</span><br>        param = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C[i]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma[j]) + <span class="hljs-string">&#x27; -v 5&#x27;</span>)<br>        ACC = svm_train(prob, param)<br>        <span class="hljs-keyword">if</span> ACC &gt; MAX_ACC:<br>            MAX_ACC = ACC<br>            index_C = i<br>            index_Gamma = j<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最大识别率为：%f\n，C=%f\n,Gamma=%f\n&#x27;</span>%(MAX_ACC, C[index_C], Gamma[index_Gamma]))<br>-----------------------------------------<br>Out[<span class="hljs-number">2</span>]:<br>Cross Validation Accuracy = <span class="hljs-number">89.98</span>%<br>Cross Validation Accuracy = <span class="hljs-number">89.98</span>%<br><br>.......<br>Cross Validation Accuracy = <span class="hljs-number">90.32</span>%<br>Cross Validation Accuracy = <span class="hljs-number">90.24</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.28</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.3</span>%<br>Cross Validation Accuracy = <span class="hljs-number">98.96</span>%<br>最大识别率为：<span class="hljs-number">99.420000</span><br>C=<span class="hljs-number">2048.000000</span><br>Gamma=<span class="hljs-number">0.031250</span><br></code></pre></td></tr></table></figure><p>经过粗略的搜索，发现 $C&#x3D;2048$，$\gamma&#x3D;0.3125$ 时，验证集的准确率较高；这就完了？当然没有。也许会有更好结果，说不准呢。我们可以考虑在目前得到的最优值附近进行进一步搜索，期望可以得到意外收获。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">In[<span class="hljs-number">3</span>]:<br><span class="hljs-comment"># 利用粗略搜索得到的结果限制精细搜索的范围</span><br>n = <span class="hljs-number">10</span><br>minCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_C-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(CScale), index_C+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>CScale_finer = np.linspace(minCScale, maxCScale, n+<span class="hljs-number">1</span>)<br><br>minGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_Gamma-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(GammaScale), index_Gamma+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>GammaScale_finer = np.linspace(minGammaScale, maxGammaScale, n+<span class="hljs-number">1</span>)<br><br>C_finer = np.full_like(CScale_finer, <span class="hljs-number">2</span>) ** CScale_finer<br>Gamma_finer = np.full_like(GammaScale_finer, <span class="hljs-number">2</span>) ** GammaScale_finer<br><span class="hljs-comment"># 进行精细搜索</span><br>MaxACC = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C_finer)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Gamma_finer)): <br>        param = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C_finer[i]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma_finer[j]) + <span class="hljs-string">&#x27; -v 5&#x27;</span>)<br>        ACC = svm_train(prob, param)<br>        <span class="hljs-keyword">if</span> ACC &gt; MaxACC:    <br>            MaxACC = ACC<br>            index_Cfiner = i<br>            index_Gammafiner = j<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最大识别率为：%f\nC=%f\nGamma=%f\n&#x27;</span>%(MaxACC, C_finer[index_Cfiner], Gamma_finer[index_Gammafiner]))<br>---------------------------------------------<br>Out[<span class="hljs-number">3</span>]:<br>Cross Validation Accuracy = <span class="hljs-number">99.34</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.36</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.32</span>%<br>.....<br>Cross Validation Accuracy = <span class="hljs-number">99.24</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.24</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.06</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.24</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.3</span>%<br>Cross Validation Accuracy = <span class="hljs-number">99.2</span>%<br>最大识别率为：<span class="hljs-number">99.540000</span><br>C=<span class="hljs-number">1176.267116</span><br>Gamma=<span class="hljs-number">0.041235</span><br></code></pre></td></tr></table></figure><p>到这里，我们的超参数的搜索结束了，确定 $C&#x3D;1176.267$，$\gamma&#x3D;0.041235$；利用此参数再次训练得到最终的 SVM 模型，并将其存为【model_file】文件，再调用该模型进行测试集的分类，结果显示准确率达到 99.41%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">In[<span class="hljs-number">4</span>]:<br>paramTraining = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C_finer[index_Cfiner]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma_finer[index_Gammafiner]))<br>model = svm_train(prob, paramTraining)<br>svm_save_model(<span class="hljs-string">&#x27;model_file&#x27;</span>, model)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test: &#x27;</span>)<br>p_label, p_acc, pval = svm_predict(YTesting, XTesting, model)<br>----------------------------------------<br>Out[<span class="hljs-number">4</span>]:<br>test: <br>Accuracy = <span class="hljs-number">99.4101</span>% (<span class="hljs-number">22920</span>/<span class="hljs-number">23056</span>) (classification)<br></code></pre></td></tr></table></figure><h1 id="五、完整代码展示"><a href="#五、完整代码展示" class="headerlink" title="五、完整代码展示"></a>五、完整代码展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libsvm.svmutil <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 加载数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;krkopt.data&#x27;</span>, header=<span class="hljs-literal">None</span>)<br>data.columns=[<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-string">&#x27;y1&#x27;</span>,<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-string">&#x27;y2&#x27;</span>,<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-string">&#x27;y3&#x27;</span>,<span class="hljs-string">&#x27;result&#x27;</span>] <span class="hljs-comment"># 为其columns标签</span><br><br><span class="hljs-comment"># 将样本进行数值化</span><br>data.replace(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">5</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">6</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">7</span>, inplace=<span class="hljs-literal">True</span>)<br>data.replace(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-number">8</span>, inplace=<span class="hljs-literal">True</span>)<br>data.loc[data[<span class="hljs-string">&#x27;result&#x27;</span>]!=<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-string">&#x27;result&#x27;</span>] = -<span class="hljs-number">1</span><br>data.loc[data[<span class="hljs-string">&#x27;result&#x27;</span>]==<span class="hljs-string">&#x27;draw&#x27;</span>, <span class="hljs-string">&#x27;result&#x27;</span>] = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 将数据处理</span><br>sample = data.to_numpy()<br>np.random.shuffle(sample)<br>XTraining = sample[:<span class="hljs-number">5000</span>, :-<span class="hljs-number">1</span>].astype(np.float32)<br>YTraining =  sample[:<span class="hljs-number">5000</span>, -<span class="hljs-number">1</span>]<br>XTesting = sample[<span class="hljs-number">5000</span>: , :-<span class="hljs-number">1</span>].astype(np.float32)<br>YTesting =  sample[<span class="hljs-number">5000</span>: , -<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 标准化</span><br>meanX = np.mean(XTraining, axis=<span class="hljs-number">0</span>)<br>stdX = np.std(XTraining, axis=<span class="hljs-number">0</span>)<br>XTraining = (XTraining - meanX) / stdX<br>XTesting = (XTesting - meanX) / stdX<br><br><span class="hljs-comment"># 限制超参数的搜索范围</span><br>CScale = np.linspace(-<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>)<br>GammaScale = np.linspace(-<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>C = np.full_like(CScale, <span class="hljs-number">2</span>) ** CScale<br>Gamma = np.full_like(GammaScale, <span class="hljs-number">2</span>) ** GammaScale<br>MAX_ACC = <span class="hljs-number">0</span><br>prob  = svm_problem(YTraining, XTraining)<br><span class="hljs-comment"># 进行粗略的超参数的搜索</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Gamma)): <br>        <span class="hljs-comment"># [&#x27;-t 2 -c &#x27;+ str(C[i]) + &#x27; -g &#x27; + str(Gamma[j]) + &#x27; -v 5&#x27;]含义：</span><br>        <span class="hljs-comment"># -t 2：      SVM采用RBF内核</span><br>        <span class="hljs-comment"># -c + str(C[i])：      C 的数值为 C[i]</span><br>        <span class="hljs-comment"># -g + str(Gamma[j])：  gamma 数值为 Gamma[j]</span><br>        <span class="hljs-comment"># -v 5：      五折交叉验证</span><br>        param = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C[i]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma[j]) + <span class="hljs-string">&#x27; -v 5&#x27;</span>)<br>        ACC = svm_train(prob, param)<br>        <span class="hljs-keyword">if</span> ACC &gt; MAX_ACC:<br>            MAX_ACC = ACC<br>            index_C = i<br>            index_Gamma = j<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------------------------\n粗略搜索完成！&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;粗略搜索下的结果：\n最大识别率为 %f\n，C=%f\n,Gamma=%f\n&#x27;</span>%(MAX_ACC, C[index_C], Gamma[index_Gamma]))<br><br><span class="hljs-comment"># 利用粗略搜索得到的结果限制精细搜索的范围</span><br>n = <span class="hljs-number">10</span><br>minCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_C-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxCScale = (CScale[index_C] + CScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(CScale), index_C+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>CScale_finer = np.linspace(minCScale, maxCScale, n+<span class="hljs-number">1</span>)<br><br>minGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, index_Gamma-<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>maxGammaScale = (GammaScale[index_Gamma] + GammaScale[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(GammaScale), index_Gamma+<span class="hljs-number">1</span>)]) * <span class="hljs-number">0.5</span><br>GammaScale_finer = np.linspace(minGammaScale, maxGammaScale, n+<span class="hljs-number">1</span>)<br><br>C_finer = np.full_like(CScale_finer, <span class="hljs-number">2</span>) ** CScale_finer<br>Gamma_finer = np.full_like(GammaScale_finer, <span class="hljs-number">2</span>) ** GammaScale_finer<br><span class="hljs-comment"># 进行精细搜索</span><br>MaxACC = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C_finer)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Gamma_finer)): <br>        param = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C_finer[i]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma_finer[j]) + <span class="hljs-string">&#x27; -v 5&#x27;</span>)<br>        ACC = svm_train(prob, param)<br>        <span class="hljs-keyword">if</span> ACC &gt; MaxACC:    <br>            MaxACC = ACC<br>            index_Cfiner = i<br>            index_Gammafiner = j<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------------------------\n精细搜索完成！&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;精细搜索下的结果：\n最大识别率为 %f\nC=%f\nGamma=%f\n&#x27;</span>%(MaxACC, C_finer[index_Cfiner], Gamma_finer[index_Gammafiner]))<br><br><span class="hljs-comment"># 构建 SVM 模型</span><br>paramTraining = svm_parameter(<span class="hljs-string">&#x27;-t 2 -c &#x27;</span>+ <span class="hljs-built_in">str</span>(C_finer[index_Cfiner]) + <span class="hljs-string">&#x27; -g &#x27;</span> + <span class="hljs-built_in">str</span>(Gamma_finer[index_Gammafiner]))<br>model = svm_train(prob, paramTraining)<br>svm_save_model(<span class="hljs-string">&#x27;model_file&#x27;</span>, model)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test: &#x27;</span>)<br>p_label, p_acc, pval = svm_predict(YTesting, XTesting, model)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SVM</tag>
      
      <tag>机器学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用vps实现科学上网</title>
    <link href="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p>自己动手丰衣足食，今天教大家如何从零搭建一台属于自己的梯子，让你科学上网不必求人。（此篇博客并不涉及基本原理的讲解，只负责基本实现，对原理有兴趣的同学可自行探究。）</p><span id="more"></span><h2 id="一准备工作">一、准备工作</h2><h3 id="v2rayn客户端下载windows">1. v2rayN客户端下载（windows）</h3><p>下载方式一：GitHub</p><p>【v2rayN.exe Release】：<a href="https://github.com/v2ray/v2ray-core/releases">v2rayN Downloadurl</a></p><p>解压【【点击 v2rayN.exe 启动】】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray.exe.png"></p><h3 id="购买vps服务器">2. 购买vps服务器</h3><p>推荐购买国外的vps服务器，这里博主使用GitHub学生礼包购买的digitalocean的vps服务器，$5/month</p><p>【1. 系统镜像选择Ubuntu即可】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_1.jpg"></p><p>【2. vps选择最低配即可，每月5刀】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_2.jpg"></p><p>【3. 服务器地址选择根据个人情况，这里博主选择的是洛杉矶】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_3.jpg"></p><p>【4. 配置选择完成后，便可以创建服务器】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_4.jpg"></p><h2 id="二连接服务器">二、连接服务器</h2><p>连接服务器有多种途径，可以通过xshell进行远程连接，博主这里选择通过digitalocean提供的接口进行网页连接</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_5.jpg"></p><p>【连接成功！！！】</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_sucess.jpg"></p><h2 id="三搭建梯子">三、搭建梯子</h2><p>由于刚购置Linux没有进行配置，所以需要大家先安装crul进行配置，复制命令粘贴按确认即可</p><p>【ubuntu/debian 系统安装 Curl 方法:】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">apt-get update -y &amp;&amp; apt-get install curl -y<br></code></pre></td></tr></table></figure><p>【centos 系统安装 Curl 方法:】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">yum update -y &amp;&amp; yum install curl -y<br></code></pre></td></tr></table></figure><p>下载完成后运行如下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">bash &lt;(curl -s -L https:<span class="hljs-comment">//git.io/v2rayinstall.sh)</span><br></code></pre></td></tr></table></figure><p>按照步骤安装即可（如果不清楚都选择<strong>默认</strong>），得到如下界面则说明安装成功</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/install.jpg"></p><p>输入【v2ray url】可以得到一串vmess链接，将其复制到客户端即可</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vmess.png"></p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/connect.jpg"></p><h2 id="四v2ray提速">四、v2ray提速</h2><p>安装bbr</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/bbr.png"></p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/bbr1.png"></p><h2 id="五搭建成功效果">五、搭建成功效果</h2><p>ok，成功登陆Google and YouTube ！！！</p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/google.jpg"></p><p><img src="/2022/03/14/%E5%88%A9%E7%94%A8vps%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/youtube.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科学上网</tag>
      
      <tag>梯子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Python的UCAS课程网站课件下载程序</title>
    <link href="/2022/01/22/%E5%9F%BA%E4%BA%8EPython%E7%9A%84UCAS%E8%AF%BE%E7%A8%8B%E7%BD%91%E7%AB%99%E8%AF%BE%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/"/>
    <url>/2022/01/22/%E5%9F%BA%E4%BA%8EPython%E7%9A%84UCAS%E8%AF%BE%E7%A8%8B%E7%BD%91%E7%AB%99%E8%AF%BE%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>由于<a href="http://sep.ucas.ac.cn/">UCAS</a>的课程网站无法进行批量下载课件（太反人类了），本人写了一个爬虫小程序，只需手动输入用户名、密码、验证码，即可实现课件的自动下载，解放双手。</p><span id="more"></span><h2 id="1-依赖库"><a href="#1-依赖库" class="headerlink" title="1. 依赖库"></a>1. 依赖库</h2><ul><li>requests</li><li>BeautifulSoup4</li><li>Image</li><li>os</li></ul><h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h2><p>使用requests库请求得到网页内容，BeautifulSoup 解析网页内容。验证码原本打算采用tesseract库进行OCR识别，但无奈识别效果不佳（有空再研究研究），最终选择人工输入验证码。</p><p><img src="/2022/01/22/%E5%9F%BA%E4%BA%8EPython%E7%9A%84UCAS%E8%AF%BE%E7%A8%8B%E7%BD%91%E7%AB%99%E8%AF%BE%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/sep.png"></p><h2 id="3-演示效果"><a href="#3-演示效果" class="headerlink" title="3. 演示效果"></a>3. 演示效果</h2><p><img src="/2022/01/22/%E5%9F%BA%E4%BA%8EPython%E7%9A%84UCAS%E8%AF%BE%E7%A8%8B%E7%BD%91%E7%AB%99%E8%AF%BE%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/show.gif"></p><h2 id="4-代码展示"><a href="#4-代码展示" class="headerlink" title="4. 代码展示"></a>4. 代码展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">project： 基于Python的UCAS课程网站课件下载程序</span><br><span class="hljs-string">author: Northfourta</span><br><span class="hljs-string">dependent libraries:</span><br><span class="hljs-string">    1. requests;</span><br><span class="hljs-string">    2. BeautifulSoup4;</span><br><span class="hljs-string">    3. Image;</span><br><span class="hljs-string">    4. os</span><br><span class="hljs-string">date: 2022/01/22</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ucas_Crawler</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    基于Python的UCAS课程网站课件下载程序</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, certCode_url, post_url, logined_url</span>):<br>        self.certCode_url = certCode_url<br>        self.post_url = post_url<br>        self.logined_url = logined_url<br>        self.session = requests.Session() <span class="hljs-comment"># 创建一个session会话</span><br>        self.headers = &#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span><br>        &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_certCode</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        得到验证码</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># 获得验证码图片</span><br>        codePic = self.session.get(self.certCode_url, headers=self.headers)<br>        <span class="hljs-comment"># 将验证码图片存到本地</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;codePic.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(codePic.content)<br>            f.close()<br>        <span class="hljs-comment"># 读取图片</span><br>        img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;codePic.jpg&#x27;</span>)<br>        img.show()<br>        certCode = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入验证码：&#x27;</span>)<br>        <span class="hljs-keyword">return</span> certCode<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login_in</span>(<span class="hljs-params">self, certCode</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        登陆网站</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用户名：&#x27;</span>)<br>        pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码：&#x27;</span>)<br>        post_data = &#123;   <span class="hljs-comment"># 提交表单</span><br>            <span class="hljs-string">&#x27;userName&#x27;</span>: name,<br>            <span class="hljs-string">&#x27;pwd&#x27;</span>: pwd,<br>            <span class="hljs-string">&#x27;certCode&#x27;</span>: certCode,<br>            <span class="hljs-string">&#x27;sb&#x27;</span>: <span class="hljs-string">&#x27;sb&#x27;</span><br>        &#125;<br>        self.session.post(url=self.post_url, data=post_data, headers=self.headers) <span class="hljs-comment"># 提交表单，模拟登陆</span><br>        login_page = self.session.get(url=self.logined_url, headers=self.headers)  <span class="hljs-comment"># 获取登陆后页面信息</span><br>        soup_login = BeautifulSoup(login_page.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        <span class="hljs-keyword">if</span> login_page.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sep登陆成功！&#x27;</span>)<br>            <span class="hljs-comment"># 解析获取课程网站所在页面网址</span><br>            portal_url = <span class="hljs-string">&#x27;http://sep.ucas.ac.cn&#x27;</span> + soup_login.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程网站&#x27;</span>&#125;)[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;href&#x27;</span>]<br>        <span class="hljs-keyword">return</span> portal_url<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Course_Info</span>(<span class="hljs-params">self, portal_url</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        获取选课信息</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        response = self.session.get(portal_url, headers=self.headers)<br>        url = BeautifulSoup(response.content, <span class="hljs-string">&#x27;html.parser&#x27;</span>).find_all(name = <span class="hljs-string">&#x27;h4&#x27;</span>)[<span class="hljs-number">0</span>].a[<span class="hljs-string">&#x27;href&#x27;</span>]<br>        soup = BeautifulSoup(self.session.get(url=url, headers=self.headers).content, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        url_course = soup.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;我的课程 - 查看或加入站点&#x27;</span>&#125;)[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;href&#x27;</span>]<br>        re = BeautifulSoup(self.session.get(url_course, headers=self.headers).content, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        list_course = re.find_all(name=<span class="hljs-string">&#x27;tr&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你当前已选课程如下：\n -----------------------------------------------&#x27;</span>)<br>        i = <span class="hljs-number">0</span><br>        url_course = []  <span class="hljs-comment"># 对应课程的链接网址</span><br>        name_course = []<br>        <span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> list_course:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(course.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_top&#x27;</span>&#125;)) &gt; <span class="hljs-number">0</span>:<br>                i += <span class="hljs-number">1</span><br>                content = course.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_top&#x27;</span>&#125;)[<span class="hljs-number">0</span>]<br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;. &#x27;</span> + content[<span class="hljs-string">&#x27;title&#x27;</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>])<br>                name_course.append(content[<span class="hljs-string">&#x27;title&#x27;</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>])<br>                url_course.append(content[<span class="hljs-string">&#x27;href&#x27;</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------------------------------------------&#x27;</span>)<br>        <span class="hljs-keyword">return</span> url_course, name_course<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">self, url_courses, name_courses</span>):<br>        string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入想要更新课件资源的课程编号（如选择多门课程，请使用空格间隔）：&#x27;</span>)<br>        dirs = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入想要将资源下载到的位置（形式：”D:\\Release\\bin“）：&#x27;</span>)<br>        sect_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, string.split(<span class="hljs-string">&#x27; &#x27;</span>)))<br>        <span class="hljs-keyword">for</span> sect <span class="hljs-keyword">in</span> sect_list:<br>            <span class="hljs-built_in">dir</span> = dirs + <span class="hljs-string">&#x27;\\&#x27;</span> + name_courses[sect-<span class="hljs-number">1</span>]<br>            <span class="hljs-comment"># 判断目录是否存在,不存在则创建目录</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-built_in">dir</span>):<br>                os.makedirs(<span class="hljs-built_in">dir</span>)<br>            current_course = BeautifulSoup(self.session.get(url_courses[sect-<span class="hljs-number">1</span>], headers=self.headers).content, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>            url_course = current_course.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;资源 - 上传、下载课件，发布文档，网址等信息&#x27;</span>&#125;)[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;href&#x27;</span>]<br>            resource = BeautifulSoup(self.session.get(url_course, headers=self.headers).text, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>            <span class="hljs-comment"># 下载所有的ppt</span><br>            <span class="hljs-keyword">for</span> ppt <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;PowerPoint &#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_self&#x27;</span>&#125;):<br>                link = ppt[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + ppt.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> ppt <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Power Point&#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_self&#x27;</span>&#125;):<br>                link = ppt[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + ppt.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 下载所有pdf</span><br>            <span class="hljs-keyword">for</span> pdf <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;PDF&#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_blank&#x27;</span>&#125;):<br>                link = pdf[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + pdf.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 下载所有word</span><br>            <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Word &#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_self&#x27;</span>&#125;):<br>                link = word[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + word.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 下载其他资源</span><br>            <span class="hljs-keyword">for</span> rar <span class="hljs-keyword">in</span> resource.find_all(name=<span class="hljs-string">&#x27;a&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;未知类型&#x27;</span>, <span class="hljs-string">&#x27;target&#x27;</span>: <span class="hljs-string">&#x27;_self&#x27;</span>&#125;):<br>                link = rar[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                <span class="hljs-keyword">try</span>:<br>                    filename = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;\\&#x27;</span> + rar.find(name=<span class="hljs-string">&#x27;span&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;hidden-sm hidden-xs&#x27;</span>&#125;).string<br>                    <span class="hljs-built_in">print</span>(filename)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                        f.write(self.session.get(link, headers=self.headers).content)<br>                    f.close()<br>                <span class="hljs-keyword">except</span> AttributeError:<br>                    <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">self</span>):<br>        certCode = self.get_certCode()<br>        portal_url = self.login_in(certCode)<br>        url_course, name_course = self.Course_Info(portal_url)<br>        self.download_file(url_course, name_course)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    certCode_url = <span class="hljs-string">&#x27;http://sep.ucas.ac.cn/changePic&#x27;</span> <span class="hljs-comment"># 验证码图片的地址</span><br>    post_url = <span class="hljs-string">&#x27;http://sep.ucas.ac.cn/slogin&#x27;</span>        <span class="hljs-comment"># 用户名与密码的请求地址</span><br>    logined_url = <span class="hljs-string">&#x27;https://sep.ucas.ac.cn/appStore&#x27;</span>  <span class="hljs-comment"># 登录后显示页面的地址</span><br>    crawler = Ucas_Crawler(certCode_url, post_url, logined_url)<br>    crawler.main()<br></code></pre></td></tr></table></figure><blockquote><p>源码地址：**Github: **<a href="https://github.com/Northfourta/UCASCourserHelper">UCASCourserHelper</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下c++运行总结</title>
    <link href="/2021/03/13/Linux%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/13/Linux%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="linux下c编程实践总结">1. Linux下C++编程实践总结</h2><h3 id="c程序编译">1.1 C++程序编译</h3><ol type="1"><li>编写一个文本文件：helloSLAM.cpp</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; Hello, SLAM ! &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>将文本文件编译成可执行程序（g++）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">$ g++ helloSLAM.cpp<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.out<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>运行编译完成后的程序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">$ ./a.out<br><span class="hljs-meta">&gt;&gt;&gt; </span>hello, SLAM !<br></code></pre></td></tr></table></figure><blockquote><p>g++基本语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">g++ [选项] 准备编译的文件 [选项] [目标文件]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">$ g++ helloSLAM.cpp -o helloSLAM<span class="hljs-comment"># 将 helloSLAM 编译成名为 helloSLAM 的可执行文件</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="cmake">1.2 cmake</h3><p>由于g++一次只能编译一个程序，当在面对一个大型工程项目时，此种编译方法无疑会带来一个巨大的工作量，cmake会更加高效。在一个cmake工程中，会使用cmake命令生成一个makefile文件，然后用make命令根据makefile文件的内容编译整个工程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fliename : CMakeLists.txt</span><br><span class="hljs-comment"># 声明要求的 cmake 最低版本</span><br>cmake_minimum_required( VERSION <span class="hljs-number">2.8</span> )<br><br><span class="hljs-comment"># 声明一个cmake工程</span><br>project( helloSLAM )<br><br><span class="hljs-comment"># 添加一个可执行程序</span><br><span class="hljs-comment"># 语法：add_executable( 程序名 源代码文件 )</span><br>add_executable( helloSLAM helloSLAM.cpp )<br></code></pre></td></tr></table></figure><p>cmake将会按照 CMakeLists.txt文件生成一个makefile文件，使用make命令编译工程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">$ cmake .   <span class="hljs-comment"># .表示在当前目录下进行cmake</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>(finished)<br>$ make<br><br>$ ./helloSLAM<br><span class="hljs-meta">&gt;&gt;&gt; </span>Hello, SLAM !<br></code></pre></td></tr></table></figure><p>cmake过程中会生成一些中间文件，当发布代码时，我们不希望中间文件一同发布出去，一个个删除太麻烦。更好的做法是将这些中间文件放在一个中间目录中，编译成功后把中间目录删除即可。更常见的做法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">$ mkdir build<br>$ cd build<br>$ cmake .. <span class="hljs-comment"># 对上一文件夹进行编译</span><br>$ make<br></code></pre></td></tr></table></figure><h3 id="库文件">1.3 库文件</h3><p>C++工程中，并不是所有的代码都会编译成可执行文件。只有main函数的文件才会生成可执行程序。另一部分代码，我们将其打包成一个东西，供其他程序调用。这个东西称为库（Library）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// filename : libHelloSLAM.cpp</span><br><span class="hljs-comment">// 这是一个库文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printHello</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; Hello, SLAM ! &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 CMakeLists.txt 里添加如下内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">add_library( hello libHelloSLAM.cpp) <span class="hljs-comment">// 将这个文件编译成一个名叫 “hello” 的库</span><br>    <br>&gt;&gt;&gt; 生成一个 libhello.a 的文件<br></code></pre></td></tr></table></figure><blockquote><p>Linux中库文件分为<strong>静态库</strong>和<strong>动态库</strong>，静态库以.a 作为后缀，共享库以 .so 结尾。</p></blockquote><p>生成共享库：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">add_library</span>( hello_shared SHARED libHelloSLAM.cpp)<br>    <br>&gt;&gt;&gt; 生成一个 libhello_shared.so 的文件<br></code></pre></td></tr></table></figure><p>在使用库文件之前，需要定义头文件。下面编写 libhello 的库文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// filename : libHelloSLAM.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LIBHELLOSLAM_H_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LIBHELLOSLAM_H_</span><br><span class="hljs-comment">// 防止重复引用头文件而引起重定义错误</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printHello</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>调用库：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// filename : useHello.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libHelloSLAM.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printHello</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 CMakeLists.txt 里添加如下内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">add_executable( useHello useHello.cpp )<br>target_link_libraries( useHello hello_shared )<br></code></pre></td></tr></table></figure><h2 id="ubuntu创建桌面图标">2. ubuntu创建桌面图标</h2><p>首先，进入 applications 目录下，并创建一个 clion.desktop 文件,使用gedit 进行编辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">cd /usr/share/applications/<br>    <br>sudo touch clion.desktop<br>    <br>sudo gedit clion.desktop<br></code></pre></td></tr></table></figure><p>在文件中添加如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">[Desktop Entry]<br>Encoding=UTF<span class="hljs-number">-8</span><br><br>Name=CLion<br><br>Comment=clion<span class="hljs-number">-2020.3</span><span class="hljs-number">.3</span><br><br>Exec=/home/gq/Application/clion<span class="hljs-number">-2020.3</span><span class="hljs-number">.3</span>/bin/clion.sh<br><br>Icon=/home/gq/Application/clion<span class="hljs-number">-2020.3</span><span class="hljs-number">.3</span>/bin/clion.svg<br><br>Categories=Application;Development;Java;IDE<br><br>Version=<span class="hljs-number">2020.3</span><span class="hljs-number">.3</span><br><br>Type=Application<br><br>#Terminal=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
